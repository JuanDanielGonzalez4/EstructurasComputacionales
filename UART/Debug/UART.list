
UART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a7dc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000404  0800a970  0800a970  0001a970  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ad74  0800ad74  000201d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800ad74  0800ad74  0001ad74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ad7c  0800ad7c  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ad7c  0800ad7c  0001ad7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ad80  0800ad80  0001ad80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  0800ad84  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000348  200001d4  0800af58  000201d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000051c  0800af58  0002051c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 13 .debug_info   00015ec3  00000000  00000000  00020247  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002b6c  00000000  00000000  0003610a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001408  00000000  00000000  00038c78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000fa3  00000000  00000000  0003a080  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000298fa  00000000  00000000  0003b023  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00016c96  00000000  00000000  0006491d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    001076d5  00000000  00000000  0007b5b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006660  00000000  00000000  00182c88  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000092  00000000  00000000  001892e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d4 	.word	0x200001d4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a954 	.word	0x0800a954

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001d8 	.word	0x200001d8
 80001cc:	0800a954 	.word	0x0800a954

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b970 	b.w	8000f40 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9e08      	ldr	r6, [sp, #32]
 8000c7e:	460d      	mov	r5, r1
 8000c80:	4604      	mov	r4, r0
 8000c82:	460f      	mov	r7, r1
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d14a      	bne.n	8000d1e <__udivmoddi4+0xa6>
 8000c88:	428a      	cmp	r2, r1
 8000c8a:	4694      	mov	ip, r2
 8000c8c:	d965      	bls.n	8000d5a <__udivmoddi4+0xe2>
 8000c8e:	fab2 f382 	clz	r3, r2
 8000c92:	b143      	cbz	r3, 8000ca6 <__udivmoddi4+0x2e>
 8000c94:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c98:	f1c3 0220 	rsb	r2, r3, #32
 8000c9c:	409f      	lsls	r7, r3
 8000c9e:	fa20 f202 	lsr.w	r2, r0, r2
 8000ca2:	4317      	orrs	r7, r2
 8000ca4:	409c      	lsls	r4, r3
 8000ca6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000caa:	fa1f f58c 	uxth.w	r5, ip
 8000cae:	fbb7 f1fe 	udiv	r1, r7, lr
 8000cb2:	0c22      	lsrs	r2, r4, #16
 8000cb4:	fb0e 7711 	mls	r7, lr, r1, r7
 8000cb8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000cbc:	fb01 f005 	mul.w	r0, r1, r5
 8000cc0:	4290      	cmp	r0, r2
 8000cc2:	d90a      	bls.n	8000cda <__udivmoddi4+0x62>
 8000cc4:	eb1c 0202 	adds.w	r2, ip, r2
 8000cc8:	f101 37ff 	add.w	r7, r1, #4294967295
 8000ccc:	f080 811c 	bcs.w	8000f08 <__udivmoddi4+0x290>
 8000cd0:	4290      	cmp	r0, r2
 8000cd2:	f240 8119 	bls.w	8000f08 <__udivmoddi4+0x290>
 8000cd6:	3902      	subs	r1, #2
 8000cd8:	4462      	add	r2, ip
 8000cda:	1a12      	subs	r2, r2, r0
 8000cdc:	b2a4      	uxth	r4, r4
 8000cde:	fbb2 f0fe 	udiv	r0, r2, lr
 8000ce2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000ce6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000cea:	fb00 f505 	mul.w	r5, r0, r5
 8000cee:	42a5      	cmp	r5, r4
 8000cf0:	d90a      	bls.n	8000d08 <__udivmoddi4+0x90>
 8000cf2:	eb1c 0404 	adds.w	r4, ip, r4
 8000cf6:	f100 32ff 	add.w	r2, r0, #4294967295
 8000cfa:	f080 8107 	bcs.w	8000f0c <__udivmoddi4+0x294>
 8000cfe:	42a5      	cmp	r5, r4
 8000d00:	f240 8104 	bls.w	8000f0c <__udivmoddi4+0x294>
 8000d04:	4464      	add	r4, ip
 8000d06:	3802      	subs	r0, #2
 8000d08:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d0c:	1b64      	subs	r4, r4, r5
 8000d0e:	2100      	movs	r1, #0
 8000d10:	b11e      	cbz	r6, 8000d1a <__udivmoddi4+0xa2>
 8000d12:	40dc      	lsrs	r4, r3
 8000d14:	2300      	movs	r3, #0
 8000d16:	e9c6 4300 	strd	r4, r3, [r6]
 8000d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d908      	bls.n	8000d34 <__udivmoddi4+0xbc>
 8000d22:	2e00      	cmp	r6, #0
 8000d24:	f000 80ed 	beq.w	8000f02 <__udivmoddi4+0x28a>
 8000d28:	2100      	movs	r1, #0
 8000d2a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d2e:	4608      	mov	r0, r1
 8000d30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d34:	fab3 f183 	clz	r1, r3
 8000d38:	2900      	cmp	r1, #0
 8000d3a:	d149      	bne.n	8000dd0 <__udivmoddi4+0x158>
 8000d3c:	42ab      	cmp	r3, r5
 8000d3e:	d302      	bcc.n	8000d46 <__udivmoddi4+0xce>
 8000d40:	4282      	cmp	r2, r0
 8000d42:	f200 80f8 	bhi.w	8000f36 <__udivmoddi4+0x2be>
 8000d46:	1a84      	subs	r4, r0, r2
 8000d48:	eb65 0203 	sbc.w	r2, r5, r3
 8000d4c:	2001      	movs	r0, #1
 8000d4e:	4617      	mov	r7, r2
 8000d50:	2e00      	cmp	r6, #0
 8000d52:	d0e2      	beq.n	8000d1a <__udivmoddi4+0xa2>
 8000d54:	e9c6 4700 	strd	r4, r7, [r6]
 8000d58:	e7df      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000d5a:	b902      	cbnz	r2, 8000d5e <__udivmoddi4+0xe6>
 8000d5c:	deff      	udf	#255	; 0xff
 8000d5e:	fab2 f382 	clz	r3, r2
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	f040 8090 	bne.w	8000e88 <__udivmoddi4+0x210>
 8000d68:	1a8a      	subs	r2, r1, r2
 8000d6a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d6e:	fa1f fe8c 	uxth.w	lr, ip
 8000d72:	2101      	movs	r1, #1
 8000d74:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d78:	fb07 2015 	mls	r0, r7, r5, r2
 8000d7c:	0c22      	lsrs	r2, r4, #16
 8000d7e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d82:	fb0e f005 	mul.w	r0, lr, r5
 8000d86:	4290      	cmp	r0, r2
 8000d88:	d908      	bls.n	8000d9c <__udivmoddi4+0x124>
 8000d8a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d8e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d92:	d202      	bcs.n	8000d9a <__udivmoddi4+0x122>
 8000d94:	4290      	cmp	r0, r2
 8000d96:	f200 80cb 	bhi.w	8000f30 <__udivmoddi4+0x2b8>
 8000d9a:	4645      	mov	r5, r8
 8000d9c:	1a12      	subs	r2, r2, r0
 8000d9e:	b2a4      	uxth	r4, r4
 8000da0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000da4:	fb07 2210 	mls	r2, r7, r0, r2
 8000da8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dac:	fb0e fe00 	mul.w	lr, lr, r0
 8000db0:	45a6      	cmp	lr, r4
 8000db2:	d908      	bls.n	8000dc6 <__udivmoddi4+0x14e>
 8000db4:	eb1c 0404 	adds.w	r4, ip, r4
 8000db8:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dbc:	d202      	bcs.n	8000dc4 <__udivmoddi4+0x14c>
 8000dbe:	45a6      	cmp	lr, r4
 8000dc0:	f200 80bb 	bhi.w	8000f3a <__udivmoddi4+0x2c2>
 8000dc4:	4610      	mov	r0, r2
 8000dc6:	eba4 040e 	sub.w	r4, r4, lr
 8000dca:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000dce:	e79f      	b.n	8000d10 <__udivmoddi4+0x98>
 8000dd0:	f1c1 0720 	rsb	r7, r1, #32
 8000dd4:	408b      	lsls	r3, r1
 8000dd6:	fa22 fc07 	lsr.w	ip, r2, r7
 8000dda:	ea4c 0c03 	orr.w	ip, ip, r3
 8000dde:	fa05 f401 	lsl.w	r4, r5, r1
 8000de2:	fa20 f307 	lsr.w	r3, r0, r7
 8000de6:	40fd      	lsrs	r5, r7
 8000de8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000dec:	4323      	orrs	r3, r4
 8000dee:	fbb5 f8f9 	udiv	r8, r5, r9
 8000df2:	fa1f fe8c 	uxth.w	lr, ip
 8000df6:	fb09 5518 	mls	r5, r9, r8, r5
 8000dfa:	0c1c      	lsrs	r4, r3, #16
 8000dfc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e00:	fb08 f50e 	mul.w	r5, r8, lr
 8000e04:	42a5      	cmp	r5, r4
 8000e06:	fa02 f201 	lsl.w	r2, r2, r1
 8000e0a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e0e:	d90b      	bls.n	8000e28 <__udivmoddi4+0x1b0>
 8000e10:	eb1c 0404 	adds.w	r4, ip, r4
 8000e14:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e18:	f080 8088 	bcs.w	8000f2c <__udivmoddi4+0x2b4>
 8000e1c:	42a5      	cmp	r5, r4
 8000e1e:	f240 8085 	bls.w	8000f2c <__udivmoddi4+0x2b4>
 8000e22:	f1a8 0802 	sub.w	r8, r8, #2
 8000e26:	4464      	add	r4, ip
 8000e28:	1b64      	subs	r4, r4, r5
 8000e2a:	b29d      	uxth	r5, r3
 8000e2c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e30:	fb09 4413 	mls	r4, r9, r3, r4
 8000e34:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e38:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e3c:	45a6      	cmp	lr, r4
 8000e3e:	d908      	bls.n	8000e52 <__udivmoddi4+0x1da>
 8000e40:	eb1c 0404 	adds.w	r4, ip, r4
 8000e44:	f103 35ff 	add.w	r5, r3, #4294967295
 8000e48:	d26c      	bcs.n	8000f24 <__udivmoddi4+0x2ac>
 8000e4a:	45a6      	cmp	lr, r4
 8000e4c:	d96a      	bls.n	8000f24 <__udivmoddi4+0x2ac>
 8000e4e:	3b02      	subs	r3, #2
 8000e50:	4464      	add	r4, ip
 8000e52:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e56:	fba3 9502 	umull	r9, r5, r3, r2
 8000e5a:	eba4 040e 	sub.w	r4, r4, lr
 8000e5e:	42ac      	cmp	r4, r5
 8000e60:	46c8      	mov	r8, r9
 8000e62:	46ae      	mov	lr, r5
 8000e64:	d356      	bcc.n	8000f14 <__udivmoddi4+0x29c>
 8000e66:	d053      	beq.n	8000f10 <__udivmoddi4+0x298>
 8000e68:	b156      	cbz	r6, 8000e80 <__udivmoddi4+0x208>
 8000e6a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e6e:	eb64 040e 	sbc.w	r4, r4, lr
 8000e72:	fa04 f707 	lsl.w	r7, r4, r7
 8000e76:	40ca      	lsrs	r2, r1
 8000e78:	40cc      	lsrs	r4, r1
 8000e7a:	4317      	orrs	r7, r2
 8000e7c:	e9c6 7400 	strd	r7, r4, [r6]
 8000e80:	4618      	mov	r0, r3
 8000e82:	2100      	movs	r1, #0
 8000e84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e88:	f1c3 0120 	rsb	r1, r3, #32
 8000e8c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e90:	fa20 f201 	lsr.w	r2, r0, r1
 8000e94:	fa25 f101 	lsr.w	r1, r5, r1
 8000e98:	409d      	lsls	r5, r3
 8000e9a:	432a      	orrs	r2, r5
 8000e9c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ea0:	fa1f fe8c 	uxth.w	lr, ip
 8000ea4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ea8:	fb07 1510 	mls	r5, r7, r0, r1
 8000eac:	0c11      	lsrs	r1, r2, #16
 8000eae:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000eb2:	fb00 f50e 	mul.w	r5, r0, lr
 8000eb6:	428d      	cmp	r5, r1
 8000eb8:	fa04 f403 	lsl.w	r4, r4, r3
 8000ebc:	d908      	bls.n	8000ed0 <__udivmoddi4+0x258>
 8000ebe:	eb1c 0101 	adds.w	r1, ip, r1
 8000ec2:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ec6:	d22f      	bcs.n	8000f28 <__udivmoddi4+0x2b0>
 8000ec8:	428d      	cmp	r5, r1
 8000eca:	d92d      	bls.n	8000f28 <__udivmoddi4+0x2b0>
 8000ecc:	3802      	subs	r0, #2
 8000ece:	4461      	add	r1, ip
 8000ed0:	1b49      	subs	r1, r1, r5
 8000ed2:	b292      	uxth	r2, r2
 8000ed4:	fbb1 f5f7 	udiv	r5, r1, r7
 8000ed8:	fb07 1115 	mls	r1, r7, r5, r1
 8000edc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ee0:	fb05 f10e 	mul.w	r1, r5, lr
 8000ee4:	4291      	cmp	r1, r2
 8000ee6:	d908      	bls.n	8000efa <__udivmoddi4+0x282>
 8000ee8:	eb1c 0202 	adds.w	r2, ip, r2
 8000eec:	f105 38ff 	add.w	r8, r5, #4294967295
 8000ef0:	d216      	bcs.n	8000f20 <__udivmoddi4+0x2a8>
 8000ef2:	4291      	cmp	r1, r2
 8000ef4:	d914      	bls.n	8000f20 <__udivmoddi4+0x2a8>
 8000ef6:	3d02      	subs	r5, #2
 8000ef8:	4462      	add	r2, ip
 8000efa:	1a52      	subs	r2, r2, r1
 8000efc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f00:	e738      	b.n	8000d74 <__udivmoddi4+0xfc>
 8000f02:	4631      	mov	r1, r6
 8000f04:	4630      	mov	r0, r6
 8000f06:	e708      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000f08:	4639      	mov	r1, r7
 8000f0a:	e6e6      	b.n	8000cda <__udivmoddi4+0x62>
 8000f0c:	4610      	mov	r0, r2
 8000f0e:	e6fb      	b.n	8000d08 <__udivmoddi4+0x90>
 8000f10:	4548      	cmp	r0, r9
 8000f12:	d2a9      	bcs.n	8000e68 <__udivmoddi4+0x1f0>
 8000f14:	ebb9 0802 	subs.w	r8, r9, r2
 8000f18:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f1c:	3b01      	subs	r3, #1
 8000f1e:	e7a3      	b.n	8000e68 <__udivmoddi4+0x1f0>
 8000f20:	4645      	mov	r5, r8
 8000f22:	e7ea      	b.n	8000efa <__udivmoddi4+0x282>
 8000f24:	462b      	mov	r3, r5
 8000f26:	e794      	b.n	8000e52 <__udivmoddi4+0x1da>
 8000f28:	4640      	mov	r0, r8
 8000f2a:	e7d1      	b.n	8000ed0 <__udivmoddi4+0x258>
 8000f2c:	46d0      	mov	r8, sl
 8000f2e:	e77b      	b.n	8000e28 <__udivmoddi4+0x1b0>
 8000f30:	3d02      	subs	r5, #2
 8000f32:	4462      	add	r2, ip
 8000f34:	e732      	b.n	8000d9c <__udivmoddi4+0x124>
 8000f36:	4608      	mov	r0, r1
 8000f38:	e70a      	b.n	8000d50 <__udivmoddi4+0xd8>
 8000f3a:	4464      	add	r4, ip
 8000f3c:	3802      	subs	r0, #2
 8000f3e:	e742      	b.n	8000dc6 <__udivmoddi4+0x14e>

08000f40 <__aeabi_idiv0>:
 8000f40:	4770      	bx	lr
 8000f42:	bf00      	nop

08000f44 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b084      	sub	sp, #16
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	60f8      	str	r0, [r7, #12]
 8000f4c:	60b9      	str	r1, [r7, #8]
 8000f4e:	607a      	str	r2, [r7, #4]
	while (tx_busy != 0) {/* Wait */}
 8000f50:	bf00      	nop
 8000f52:	4b09      	ldr	r3, [pc, #36]	; (8000f78 <_write+0x34>)
 8000f54:	781b      	ldrb	r3, [r3, #0]
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d1fb      	bne.n	8000f52 <_write+0xe>
  HAL_UART_Transmit_DMA(&huart2, (uint8_t *)ptr, len);
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	b29b      	uxth	r3, r3
 8000f5e:	461a      	mov	r2, r3
 8000f60:	68b9      	ldr	r1, [r7, #8]
 8000f62:	4806      	ldr	r0, [pc, #24]	; (8000f7c <_write+0x38>)
 8000f64:	f005 fc5a 	bl	800681c <HAL_UART_Transmit_DMA>
  tx_busy = 1;
 8000f68:	4b03      	ldr	r3, [pc, #12]	; (8000f78 <_write+0x34>)
 8000f6a:	2201      	movs	r2, #1
 8000f6c:	701a      	strb	r2, [r3, #0]
  return len;
 8000f6e:	687b      	ldr	r3, [r7, #4]
}
 8000f70:	4618      	mov	r0, r3
 8000f72:	3710      	adds	r7, #16
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bd80      	pop	{r7, pc}
 8000f78:	200003c0 	.word	0x200003c0
 8000f7c:	200002ec 	.word	0x200002ec

08000f80 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b082      	sub	sp, #8
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]

	printf("Received: [%s]\r\n", rx_buffer);
 8000f88:	4906      	ldr	r1, [pc, #24]	; (8000fa4 <HAL_UART_RxCpltCallback+0x24>)
 8000f8a:	4807      	ldr	r0, [pc, #28]	; (8000fa8 <HAL_UART_RxCpltCallback+0x28>)
 8000f8c:	f007 fd3c 	bl	8008a08 <iprintf>
	HAL_UART_Receive_IT(&huart2, rx_buffer, 4);
 8000f90:	2204      	movs	r2, #4
 8000f92:	4904      	ldr	r1, [pc, #16]	; (8000fa4 <HAL_UART_RxCpltCallback+0x24>)
 8000f94:	4805      	ldr	r0, [pc, #20]	; (8000fac <HAL_UART_RxCpltCallback+0x2c>)
 8000f96:	f005 fbf5 	bl	8006784 <HAL_UART_Receive_IT>
}
 8000f9a:	bf00      	nop
 8000f9c:	3708      	adds	r7, #8
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd80      	pop	{r7, pc}
 8000fa2:	bf00      	nop
 8000fa4:	200003bc 	.word	0x200003bc
 8000fa8:	0800a970 	.word	0x0800a970
 8000fac:	200002ec 	.word	0x200002ec

08000fb0 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	b083      	sub	sp, #12
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
	tx_busy = 0;
 8000fb8:	4b04      	ldr	r3, [pc, #16]	; (8000fcc <HAL_UART_TxCpltCallback+0x1c>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	701a      	strb	r2, [r3, #0]
}
 8000fbe:	bf00      	nop
 8000fc0:	370c      	adds	r7, #12
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc8:	4770      	bx	lr
 8000fca:	bf00      	nop
 8000fcc:	200003c0 	.word	0x200003c0

08000fd0 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b082      	sub	sp, #8
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
	static uint32_t counter = 0;
	printf("Counter: %ld\r\n", counter++);
 8000fd8:	4b06      	ldr	r3, [pc, #24]	; (8000ff4 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	1c5a      	adds	r2, r3, #1
 8000fde:	4905      	ldr	r1, [pc, #20]	; (8000ff4 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8000fe0:	600a      	str	r2, [r1, #0]
 8000fe2:	4619      	mov	r1, r3
 8000fe4:	4804      	ldr	r0, [pc, #16]	; (8000ff8 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000fe6:	f007 fd0f 	bl	8008a08 <iprintf>
}
 8000fea:	bf00      	nop
 8000fec:	3708      	adds	r7, #8
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	200003c4 	.word	0x200003c4
 8000ff8:	0800a984 	.word	0x0800a984

08000ffc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ffc:	b5b0      	push	{r4, r5, r7, lr}
 8000ffe:	b086      	sub	sp, #24
 8001000:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001002:	f000 fdb9 	bl	8001b78 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001006:	f000 f89b 	bl	8001140 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800100a:	f000 faa5 	bl	8001558 <MX_GPIO_Init>
  MX_DMA_Init();
 800100e:	f000 fa85 	bl	800151c <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001012:	f000 fa53 	bl	80014bc <MX_USART2_UART_Init>
  MX_TIM7_Init();
 8001016:	f000 fa19 	bl	800144c <MX_TIM7_Init>
  MX_TIM1_Init();
 800101a:	f000 f969 	bl	80012f0 <MX_TIM1_Init>
  MX_ADC1_Init();
 800101e:	f000 f8e1 	bl	80011e4 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart2, rx_buffer, 4);
 8001022:	2204      	movs	r2, #4
 8001024:	493c      	ldr	r1, [pc, #240]	; (8001118 <main+0x11c>)
 8001026:	483d      	ldr	r0, [pc, #244]	; (800111c <main+0x120>)
 8001028:	f005 fbac 	bl	8006784 <HAL_UART_Receive_IT>
  HAL_TIM_Base_Start_IT(&htim7);
 800102c:	483c      	ldr	r0, [pc, #240]	; (8001120 <main+0x124>)
 800102e:	f004 f927 	bl	8005280 <HAL_TIM_Base_Start_IT>

  TIM1->CCR1 = 50;
 8001032:	4b3c      	ldr	r3, [pc, #240]	; (8001124 <main+0x128>)
 8001034:	2232      	movs	r2, #50	; 0x32
 8001036:	635a      	str	r2, [r3, #52]	; 0x34
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001038:	2100      	movs	r1, #0
 800103a:	483b      	ldr	r0, [pc, #236]	; (8001128 <main+0x12c>)
 800103c:	f004 f9f2 	bl	8005424 <HAL_TIM_PWM_Start>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  for (uint8_t idx =0; idx <= 0x0F; idx++)
 8001040:	2300      	movs	r3, #0
 8001042:	73fb      	strb	r3, [r7, #15]
 8001044:	e007      	b.n	8001056 <main+0x5a>
	  printf("IDX: 0x%02X\r\n", idx);
 8001046:	7bfb      	ldrb	r3, [r7, #15]
 8001048:	4619      	mov	r1, r3
 800104a:	4838      	ldr	r0, [pc, #224]	; (800112c <main+0x130>)
 800104c:	f007 fcdc 	bl	8008a08 <iprintf>
  for (uint8_t idx =0; idx <= 0x0F; idx++)
 8001050:	7bfb      	ldrb	r3, [r7, #15]
 8001052:	3301      	adds	r3, #1
 8001054:	73fb      	strb	r3, [r7, #15]
 8001056:	7bfb      	ldrb	r3, [r7, #15]
 8001058:	2b0f      	cmp	r3, #15
 800105a:	d9f4      	bls.n	8001046 <main+0x4a>
  while (1)
  {
	HAL_ADC_Start(&hadc1);
 800105c:	4834      	ldr	r0, [pc, #208]	; (8001130 <main+0x134>)
 800105e:	f001 f95f 	bl	8002320 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 10);
 8001062:	210a      	movs	r1, #10
 8001064:	4832      	ldr	r0, [pc, #200]	; (8001130 <main+0x134>)
 8001066:	f001 fa15 	bl	8002494 <HAL_ADC_PollForConversion>
	uint16_t adc_value = HAL_ADC_GetValue(&hadc1);
 800106a:	4831      	ldr	r0, [pc, #196]	; (8001130 <main+0x134>)
 800106c:	f001 faea 	bl	8002644 <HAL_ADC_GetValue>
 8001070:	4603      	mov	r3, r0
 8001072:	81bb      	strh	r3, [r7, #12]
	HAL_ADC_PollForConversion(&hadc1, 10);
 8001074:	210a      	movs	r1, #10
 8001076:	482e      	ldr	r0, [pc, #184]	; (8001130 <main+0x134>)
 8001078:	f001 fa0c 	bl	8002494 <HAL_ADC_PollForConversion>
	uint16_t adc_value2 = HAL_ADC_GetValue(&hadc1);
 800107c:	482c      	ldr	r0, [pc, #176]	; (8001130 <main+0x134>)
 800107e:	f001 fae1 	bl	8002644 <HAL_ADC_GetValue>
 8001082:	4603      	mov	r3, r0
 8001084:	817b      	strh	r3, [r7, #10]
	float adc_voltage = (adc_value/4096.0 * 5.5);
 8001086:	89bb      	ldrh	r3, [r7, #12]
 8001088:	4618      	mov	r0, r3
 800108a:	f7ff fa4b 	bl	8000524 <__aeabi_i2d>
 800108e:	f04f 0200 	mov.w	r2, #0
 8001092:	4b28      	ldr	r3, [pc, #160]	; (8001134 <main+0x138>)
 8001094:	f7ff fbda 	bl	800084c <__aeabi_ddiv>
 8001098:	4602      	mov	r2, r0
 800109a:	460b      	mov	r3, r1
 800109c:	4610      	mov	r0, r2
 800109e:	4619      	mov	r1, r3
 80010a0:	f04f 0200 	mov.w	r2, #0
 80010a4:	4b24      	ldr	r3, [pc, #144]	; (8001138 <main+0x13c>)
 80010a6:	f7ff faa7 	bl	80005f8 <__aeabi_dmul>
 80010aa:	4602      	mov	r2, r0
 80010ac:	460b      	mov	r3, r1
 80010ae:	4610      	mov	r0, r2
 80010b0:	4619      	mov	r1, r3
 80010b2:	f7ff fd79 	bl	8000ba8 <__aeabi_d2f>
 80010b6:	4603      	mov	r3, r0
 80010b8:	607b      	str	r3, [r7, #4]
	float adc_voltage2 = (adc_value2/4096.0 * 5.5);
 80010ba:	897b      	ldrh	r3, [r7, #10]
 80010bc:	4618      	mov	r0, r3
 80010be:	f7ff fa31 	bl	8000524 <__aeabi_i2d>
 80010c2:	f04f 0200 	mov.w	r2, #0
 80010c6:	4b1b      	ldr	r3, [pc, #108]	; (8001134 <main+0x138>)
 80010c8:	f7ff fbc0 	bl	800084c <__aeabi_ddiv>
 80010cc:	4602      	mov	r2, r0
 80010ce:	460b      	mov	r3, r1
 80010d0:	4610      	mov	r0, r2
 80010d2:	4619      	mov	r1, r3
 80010d4:	f04f 0200 	mov.w	r2, #0
 80010d8:	4b17      	ldr	r3, [pc, #92]	; (8001138 <main+0x13c>)
 80010da:	f7ff fa8d 	bl	80005f8 <__aeabi_dmul>
 80010de:	4602      	mov	r2, r0
 80010e0:	460b      	mov	r3, r1
 80010e2:	4610      	mov	r0, r2
 80010e4:	4619      	mov	r1, r3
 80010e6:	f7ff fd5f 	bl	8000ba8 <__aeabi_d2f>
 80010ea:	4603      	mov	r3, r0
 80010ec:	603b      	str	r3, [r7, #0]
	printf("ADC Reading %f, %f\r\n", adc_voltage, adc_voltage2);
 80010ee:	6878      	ldr	r0, [r7, #4]
 80010f0:	f7ff fa2a 	bl	8000548 <__aeabi_f2d>
 80010f4:	4604      	mov	r4, r0
 80010f6:	460d      	mov	r5, r1
 80010f8:	6838      	ldr	r0, [r7, #0]
 80010fa:	f7ff fa25 	bl	8000548 <__aeabi_f2d>
 80010fe:	4602      	mov	r2, r0
 8001100:	460b      	mov	r3, r1
 8001102:	e9cd 2300 	strd	r2, r3, [sp]
 8001106:	4622      	mov	r2, r4
 8001108:	462b      	mov	r3, r5
 800110a:	480c      	ldr	r0, [pc, #48]	; (800113c <main+0x140>)
 800110c:	f007 fc7c 	bl	8008a08 <iprintf>
	HAL_Delay(100);
 8001110:	2064      	movs	r0, #100	; 0x64
 8001112:	f000 fdad 	bl	8001c70 <HAL_Delay>
  {
 8001116:	e7a1      	b.n	800105c <main+0x60>
 8001118:	200003bc 	.word	0x200003bc
 800111c:	200002ec 	.word	0x200002ec
 8001120:	200002a0 	.word	0x200002a0
 8001124:	40012c00 	.word	0x40012c00
 8001128:	20000254 	.word	0x20000254
 800112c:	0800a994 	.word	0x0800a994
 8001130:	200001f0 	.word	0x200001f0
 8001134:	40b00000 	.word	0x40b00000
 8001138:	40160000 	.word	0x40160000
 800113c:	0800a9a4 	.word	0x0800a9a4

08001140 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b096      	sub	sp, #88	; 0x58
 8001144:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001146:	f107 0314 	add.w	r3, r7, #20
 800114a:	2244      	movs	r2, #68	; 0x44
 800114c:	2100      	movs	r1, #0
 800114e:	4618      	mov	r0, r3
 8001150:	f007 fcaf 	bl	8008ab2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001154:	463b      	mov	r3, r7
 8001156:	2200      	movs	r2, #0
 8001158:	601a      	str	r2, [r3, #0]
 800115a:	605a      	str	r2, [r3, #4]
 800115c:	609a      	str	r2, [r3, #8]
 800115e:	60da      	str	r2, [r3, #12]
 8001160:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001162:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001166:	f002 fd21 	bl	8003bac <HAL_PWREx_ControlVoltageScaling>
 800116a:	4603      	mov	r3, r0
 800116c:	2b00      	cmp	r3, #0
 800116e:	d001      	beq.n	8001174 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001170:	f000 fa3c 	bl	80015ec <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001174:	2302      	movs	r3, #2
 8001176:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001178:	f44f 7380 	mov.w	r3, #256	; 0x100
 800117c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800117e:	2310      	movs	r3, #16
 8001180:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001182:	2302      	movs	r3, #2
 8001184:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001186:	2302      	movs	r3, #2
 8001188:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800118a:	2301      	movs	r3, #1
 800118c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800118e:	230a      	movs	r3, #10
 8001190:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001192:	2307      	movs	r3, #7
 8001194:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001196:	2302      	movs	r3, #2
 8001198:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800119a:	2302      	movs	r3, #2
 800119c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800119e:	f107 0314 	add.w	r3, r7, #20
 80011a2:	4618      	mov	r0, r3
 80011a4:	f002 fd58 	bl	8003c58 <HAL_RCC_OscConfig>
 80011a8:	4603      	mov	r3, r0
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d001      	beq.n	80011b2 <SystemClock_Config+0x72>
  {
    Error_Handler();
 80011ae:	f000 fa1d 	bl	80015ec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011b2:	230f      	movs	r3, #15
 80011b4:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011b6:	2303      	movs	r3, #3
 80011b8:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011ba:	2300      	movs	r3, #0
 80011bc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80011be:	2300      	movs	r3, #0
 80011c0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011c2:	2300      	movs	r3, #0
 80011c4:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80011c6:	463b      	mov	r3, r7
 80011c8:	2104      	movs	r1, #4
 80011ca:	4618      	mov	r0, r3
 80011cc:	f003 f920 	bl	8004410 <HAL_RCC_ClockConfig>
 80011d0:	4603      	mov	r3, r0
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d001      	beq.n	80011da <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80011d6:	f000 fa09 	bl	80015ec <Error_Handler>
  }
}
 80011da:	bf00      	nop
 80011dc:	3758      	adds	r7, #88	; 0x58
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}
	...

080011e4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b08a      	sub	sp, #40	; 0x28
 80011e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80011ea:	f107 031c 	add.w	r3, r7, #28
 80011ee:	2200      	movs	r2, #0
 80011f0:	601a      	str	r2, [r3, #0]
 80011f2:	605a      	str	r2, [r3, #4]
 80011f4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80011f6:	1d3b      	adds	r3, r7, #4
 80011f8:	2200      	movs	r2, #0
 80011fa:	601a      	str	r2, [r3, #0]
 80011fc:	605a      	str	r2, [r3, #4]
 80011fe:	609a      	str	r2, [r3, #8]
 8001200:	60da      	str	r2, [r3, #12]
 8001202:	611a      	str	r2, [r3, #16]
 8001204:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001206:	4b36      	ldr	r3, [pc, #216]	; (80012e0 <MX_ADC1_Init+0xfc>)
 8001208:	4a36      	ldr	r2, [pc, #216]	; (80012e4 <MX_ADC1_Init+0x100>)
 800120a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800120c:	4b34      	ldr	r3, [pc, #208]	; (80012e0 <MX_ADC1_Init+0xfc>)
 800120e:	2200      	movs	r2, #0
 8001210:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001212:	4b33      	ldr	r3, [pc, #204]	; (80012e0 <MX_ADC1_Init+0xfc>)
 8001214:	2200      	movs	r2, #0
 8001216:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001218:	4b31      	ldr	r3, [pc, #196]	; (80012e0 <MX_ADC1_Init+0xfc>)
 800121a:	2200      	movs	r2, #0
 800121c:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800121e:	4b30      	ldr	r3, [pc, #192]	; (80012e0 <MX_ADC1_Init+0xfc>)
 8001220:	2201      	movs	r2, #1
 8001222:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001224:	4b2e      	ldr	r3, [pc, #184]	; (80012e0 <MX_ADC1_Init+0xfc>)
 8001226:	2204      	movs	r2, #4
 8001228:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800122a:	4b2d      	ldr	r3, [pc, #180]	; (80012e0 <MX_ADC1_Init+0xfc>)
 800122c:	2200      	movs	r2, #0
 800122e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001230:	4b2b      	ldr	r3, [pc, #172]	; (80012e0 <MX_ADC1_Init+0xfc>)
 8001232:	2201      	movs	r2, #1
 8001234:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 2;
 8001236:	4b2a      	ldr	r3, [pc, #168]	; (80012e0 <MX_ADC1_Init+0xfc>)
 8001238:	2202      	movs	r2, #2
 800123a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800123c:	4b28      	ldr	r3, [pc, #160]	; (80012e0 <MX_ADC1_Init+0xfc>)
 800123e:	2200      	movs	r2, #0
 8001240:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001244:	4b26      	ldr	r3, [pc, #152]	; (80012e0 <MX_ADC1_Init+0xfc>)
 8001246:	2200      	movs	r2, #0
 8001248:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800124a:	4b25      	ldr	r3, [pc, #148]	; (80012e0 <MX_ADC1_Init+0xfc>)
 800124c:	2200      	movs	r2, #0
 800124e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001250:	4b23      	ldr	r3, [pc, #140]	; (80012e0 <MX_ADC1_Init+0xfc>)
 8001252:	2200      	movs	r2, #0
 8001254:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001258:	4b21      	ldr	r3, [pc, #132]	; (80012e0 <MX_ADC1_Init+0xfc>)
 800125a:	2200      	movs	r2, #0
 800125c:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800125e:	4b20      	ldr	r3, [pc, #128]	; (80012e0 <MX_ADC1_Init+0xfc>)
 8001260:	2200      	movs	r2, #0
 8001262:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001266:	481e      	ldr	r0, [pc, #120]	; (80012e0 <MX_ADC1_Init+0xfc>)
 8001268:	f000 ff0a 	bl	8002080 <HAL_ADC_Init>
 800126c:	4603      	mov	r3, r0
 800126e:	2b00      	cmp	r3, #0
 8001270:	d001      	beq.n	8001276 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8001272:	f000 f9bb 	bl	80015ec <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001276:	2300      	movs	r3, #0
 8001278:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800127a:	f107 031c 	add.w	r3, r7, #28
 800127e:	4619      	mov	r1, r3
 8001280:	4817      	ldr	r0, [pc, #92]	; (80012e0 <MX_ADC1_Init+0xfc>)
 8001282:	f001 fe8b 	bl	8002f9c <HAL_ADCEx_MultiModeConfigChannel>
 8001286:	4603      	mov	r3, r0
 8001288:	2b00      	cmp	r3, #0
 800128a:	d001      	beq.n	8001290 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 800128c:	f000 f9ae 	bl	80015ec <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001290:	4b15      	ldr	r3, [pc, #84]	; (80012e8 <MX_ADC1_Init+0x104>)
 8001292:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001294:	2306      	movs	r3, #6
 8001296:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001298:	2300      	movs	r3, #0
 800129a:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800129c:	237f      	movs	r3, #127	; 0x7f
 800129e:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80012a0:	2304      	movs	r3, #4
 80012a2:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80012a4:	2300      	movs	r3, #0
 80012a6:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012a8:	1d3b      	adds	r3, r7, #4
 80012aa:	4619      	mov	r1, r3
 80012ac:	480c      	ldr	r0, [pc, #48]	; (80012e0 <MX_ADC1_Init+0xfc>)
 80012ae:	f001 f9d7 	bl	8002660 <HAL_ADC_ConfigChannel>
 80012b2:	4603      	mov	r3, r0
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d001      	beq.n	80012bc <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 80012b8:	f000 f998 	bl	80015ec <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80012bc:	4b0b      	ldr	r3, [pc, #44]	; (80012ec <MX_ADC1_Init+0x108>)
 80012be:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80012c0:	230c      	movs	r3, #12
 80012c2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012c4:	1d3b      	adds	r3, r7, #4
 80012c6:	4619      	mov	r1, r3
 80012c8:	4805      	ldr	r0, [pc, #20]	; (80012e0 <MX_ADC1_Init+0xfc>)
 80012ca:	f001 f9c9 	bl	8002660 <HAL_ADC_ConfigChannel>
 80012ce:	4603      	mov	r3, r0
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d001      	beq.n	80012d8 <MX_ADC1_Init+0xf4>
  {
    Error_Handler();
 80012d4:	f000 f98a 	bl	80015ec <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80012d8:	bf00      	nop
 80012da:	3728      	adds	r7, #40	; 0x28
 80012dc:	46bd      	mov	sp, r7
 80012de:	bd80      	pop	{r7, pc}
 80012e0:	200001f0 	.word	0x200001f0
 80012e4:	50040000 	.word	0x50040000
 80012e8:	04300002 	.word	0x04300002
 80012ec:	08600004 	.word	0x08600004

080012f0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b09a      	sub	sp, #104	; 0x68
 80012f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012f6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80012fa:	2200      	movs	r2, #0
 80012fc:	601a      	str	r2, [r3, #0]
 80012fe:	605a      	str	r2, [r3, #4]
 8001300:	609a      	str	r2, [r3, #8]
 8001302:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001304:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001308:	2200      	movs	r2, #0
 800130a:	601a      	str	r2, [r3, #0]
 800130c:	605a      	str	r2, [r3, #4]
 800130e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001310:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001314:	2200      	movs	r2, #0
 8001316:	601a      	str	r2, [r3, #0]
 8001318:	605a      	str	r2, [r3, #4]
 800131a:	609a      	str	r2, [r3, #8]
 800131c:	60da      	str	r2, [r3, #12]
 800131e:	611a      	str	r2, [r3, #16]
 8001320:	615a      	str	r2, [r3, #20]
 8001322:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001324:	1d3b      	adds	r3, r7, #4
 8001326:	222c      	movs	r2, #44	; 0x2c
 8001328:	2100      	movs	r1, #0
 800132a:	4618      	mov	r0, r3
 800132c:	f007 fbc1 	bl	8008ab2 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001330:	4b44      	ldr	r3, [pc, #272]	; (8001444 <MX_TIM1_Init+0x154>)
 8001332:	4a45      	ldr	r2, [pc, #276]	; (8001448 <MX_TIM1_Init+0x158>)
 8001334:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 800-1;
 8001336:	4b43      	ldr	r3, [pc, #268]	; (8001444 <MX_TIM1_Init+0x154>)
 8001338:	f240 321f 	movw	r2, #799	; 0x31f
 800133c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800133e:	4b41      	ldr	r3, [pc, #260]	; (8001444 <MX_TIM1_Init+0x154>)
 8001340:	2200      	movs	r2, #0
 8001342:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001344:	4b3f      	ldr	r3, [pc, #252]	; (8001444 <MX_TIM1_Init+0x154>)
 8001346:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800134a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800134c:	4b3d      	ldr	r3, [pc, #244]	; (8001444 <MX_TIM1_Init+0x154>)
 800134e:	2200      	movs	r2, #0
 8001350:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001352:	4b3c      	ldr	r3, [pc, #240]	; (8001444 <MX_TIM1_Init+0x154>)
 8001354:	2200      	movs	r2, #0
 8001356:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001358:	4b3a      	ldr	r3, [pc, #232]	; (8001444 <MX_TIM1_Init+0x154>)
 800135a:	2200      	movs	r2, #0
 800135c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800135e:	4839      	ldr	r0, [pc, #228]	; (8001444 <MX_TIM1_Init+0x154>)
 8001360:	f003 ff36 	bl	80051d0 <HAL_TIM_Base_Init>
 8001364:	4603      	mov	r3, r0
 8001366:	2b00      	cmp	r3, #0
 8001368:	d001      	beq.n	800136e <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 800136a:	f000 f93f 	bl	80015ec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800136e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001372:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001374:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001378:	4619      	mov	r1, r3
 800137a:	4832      	ldr	r0, [pc, #200]	; (8001444 <MX_TIM1_Init+0x154>)
 800137c:	f004 fb6e 	bl	8005a5c <HAL_TIM_ConfigClockSource>
 8001380:	4603      	mov	r3, r0
 8001382:	2b00      	cmp	r3, #0
 8001384:	d001      	beq.n	800138a <MX_TIM1_Init+0x9a>
  {
    Error_Handler();
 8001386:	f000 f931 	bl	80015ec <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800138a:	482e      	ldr	r0, [pc, #184]	; (8001444 <MX_TIM1_Init+0x154>)
 800138c:	f003 ffe8 	bl	8005360 <HAL_TIM_PWM_Init>
 8001390:	4603      	mov	r3, r0
 8001392:	2b00      	cmp	r3, #0
 8001394:	d001      	beq.n	800139a <MX_TIM1_Init+0xaa>
  {
    Error_Handler();
 8001396:	f000 f929 	bl	80015ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800139a:	2300      	movs	r3, #0
 800139c:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800139e:	2300      	movs	r3, #0
 80013a0:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013a2:	2300      	movs	r3, #0
 80013a4:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80013a6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80013aa:	4619      	mov	r1, r3
 80013ac:	4825      	ldr	r0, [pc, #148]	; (8001444 <MX_TIM1_Init+0x154>)
 80013ae:	f005 f877 	bl	80064a0 <HAL_TIMEx_MasterConfigSynchronization>
 80013b2:	4603      	mov	r3, r0
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d001      	beq.n	80013bc <MX_TIM1_Init+0xcc>
  {
    Error_Handler();
 80013b8:	f000 f918 	bl	80015ec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80013bc:	2360      	movs	r3, #96	; 0x60
 80013be:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 80013c0:	2300      	movs	r3, #0
 80013c2:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80013c4:	2300      	movs	r3, #0
 80013c6:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80013c8:	2300      	movs	r3, #0
 80013ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80013cc:	2300      	movs	r3, #0
 80013ce:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80013d0:	2300      	movs	r3, #0
 80013d2:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80013d4:	2300      	movs	r3, #0
 80013d6:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80013d8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80013dc:	2200      	movs	r2, #0
 80013de:	4619      	mov	r1, r3
 80013e0:	4818      	ldr	r0, [pc, #96]	; (8001444 <MX_TIM1_Init+0x154>)
 80013e2:	f004 fa27 	bl	8005834 <HAL_TIM_PWM_ConfigChannel>
 80013e6:	4603      	mov	r3, r0
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d001      	beq.n	80013f0 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 80013ec:	f000 f8fe 	bl	80015ec <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80013f0:	2300      	movs	r3, #0
 80013f2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80013f4:	2300      	movs	r3, #0
 80013f6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80013f8:	2300      	movs	r3, #0
 80013fa:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80013fc:	2300      	movs	r3, #0
 80013fe:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001400:	2300      	movs	r3, #0
 8001402:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001404:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001408:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800140a:	2300      	movs	r3, #0
 800140c:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800140e:	2300      	movs	r3, #0
 8001410:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001412:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001416:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001418:	2300      	movs	r3, #0
 800141a:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800141c:	2300      	movs	r3, #0
 800141e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001420:	1d3b      	adds	r3, r7, #4
 8001422:	4619      	mov	r1, r3
 8001424:	4807      	ldr	r0, [pc, #28]	; (8001444 <MX_TIM1_Init+0x154>)
 8001426:	f005 f8c3 	bl	80065b0 <HAL_TIMEx_ConfigBreakDeadTime>
 800142a:	4603      	mov	r3, r0
 800142c:	2b00      	cmp	r3, #0
 800142e:	d001      	beq.n	8001434 <MX_TIM1_Init+0x144>
  {
    Error_Handler();
 8001430:	f000 f8dc 	bl	80015ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001434:	4803      	ldr	r0, [pc, #12]	; (8001444 <MX_TIM1_Init+0x154>)
 8001436:	f000 f9a7 	bl	8001788 <HAL_TIM_MspPostInit>

}
 800143a:	bf00      	nop
 800143c:	3768      	adds	r7, #104	; 0x68
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}
 8001442:	bf00      	nop
 8001444:	20000254 	.word	0x20000254
 8001448:	40012c00 	.word	0x40012c00

0800144c <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b084      	sub	sp, #16
 8001450:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001452:	1d3b      	adds	r3, r7, #4
 8001454:	2200      	movs	r2, #0
 8001456:	601a      	str	r2, [r3, #0]
 8001458:	605a      	str	r2, [r3, #4]
 800145a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 800145c:	4b15      	ldr	r3, [pc, #84]	; (80014b4 <MX_TIM7_Init+0x68>)
 800145e:	4a16      	ldr	r2, [pc, #88]	; (80014b8 <MX_TIM7_Init+0x6c>)
 8001460:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 8000-1;
 8001462:	4b14      	ldr	r3, [pc, #80]	; (80014b4 <MX_TIM7_Init+0x68>)
 8001464:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8001468:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800146a:	4b12      	ldr	r3, [pc, #72]	; (80014b4 <MX_TIM7_Init+0x68>)
 800146c:	2200      	movs	r2, #0
 800146e:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 10000-1;
 8001470:	4b10      	ldr	r3, [pc, #64]	; (80014b4 <MX_TIM7_Init+0x68>)
 8001472:	f242 720f 	movw	r2, #9999	; 0x270f
 8001476:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001478:	4b0e      	ldr	r3, [pc, #56]	; (80014b4 <MX_TIM7_Init+0x68>)
 800147a:	2200      	movs	r2, #0
 800147c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800147e:	480d      	ldr	r0, [pc, #52]	; (80014b4 <MX_TIM7_Init+0x68>)
 8001480:	f003 fea6 	bl	80051d0 <HAL_TIM_Base_Init>
 8001484:	4603      	mov	r3, r0
 8001486:	2b00      	cmp	r3, #0
 8001488:	d001      	beq.n	800148e <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 800148a:	f000 f8af 	bl	80015ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800148e:	2300      	movs	r3, #0
 8001490:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001492:	2300      	movs	r3, #0
 8001494:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001496:	1d3b      	adds	r3, r7, #4
 8001498:	4619      	mov	r1, r3
 800149a:	4806      	ldr	r0, [pc, #24]	; (80014b4 <MX_TIM7_Init+0x68>)
 800149c:	f005 f800 	bl	80064a0 <HAL_TIMEx_MasterConfigSynchronization>
 80014a0:	4603      	mov	r3, r0
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d001      	beq.n	80014aa <MX_TIM7_Init+0x5e>
  {
    Error_Handler();
 80014a6:	f000 f8a1 	bl	80015ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80014aa:	bf00      	nop
 80014ac:	3710      	adds	r7, #16
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}
 80014b2:	bf00      	nop
 80014b4:	200002a0 	.word	0x200002a0
 80014b8:	40001400 	.word	0x40001400

080014bc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80014c0:	4b14      	ldr	r3, [pc, #80]	; (8001514 <MX_USART2_UART_Init+0x58>)
 80014c2:	4a15      	ldr	r2, [pc, #84]	; (8001518 <MX_USART2_UART_Init+0x5c>)
 80014c4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 921600;
 80014c6:	4b13      	ldr	r3, [pc, #76]	; (8001514 <MX_USART2_UART_Init+0x58>)
 80014c8:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 80014cc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80014ce:	4b11      	ldr	r3, [pc, #68]	; (8001514 <MX_USART2_UART_Init+0x58>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80014d4:	4b0f      	ldr	r3, [pc, #60]	; (8001514 <MX_USART2_UART_Init+0x58>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80014da:	4b0e      	ldr	r3, [pc, #56]	; (8001514 <MX_USART2_UART_Init+0x58>)
 80014dc:	2200      	movs	r2, #0
 80014de:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80014e0:	4b0c      	ldr	r3, [pc, #48]	; (8001514 <MX_USART2_UART_Init+0x58>)
 80014e2:	220c      	movs	r2, #12
 80014e4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014e6:	4b0b      	ldr	r3, [pc, #44]	; (8001514 <MX_USART2_UART_Init+0x58>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80014ec:	4b09      	ldr	r3, [pc, #36]	; (8001514 <MX_USART2_UART_Init+0x58>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80014f2:	4b08      	ldr	r3, [pc, #32]	; (8001514 <MX_USART2_UART_Init+0x58>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80014f8:	4b06      	ldr	r3, [pc, #24]	; (8001514 <MX_USART2_UART_Init+0x58>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80014fe:	4805      	ldr	r0, [pc, #20]	; (8001514 <MX_USART2_UART_Init+0x58>)
 8001500:	f005 f8f2 	bl	80066e8 <HAL_UART_Init>
 8001504:	4603      	mov	r3, r0
 8001506:	2b00      	cmp	r3, #0
 8001508:	d001      	beq.n	800150e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800150a:	f000 f86f 	bl	80015ec <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800150e:	bf00      	nop
 8001510:	bd80      	pop	{r7, pc}
 8001512:	bf00      	nop
 8001514:	200002ec 	.word	0x200002ec
 8001518:	40004400 	.word	0x40004400

0800151c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b082      	sub	sp, #8
 8001520:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001522:	4b0c      	ldr	r3, [pc, #48]	; (8001554 <MX_DMA_Init+0x38>)
 8001524:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001526:	4a0b      	ldr	r2, [pc, #44]	; (8001554 <MX_DMA_Init+0x38>)
 8001528:	f043 0301 	orr.w	r3, r3, #1
 800152c:	6493      	str	r3, [r2, #72]	; 0x48
 800152e:	4b09      	ldr	r3, [pc, #36]	; (8001554 <MX_DMA_Init+0x38>)
 8001530:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001532:	f003 0301 	and.w	r3, r3, #1
 8001536:	607b      	str	r3, [r7, #4]
 8001538:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 800153a:	2200      	movs	r2, #0
 800153c:	2100      	movs	r1, #0
 800153e:	2011      	movs	r0, #17
 8001540:	f001 feb7 	bl	80032b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8001544:	2011      	movs	r0, #17
 8001546:	f001 fed0 	bl	80032ea <HAL_NVIC_EnableIRQ>

}
 800154a:	bf00      	nop
 800154c:	3708      	adds	r7, #8
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}
 8001552:	bf00      	nop
 8001554:	40021000 	.word	0x40021000

08001558 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b088      	sub	sp, #32
 800155c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800155e:	f107 030c 	add.w	r3, r7, #12
 8001562:	2200      	movs	r2, #0
 8001564:	601a      	str	r2, [r3, #0]
 8001566:	605a      	str	r2, [r3, #4]
 8001568:	609a      	str	r2, [r3, #8]
 800156a:	60da      	str	r2, [r3, #12]
 800156c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800156e:	4b1e      	ldr	r3, [pc, #120]	; (80015e8 <MX_GPIO_Init+0x90>)
 8001570:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001572:	4a1d      	ldr	r2, [pc, #116]	; (80015e8 <MX_GPIO_Init+0x90>)
 8001574:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001578:	64d3      	str	r3, [r2, #76]	; 0x4c
 800157a:	4b1b      	ldr	r3, [pc, #108]	; (80015e8 <MX_GPIO_Init+0x90>)
 800157c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800157e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001582:	60bb      	str	r3, [r7, #8]
 8001584:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001586:	4b18      	ldr	r3, [pc, #96]	; (80015e8 <MX_GPIO_Init+0x90>)
 8001588:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800158a:	4a17      	ldr	r2, [pc, #92]	; (80015e8 <MX_GPIO_Init+0x90>)
 800158c:	f043 0304 	orr.w	r3, r3, #4
 8001590:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001592:	4b15      	ldr	r3, [pc, #84]	; (80015e8 <MX_GPIO_Init+0x90>)
 8001594:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001596:	f003 0304 	and.w	r3, r3, #4
 800159a:	607b      	str	r3, [r7, #4]
 800159c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800159e:	4b12      	ldr	r3, [pc, #72]	; (80015e8 <MX_GPIO_Init+0x90>)
 80015a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015a2:	4a11      	ldr	r2, [pc, #68]	; (80015e8 <MX_GPIO_Init+0x90>)
 80015a4:	f043 0301 	orr.w	r3, r3, #1
 80015a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015aa:	4b0f      	ldr	r3, [pc, #60]	; (80015e8 <MX_GPIO_Init+0x90>)
 80015ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015ae:	f003 0301 	and.w	r3, r3, #1
 80015b2:	603b      	str	r3, [r7, #0]
 80015b4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 80015b6:	2200      	movs	r2, #0
 80015b8:	2101      	movs	r1, #1
 80015ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015be:	f002 facf 	bl	8003b60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80015c2:	2301      	movs	r3, #1
 80015c4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015c6:	2301      	movs	r3, #1
 80015c8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ca:	2300      	movs	r3, #0
 80015cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ce:	2300      	movs	r3, #0
 80015d0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015d2:	f107 030c 	add.w	r3, r7, #12
 80015d6:	4619      	mov	r1, r3
 80015d8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015dc:	f002 f916 	bl	800380c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80015e0:	bf00      	nop
 80015e2:	3720      	adds	r7, #32
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bd80      	pop	{r7, pc}
 80015e8:	40021000 	.word	0x40021000

080015ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015ec:	b480      	push	{r7}
 80015ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015f0:	b672      	cpsid	i
}
 80015f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015f4:	e7fe      	b.n	80015f4 <Error_Handler+0x8>
	...

080015f8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015f8:	b480      	push	{r7}
 80015fa:	b083      	sub	sp, #12
 80015fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015fe:	4b0f      	ldr	r3, [pc, #60]	; (800163c <HAL_MspInit+0x44>)
 8001600:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001602:	4a0e      	ldr	r2, [pc, #56]	; (800163c <HAL_MspInit+0x44>)
 8001604:	f043 0301 	orr.w	r3, r3, #1
 8001608:	6613      	str	r3, [r2, #96]	; 0x60
 800160a:	4b0c      	ldr	r3, [pc, #48]	; (800163c <HAL_MspInit+0x44>)
 800160c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800160e:	f003 0301 	and.w	r3, r3, #1
 8001612:	607b      	str	r3, [r7, #4]
 8001614:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001616:	4b09      	ldr	r3, [pc, #36]	; (800163c <HAL_MspInit+0x44>)
 8001618:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800161a:	4a08      	ldr	r2, [pc, #32]	; (800163c <HAL_MspInit+0x44>)
 800161c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001620:	6593      	str	r3, [r2, #88]	; 0x58
 8001622:	4b06      	ldr	r3, [pc, #24]	; (800163c <HAL_MspInit+0x44>)
 8001624:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001626:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800162a:	603b      	str	r3, [r7, #0]
 800162c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800162e:	bf00      	nop
 8001630:	370c      	adds	r7, #12
 8001632:	46bd      	mov	sp, r7
 8001634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001638:	4770      	bx	lr
 800163a:	bf00      	nop
 800163c:	40021000 	.word	0x40021000

08001640 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b0ac      	sub	sp, #176	; 0xb0
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001648:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800164c:	2200      	movs	r2, #0
 800164e:	601a      	str	r2, [r3, #0]
 8001650:	605a      	str	r2, [r3, #4]
 8001652:	609a      	str	r2, [r3, #8]
 8001654:	60da      	str	r2, [r3, #12]
 8001656:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001658:	f107 0314 	add.w	r3, r7, #20
 800165c:	2288      	movs	r2, #136	; 0x88
 800165e:	2100      	movs	r1, #0
 8001660:	4618      	mov	r0, r3
 8001662:	f007 fa26 	bl	8008ab2 <memset>
  if(hadc->Instance==ADC1)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	4a27      	ldr	r2, [pc, #156]	; (8001708 <HAL_ADC_MspInit+0xc8>)
 800166c:	4293      	cmp	r3, r2
 800166e:	d146      	bne.n	80016fe <HAL_ADC_MspInit+0xbe>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001670:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001674:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8001676:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800167a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 800167e:	2302      	movs	r3, #2
 8001680:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001682:	2301      	movs	r3, #1
 8001684:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8001686:	2308      	movs	r3, #8
 8001688:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 800168a:	2307      	movs	r3, #7
 800168c:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800168e:	2302      	movs	r3, #2
 8001690:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001692:	2302      	movs	r3, #2
 8001694:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8001696:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800169a:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800169c:	f107 0314 	add.w	r3, r7, #20
 80016a0:	4618      	mov	r0, r3
 80016a2:	f003 f8d9 	bl	8004858 <HAL_RCCEx_PeriphCLKConfig>
 80016a6:	4603      	mov	r3, r0
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d001      	beq.n	80016b0 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 80016ac:	f7ff ff9e 	bl	80015ec <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80016b0:	4b16      	ldr	r3, [pc, #88]	; (800170c <HAL_ADC_MspInit+0xcc>)
 80016b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016b4:	4a15      	ldr	r2, [pc, #84]	; (800170c <HAL_ADC_MspInit+0xcc>)
 80016b6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80016ba:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016bc:	4b13      	ldr	r3, [pc, #76]	; (800170c <HAL_ADC_MspInit+0xcc>)
 80016be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016c0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80016c4:	613b      	str	r3, [r7, #16]
 80016c6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80016c8:	4b10      	ldr	r3, [pc, #64]	; (800170c <HAL_ADC_MspInit+0xcc>)
 80016ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016cc:	4a0f      	ldr	r2, [pc, #60]	; (800170c <HAL_ADC_MspInit+0xcc>)
 80016ce:	f043 0304 	orr.w	r3, r3, #4
 80016d2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016d4:	4b0d      	ldr	r3, [pc, #52]	; (800170c <HAL_ADC_MspInit+0xcc>)
 80016d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016d8:	f003 0304 	and.w	r3, r3, #4
 80016dc:	60fb      	str	r3, [r7, #12]
 80016de:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN1
    PC1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80016e0:	2303      	movs	r3, #3
 80016e2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80016e6:	230b      	movs	r3, #11
 80016e8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ec:	2300      	movs	r3, #0
 80016ee:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016f2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80016f6:	4619      	mov	r1, r3
 80016f8:	4805      	ldr	r0, [pc, #20]	; (8001710 <HAL_ADC_MspInit+0xd0>)
 80016fa:	f002 f887 	bl	800380c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80016fe:	bf00      	nop
 8001700:	37b0      	adds	r7, #176	; 0xb0
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}
 8001706:	bf00      	nop
 8001708:	50040000 	.word	0x50040000
 800170c:	40021000 	.word	0x40021000
 8001710:	48000800 	.word	0x48000800

08001714 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b084      	sub	sp, #16
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	4a16      	ldr	r2, [pc, #88]	; (800177c <HAL_TIM_Base_MspInit+0x68>)
 8001722:	4293      	cmp	r3, r2
 8001724:	d10c      	bne.n	8001740 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001726:	4b16      	ldr	r3, [pc, #88]	; (8001780 <HAL_TIM_Base_MspInit+0x6c>)
 8001728:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800172a:	4a15      	ldr	r2, [pc, #84]	; (8001780 <HAL_TIM_Base_MspInit+0x6c>)
 800172c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001730:	6613      	str	r3, [r2, #96]	; 0x60
 8001732:	4b13      	ldr	r3, [pc, #76]	; (8001780 <HAL_TIM_Base_MspInit+0x6c>)
 8001734:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001736:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800173a:	60fb      	str	r3, [r7, #12]
 800173c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 800173e:	e018      	b.n	8001772 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM7)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	4a0f      	ldr	r2, [pc, #60]	; (8001784 <HAL_TIM_Base_MspInit+0x70>)
 8001746:	4293      	cmp	r3, r2
 8001748:	d113      	bne.n	8001772 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 800174a:	4b0d      	ldr	r3, [pc, #52]	; (8001780 <HAL_TIM_Base_MspInit+0x6c>)
 800174c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800174e:	4a0c      	ldr	r2, [pc, #48]	; (8001780 <HAL_TIM_Base_MspInit+0x6c>)
 8001750:	f043 0320 	orr.w	r3, r3, #32
 8001754:	6593      	str	r3, [r2, #88]	; 0x58
 8001756:	4b0a      	ldr	r3, [pc, #40]	; (8001780 <HAL_TIM_Base_MspInit+0x6c>)
 8001758:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800175a:	f003 0320 	and.w	r3, r3, #32
 800175e:	60bb      	str	r3, [r7, #8]
 8001760:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8001762:	2200      	movs	r2, #0
 8001764:	2100      	movs	r1, #0
 8001766:	2037      	movs	r0, #55	; 0x37
 8001768:	f001 fda3 	bl	80032b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 800176c:	2037      	movs	r0, #55	; 0x37
 800176e:	f001 fdbc 	bl	80032ea <HAL_NVIC_EnableIRQ>
}
 8001772:	bf00      	nop
 8001774:	3710      	adds	r7, #16
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}
 800177a:	bf00      	nop
 800177c:	40012c00 	.word	0x40012c00
 8001780:	40021000 	.word	0x40021000
 8001784:	40001400 	.word	0x40001400

08001788 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b088      	sub	sp, #32
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001790:	f107 030c 	add.w	r3, r7, #12
 8001794:	2200      	movs	r2, #0
 8001796:	601a      	str	r2, [r3, #0]
 8001798:	605a      	str	r2, [r3, #4]
 800179a:	609a      	str	r2, [r3, #8]
 800179c:	60da      	str	r2, [r3, #12]
 800179e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	4a12      	ldr	r2, [pc, #72]	; (80017f0 <HAL_TIM_MspPostInit+0x68>)
 80017a6:	4293      	cmp	r3, r2
 80017a8:	d11d      	bne.n	80017e6 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017aa:	4b12      	ldr	r3, [pc, #72]	; (80017f4 <HAL_TIM_MspPostInit+0x6c>)
 80017ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017ae:	4a11      	ldr	r2, [pc, #68]	; (80017f4 <HAL_TIM_MspPostInit+0x6c>)
 80017b0:	f043 0301 	orr.w	r3, r3, #1
 80017b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017b6:	4b0f      	ldr	r3, [pc, #60]	; (80017f4 <HAL_TIM_MspPostInit+0x6c>)
 80017b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017ba:	f003 0301 	and.w	r3, r3, #1
 80017be:	60bb      	str	r3, [r7, #8]
 80017c0:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80017c2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80017c6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017c8:	2302      	movs	r3, #2
 80017ca:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017cc:	2300      	movs	r3, #0
 80017ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017d0:	2300      	movs	r3, #0
 80017d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80017d4:	2301      	movs	r3, #1
 80017d6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017d8:	f107 030c 	add.w	r3, r7, #12
 80017dc:	4619      	mov	r1, r3
 80017de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017e2:	f002 f813 	bl	800380c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80017e6:	bf00      	nop
 80017e8:	3720      	adds	r7, #32
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bd80      	pop	{r7, pc}
 80017ee:	bf00      	nop
 80017f0:	40012c00 	.word	0x40012c00
 80017f4:	40021000 	.word	0x40021000

080017f8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b0ac      	sub	sp, #176	; 0xb0
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001800:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001804:	2200      	movs	r2, #0
 8001806:	601a      	str	r2, [r3, #0]
 8001808:	605a      	str	r2, [r3, #4]
 800180a:	609a      	str	r2, [r3, #8]
 800180c:	60da      	str	r2, [r3, #12]
 800180e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001810:	f107 0314 	add.w	r3, r7, #20
 8001814:	2288      	movs	r2, #136	; 0x88
 8001816:	2100      	movs	r1, #0
 8001818:	4618      	mov	r0, r3
 800181a:	f007 f94a 	bl	8008ab2 <memset>
  if(huart->Instance==USART2)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	4a3a      	ldr	r2, [pc, #232]	; (800190c <HAL_UART_MspInit+0x114>)
 8001824:	4293      	cmp	r3, r2
 8001826:	d16c      	bne.n	8001902 <HAL_UART_MspInit+0x10a>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001828:	2302      	movs	r3, #2
 800182a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800182c:	2300      	movs	r3, #0
 800182e:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001830:	f107 0314 	add.w	r3, r7, #20
 8001834:	4618      	mov	r0, r3
 8001836:	f003 f80f 	bl	8004858 <HAL_RCCEx_PeriphCLKConfig>
 800183a:	4603      	mov	r3, r0
 800183c:	2b00      	cmp	r3, #0
 800183e:	d001      	beq.n	8001844 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001840:	f7ff fed4 	bl	80015ec <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001844:	4b32      	ldr	r3, [pc, #200]	; (8001910 <HAL_UART_MspInit+0x118>)
 8001846:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001848:	4a31      	ldr	r2, [pc, #196]	; (8001910 <HAL_UART_MspInit+0x118>)
 800184a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800184e:	6593      	str	r3, [r2, #88]	; 0x58
 8001850:	4b2f      	ldr	r3, [pc, #188]	; (8001910 <HAL_UART_MspInit+0x118>)
 8001852:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001854:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001858:	613b      	str	r3, [r7, #16]
 800185a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800185c:	4b2c      	ldr	r3, [pc, #176]	; (8001910 <HAL_UART_MspInit+0x118>)
 800185e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001860:	4a2b      	ldr	r2, [pc, #172]	; (8001910 <HAL_UART_MspInit+0x118>)
 8001862:	f043 0301 	orr.w	r3, r3, #1
 8001866:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001868:	4b29      	ldr	r3, [pc, #164]	; (8001910 <HAL_UART_MspInit+0x118>)
 800186a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800186c:	f003 0301 	and.w	r3, r3, #1
 8001870:	60fb      	str	r3, [r7, #12]
 8001872:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001874:	230c      	movs	r3, #12
 8001876:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800187a:	2302      	movs	r3, #2
 800187c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001880:	2300      	movs	r3, #0
 8001882:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001886:	2303      	movs	r3, #3
 8001888:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800188c:	2307      	movs	r3, #7
 800188e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001892:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001896:	4619      	mov	r1, r3
 8001898:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800189c:	f001 ffb6 	bl	800380c <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel7;
 80018a0:	4b1c      	ldr	r3, [pc, #112]	; (8001914 <HAL_UART_MspInit+0x11c>)
 80018a2:	4a1d      	ldr	r2, [pc, #116]	; (8001918 <HAL_UART_MspInit+0x120>)
 80018a4:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_2;
 80018a6:	4b1b      	ldr	r3, [pc, #108]	; (8001914 <HAL_UART_MspInit+0x11c>)
 80018a8:	2202      	movs	r2, #2
 80018aa:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80018ac:	4b19      	ldr	r3, [pc, #100]	; (8001914 <HAL_UART_MspInit+0x11c>)
 80018ae:	2210      	movs	r2, #16
 80018b0:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80018b2:	4b18      	ldr	r3, [pc, #96]	; (8001914 <HAL_UART_MspInit+0x11c>)
 80018b4:	2200      	movs	r2, #0
 80018b6:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80018b8:	4b16      	ldr	r3, [pc, #88]	; (8001914 <HAL_UART_MspInit+0x11c>)
 80018ba:	2280      	movs	r2, #128	; 0x80
 80018bc:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80018be:	4b15      	ldr	r3, [pc, #84]	; (8001914 <HAL_UART_MspInit+0x11c>)
 80018c0:	2200      	movs	r2, #0
 80018c2:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80018c4:	4b13      	ldr	r3, [pc, #76]	; (8001914 <HAL_UART_MspInit+0x11c>)
 80018c6:	2200      	movs	r2, #0
 80018c8:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80018ca:	4b12      	ldr	r3, [pc, #72]	; (8001914 <HAL_UART_MspInit+0x11c>)
 80018cc:	2200      	movs	r2, #0
 80018ce:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80018d0:	4b10      	ldr	r3, [pc, #64]	; (8001914 <HAL_UART_MspInit+0x11c>)
 80018d2:	2200      	movs	r2, #0
 80018d4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80018d6:	480f      	ldr	r0, [pc, #60]	; (8001914 <HAL_UART_MspInit+0x11c>)
 80018d8:	f001 fd22 	bl	8003320 <HAL_DMA_Init>
 80018dc:	4603      	mov	r3, r0
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d001      	beq.n	80018e6 <HAL_UART_MspInit+0xee>
    {
      Error_Handler();
 80018e2:	f7ff fe83 	bl	80015ec <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	4a0a      	ldr	r2, [pc, #40]	; (8001914 <HAL_UART_MspInit+0x11c>)
 80018ea:	671a      	str	r2, [r3, #112]	; 0x70
 80018ec:	4a09      	ldr	r2, [pc, #36]	; (8001914 <HAL_UART_MspInit+0x11c>)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80018f2:	2200      	movs	r2, #0
 80018f4:	2100      	movs	r1, #0
 80018f6:	2026      	movs	r0, #38	; 0x26
 80018f8:	f001 fcdb 	bl	80032b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80018fc:	2026      	movs	r0, #38	; 0x26
 80018fe:	f001 fcf4 	bl	80032ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001902:	bf00      	nop
 8001904:	37b0      	adds	r7, #176	; 0xb0
 8001906:	46bd      	mov	sp, r7
 8001908:	bd80      	pop	{r7, pc}
 800190a:	bf00      	nop
 800190c:	40004400 	.word	0x40004400
 8001910:	40021000 	.word	0x40021000
 8001914:	20000374 	.word	0x20000374
 8001918:	40020080 	.word	0x40020080

0800191c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800191c:	b480      	push	{r7}
 800191e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001920:	e7fe      	b.n	8001920 <NMI_Handler+0x4>

08001922 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001922:	b480      	push	{r7}
 8001924:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001926:	e7fe      	b.n	8001926 <HardFault_Handler+0x4>

08001928 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001928:	b480      	push	{r7}
 800192a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800192c:	e7fe      	b.n	800192c <MemManage_Handler+0x4>

0800192e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800192e:	b480      	push	{r7}
 8001930:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001932:	e7fe      	b.n	8001932 <BusFault_Handler+0x4>

08001934 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001934:	b480      	push	{r7}
 8001936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001938:	e7fe      	b.n	8001938 <UsageFault_Handler+0x4>

0800193a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800193a:	b480      	push	{r7}
 800193c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800193e:	bf00      	nop
 8001940:	46bd      	mov	sp, r7
 8001942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001946:	4770      	bx	lr

08001948 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001948:	b480      	push	{r7}
 800194a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800194c:	bf00      	nop
 800194e:	46bd      	mov	sp, r7
 8001950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001954:	4770      	bx	lr

08001956 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001956:	b480      	push	{r7}
 8001958:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800195a:	bf00      	nop
 800195c:	46bd      	mov	sp, r7
 800195e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001962:	4770      	bx	lr

08001964 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001968:	f000 f962 	bl	8001c30 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800196c:	bf00      	nop
 800196e:	bd80      	pop	{r7, pc}

08001970 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001974:	4802      	ldr	r0, [pc, #8]	; (8001980 <DMA1_Channel7_IRQHandler+0x10>)
 8001976:	f001 fe6a 	bl	800364e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 800197a:	bf00      	nop
 800197c:	bd80      	pop	{r7, pc}
 800197e:	bf00      	nop
 8001980:	20000374 	.word	0x20000374

08001984 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001988:	4802      	ldr	r0, [pc, #8]	; (8001994 <USART2_IRQHandler+0x10>)
 800198a:	f004 ffc3 	bl	8006914 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800198e:	bf00      	nop
 8001990:	bd80      	pop	{r7, pc}
 8001992:	bf00      	nop
 8001994:	200002ec 	.word	0x200002ec

08001998 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 800199c:	4802      	ldr	r0, [pc, #8]	; (80019a8 <TIM7_IRQHandler+0x10>)
 800199e:	f003 fe47 	bl	8005630 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80019a2:	bf00      	nop
 80019a4:	bd80      	pop	{r7, pc}
 80019a6:	bf00      	nop
 80019a8:	200002a0 	.word	0x200002a0

080019ac <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80019ac:	b480      	push	{r7}
 80019ae:	af00      	add	r7, sp, #0
  return 1;
 80019b0:	2301      	movs	r3, #1
}
 80019b2:	4618      	mov	r0, r3
 80019b4:	46bd      	mov	sp, r7
 80019b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ba:	4770      	bx	lr

080019bc <_kill>:

int _kill(int pid, int sig)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b082      	sub	sp, #8
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
 80019c4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80019c6:	f007 f8c7 	bl	8008b58 <__errno>
 80019ca:	4603      	mov	r3, r0
 80019cc:	2216      	movs	r2, #22
 80019ce:	601a      	str	r2, [r3, #0]
  return -1;
 80019d0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80019d4:	4618      	mov	r0, r3
 80019d6:	3708      	adds	r7, #8
 80019d8:	46bd      	mov	sp, r7
 80019da:	bd80      	pop	{r7, pc}

080019dc <_exit>:

void _exit (int status)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b082      	sub	sp, #8
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80019e4:	f04f 31ff 	mov.w	r1, #4294967295
 80019e8:	6878      	ldr	r0, [r7, #4]
 80019ea:	f7ff ffe7 	bl	80019bc <_kill>
  while (1) {}    /* Make sure we hang here */
 80019ee:	e7fe      	b.n	80019ee <_exit+0x12>

080019f0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b086      	sub	sp, #24
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	60f8      	str	r0, [r7, #12]
 80019f8:	60b9      	str	r1, [r7, #8]
 80019fa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019fc:	2300      	movs	r3, #0
 80019fe:	617b      	str	r3, [r7, #20]
 8001a00:	e00a      	b.n	8001a18 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001a02:	f3af 8000 	nop.w
 8001a06:	4601      	mov	r1, r0
 8001a08:	68bb      	ldr	r3, [r7, #8]
 8001a0a:	1c5a      	adds	r2, r3, #1
 8001a0c:	60ba      	str	r2, [r7, #8]
 8001a0e:	b2ca      	uxtb	r2, r1
 8001a10:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a12:	697b      	ldr	r3, [r7, #20]
 8001a14:	3301      	adds	r3, #1
 8001a16:	617b      	str	r3, [r7, #20]
 8001a18:	697a      	ldr	r2, [r7, #20]
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	429a      	cmp	r2, r3
 8001a1e:	dbf0      	blt.n	8001a02 <_read+0x12>
  }

  return len;
 8001a20:	687b      	ldr	r3, [r7, #4]
}
 8001a22:	4618      	mov	r0, r3
 8001a24:	3718      	adds	r7, #24
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bd80      	pop	{r7, pc}

08001a2a <_close>:
  }
  return len;
}

int _close(int file)
{
 8001a2a:	b480      	push	{r7}
 8001a2c:	b083      	sub	sp, #12
 8001a2e:	af00      	add	r7, sp, #0
 8001a30:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001a32:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a36:	4618      	mov	r0, r3
 8001a38:	370c      	adds	r7, #12
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a40:	4770      	bx	lr

08001a42 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001a42:	b480      	push	{r7}
 8001a44:	b083      	sub	sp, #12
 8001a46:	af00      	add	r7, sp, #0
 8001a48:	6078      	str	r0, [r7, #4]
 8001a4a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001a52:	605a      	str	r2, [r3, #4]
  return 0;
 8001a54:	2300      	movs	r3, #0
}
 8001a56:	4618      	mov	r0, r3
 8001a58:	370c      	adds	r7, #12
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a60:	4770      	bx	lr

08001a62 <_isatty>:

int _isatty(int file)
{
 8001a62:	b480      	push	{r7}
 8001a64:	b083      	sub	sp, #12
 8001a66:	af00      	add	r7, sp, #0
 8001a68:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001a6a:	2301      	movs	r3, #1
}
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	370c      	adds	r7, #12
 8001a70:	46bd      	mov	sp, r7
 8001a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a76:	4770      	bx	lr

08001a78 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	b085      	sub	sp, #20
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	60f8      	str	r0, [r7, #12]
 8001a80:	60b9      	str	r1, [r7, #8]
 8001a82:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001a84:	2300      	movs	r3, #0
}
 8001a86:	4618      	mov	r0, r3
 8001a88:	3714      	adds	r7, #20
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a90:	4770      	bx	lr
	...

08001a94 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b086      	sub	sp, #24
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a9c:	4a14      	ldr	r2, [pc, #80]	; (8001af0 <_sbrk+0x5c>)
 8001a9e:	4b15      	ldr	r3, [pc, #84]	; (8001af4 <_sbrk+0x60>)
 8001aa0:	1ad3      	subs	r3, r2, r3
 8001aa2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001aa4:	697b      	ldr	r3, [r7, #20]
 8001aa6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001aa8:	4b13      	ldr	r3, [pc, #76]	; (8001af8 <_sbrk+0x64>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d102      	bne.n	8001ab6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ab0:	4b11      	ldr	r3, [pc, #68]	; (8001af8 <_sbrk+0x64>)
 8001ab2:	4a12      	ldr	r2, [pc, #72]	; (8001afc <_sbrk+0x68>)
 8001ab4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ab6:	4b10      	ldr	r3, [pc, #64]	; (8001af8 <_sbrk+0x64>)
 8001ab8:	681a      	ldr	r2, [r3, #0]
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	4413      	add	r3, r2
 8001abe:	693a      	ldr	r2, [r7, #16]
 8001ac0:	429a      	cmp	r2, r3
 8001ac2:	d207      	bcs.n	8001ad4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ac4:	f007 f848 	bl	8008b58 <__errno>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	220c      	movs	r2, #12
 8001acc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001ace:	f04f 33ff 	mov.w	r3, #4294967295
 8001ad2:	e009      	b.n	8001ae8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ad4:	4b08      	ldr	r3, [pc, #32]	; (8001af8 <_sbrk+0x64>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001ada:	4b07      	ldr	r3, [pc, #28]	; (8001af8 <_sbrk+0x64>)
 8001adc:	681a      	ldr	r2, [r3, #0]
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	4413      	add	r3, r2
 8001ae2:	4a05      	ldr	r2, [pc, #20]	; (8001af8 <_sbrk+0x64>)
 8001ae4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ae6:	68fb      	ldr	r3, [r7, #12]
}
 8001ae8:	4618      	mov	r0, r3
 8001aea:	3718      	adds	r7, #24
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bd80      	pop	{r7, pc}
 8001af0:	20018000 	.word	0x20018000
 8001af4:	00000400 	.word	0x00000400
 8001af8:	200003c8 	.word	0x200003c8
 8001afc:	20000520 	.word	0x20000520

08001b00 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001b00:	b480      	push	{r7}
 8001b02:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001b04:	4b06      	ldr	r3, [pc, #24]	; (8001b20 <SystemInit+0x20>)
 8001b06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b0a:	4a05      	ldr	r2, [pc, #20]	; (8001b20 <SystemInit+0x20>)
 8001b0c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b10:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001b14:	bf00      	nop
 8001b16:	46bd      	mov	sp, r7
 8001b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1c:	4770      	bx	lr
 8001b1e:	bf00      	nop
 8001b20:	e000ed00 	.word	0xe000ed00

08001b24 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001b24:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b5c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001b28:	f7ff ffea 	bl	8001b00 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b2c:	480c      	ldr	r0, [pc, #48]	; (8001b60 <LoopForever+0x6>)
  ldr r1, =_edata
 8001b2e:	490d      	ldr	r1, [pc, #52]	; (8001b64 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001b30:	4a0d      	ldr	r2, [pc, #52]	; (8001b68 <LoopForever+0xe>)
  movs r3, #0
 8001b32:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b34:	e002      	b.n	8001b3c <LoopCopyDataInit>

08001b36 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b36:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b38:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b3a:	3304      	adds	r3, #4

08001b3c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b3c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b3e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b40:	d3f9      	bcc.n	8001b36 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b42:	4a0a      	ldr	r2, [pc, #40]	; (8001b6c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001b44:	4c0a      	ldr	r4, [pc, #40]	; (8001b70 <LoopForever+0x16>)
  movs r3, #0
 8001b46:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b48:	e001      	b.n	8001b4e <LoopFillZerobss>

08001b4a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b4a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b4c:	3204      	adds	r2, #4

08001b4e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b4e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b50:	d3fb      	bcc.n	8001b4a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001b52:	f007 f807 	bl	8008b64 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001b56:	f7ff fa51 	bl	8000ffc <main>

08001b5a <LoopForever>:

LoopForever:
    b LoopForever
 8001b5a:	e7fe      	b.n	8001b5a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001b5c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001b60:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b64:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001b68:	0800ad84 	.word	0x0800ad84
  ldr r2, =_sbss
 8001b6c:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001b70:	2000051c 	.word	0x2000051c

08001b74 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001b74:	e7fe      	b.n	8001b74 <ADC1_2_IRQHandler>
	...

08001b78 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b082      	sub	sp, #8
 8001b7c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b82:	4b0c      	ldr	r3, [pc, #48]	; (8001bb4 <HAL_Init+0x3c>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	4a0b      	ldr	r2, [pc, #44]	; (8001bb4 <HAL_Init+0x3c>)
 8001b88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b8c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b8e:	2003      	movs	r0, #3
 8001b90:	f001 fb84 	bl	800329c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001b94:	2000      	movs	r0, #0
 8001b96:	f000 f80f 	bl	8001bb8 <HAL_InitTick>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d002      	beq.n	8001ba6 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001ba0:	2301      	movs	r3, #1
 8001ba2:	71fb      	strb	r3, [r7, #7]
 8001ba4:	e001      	b.n	8001baa <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001ba6:	f7ff fd27 	bl	80015f8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001baa:	79fb      	ldrb	r3, [r7, #7]
}
 8001bac:	4618      	mov	r0, r3
 8001bae:	3708      	adds	r7, #8
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	bd80      	pop	{r7, pc}
 8001bb4:	40022000 	.word	0x40022000

08001bb8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b084      	sub	sp, #16
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001bc4:	4b17      	ldr	r3, [pc, #92]	; (8001c24 <HAL_InitTick+0x6c>)
 8001bc6:	781b      	ldrb	r3, [r3, #0]
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d023      	beq.n	8001c14 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001bcc:	4b16      	ldr	r3, [pc, #88]	; (8001c28 <HAL_InitTick+0x70>)
 8001bce:	681a      	ldr	r2, [r3, #0]
 8001bd0:	4b14      	ldr	r3, [pc, #80]	; (8001c24 <HAL_InitTick+0x6c>)
 8001bd2:	781b      	ldrb	r3, [r3, #0]
 8001bd4:	4619      	mov	r1, r3
 8001bd6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001bda:	fbb3 f3f1 	udiv	r3, r3, r1
 8001bde:	fbb2 f3f3 	udiv	r3, r2, r3
 8001be2:	4618      	mov	r0, r3
 8001be4:	f001 fb8f 	bl	8003306 <HAL_SYSTICK_Config>
 8001be8:	4603      	mov	r3, r0
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d10f      	bne.n	8001c0e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	2b0f      	cmp	r3, #15
 8001bf2:	d809      	bhi.n	8001c08 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	6879      	ldr	r1, [r7, #4]
 8001bf8:	f04f 30ff 	mov.w	r0, #4294967295
 8001bfc:	f001 fb59 	bl	80032b2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001c00:	4a0a      	ldr	r2, [pc, #40]	; (8001c2c <HAL_InitTick+0x74>)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	6013      	str	r3, [r2, #0]
 8001c06:	e007      	b.n	8001c18 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001c08:	2301      	movs	r3, #1
 8001c0a:	73fb      	strb	r3, [r7, #15]
 8001c0c:	e004      	b.n	8001c18 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001c0e:	2301      	movs	r3, #1
 8001c10:	73fb      	strb	r3, [r7, #15]
 8001c12:	e001      	b.n	8001c18 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001c14:	2301      	movs	r3, #1
 8001c16:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001c18:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	3710      	adds	r7, #16
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bd80      	pop	{r7, pc}
 8001c22:	bf00      	nop
 8001c24:	20000008 	.word	0x20000008
 8001c28:	20000000 	.word	0x20000000
 8001c2c:	20000004 	.word	0x20000004

08001c30 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c30:	b480      	push	{r7}
 8001c32:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001c34:	4b06      	ldr	r3, [pc, #24]	; (8001c50 <HAL_IncTick+0x20>)
 8001c36:	781b      	ldrb	r3, [r3, #0]
 8001c38:	461a      	mov	r2, r3
 8001c3a:	4b06      	ldr	r3, [pc, #24]	; (8001c54 <HAL_IncTick+0x24>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	4413      	add	r3, r2
 8001c40:	4a04      	ldr	r2, [pc, #16]	; (8001c54 <HAL_IncTick+0x24>)
 8001c42:	6013      	str	r3, [r2, #0]
}
 8001c44:	bf00      	nop
 8001c46:	46bd      	mov	sp, r7
 8001c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4c:	4770      	bx	lr
 8001c4e:	bf00      	nop
 8001c50:	20000008 	.word	0x20000008
 8001c54:	200003cc 	.word	0x200003cc

08001c58 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	af00      	add	r7, sp, #0
  return uwTick;
 8001c5c:	4b03      	ldr	r3, [pc, #12]	; (8001c6c <HAL_GetTick+0x14>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
}
 8001c60:	4618      	mov	r0, r3
 8001c62:	46bd      	mov	sp, r7
 8001c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c68:	4770      	bx	lr
 8001c6a:	bf00      	nop
 8001c6c:	200003cc 	.word	0x200003cc

08001c70 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b084      	sub	sp, #16
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c78:	f7ff ffee 	bl	8001c58 <HAL_GetTick>
 8001c7c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c88:	d005      	beq.n	8001c96 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001c8a:	4b0a      	ldr	r3, [pc, #40]	; (8001cb4 <HAL_Delay+0x44>)
 8001c8c:	781b      	ldrb	r3, [r3, #0]
 8001c8e:	461a      	mov	r2, r3
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	4413      	add	r3, r2
 8001c94:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001c96:	bf00      	nop
 8001c98:	f7ff ffde 	bl	8001c58 <HAL_GetTick>
 8001c9c:	4602      	mov	r2, r0
 8001c9e:	68bb      	ldr	r3, [r7, #8]
 8001ca0:	1ad3      	subs	r3, r2, r3
 8001ca2:	68fa      	ldr	r2, [r7, #12]
 8001ca4:	429a      	cmp	r2, r3
 8001ca6:	d8f7      	bhi.n	8001c98 <HAL_Delay+0x28>
  {
  }
}
 8001ca8:	bf00      	nop
 8001caa:	bf00      	nop
 8001cac:	3710      	adds	r7, #16
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bd80      	pop	{r7, pc}
 8001cb2:	bf00      	nop
 8001cb4:	20000008 	.word	0x20000008

08001cb8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	b083      	sub	sp, #12
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
 8001cc0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	689b      	ldr	r3, [r3, #8]
 8001cc6:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	431a      	orrs	r2, r3
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	609a      	str	r2, [r3, #8]
}
 8001cd2:	bf00      	nop
 8001cd4:	370c      	adds	r7, #12
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cdc:	4770      	bx	lr

08001cde <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001cde:	b480      	push	{r7}
 8001ce0:	b083      	sub	sp, #12
 8001ce2:	af00      	add	r7, sp, #0
 8001ce4:	6078      	str	r0, [r7, #4]
 8001ce6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	689b      	ldr	r3, [r3, #8]
 8001cec:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	431a      	orrs	r2, r3
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	609a      	str	r2, [r3, #8]
}
 8001cf8:	bf00      	nop
 8001cfa:	370c      	adds	r7, #12
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d02:	4770      	bx	lr

08001d04 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001d04:	b480      	push	{r7}
 8001d06:	b083      	sub	sp, #12
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	689b      	ldr	r3, [r3, #8]
 8001d10:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001d14:	4618      	mov	r0, r3
 8001d16:	370c      	adds	r7, #12
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1e:	4770      	bx	lr

08001d20 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001d20:	b480      	push	{r7}
 8001d22:	b087      	sub	sp, #28
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	60f8      	str	r0, [r7, #12]
 8001d28:	60b9      	str	r1, [r7, #8]
 8001d2a:	607a      	str	r2, [r7, #4]
 8001d2c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	3360      	adds	r3, #96	; 0x60
 8001d32:	461a      	mov	r2, r3
 8001d34:	68bb      	ldr	r3, [r7, #8]
 8001d36:	009b      	lsls	r3, r3, #2
 8001d38:	4413      	add	r3, r2
 8001d3a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001d3c:	697b      	ldr	r3, [r7, #20]
 8001d3e:	681a      	ldr	r2, [r3, #0]
 8001d40:	4b08      	ldr	r3, [pc, #32]	; (8001d64 <LL_ADC_SetOffset+0x44>)
 8001d42:	4013      	ands	r3, r2
 8001d44:	687a      	ldr	r2, [r7, #4]
 8001d46:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001d4a:	683a      	ldr	r2, [r7, #0]
 8001d4c:	430a      	orrs	r2, r1
 8001d4e:	4313      	orrs	r3, r2
 8001d50:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001d54:	697b      	ldr	r3, [r7, #20]
 8001d56:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001d58:	bf00      	nop
 8001d5a:	371c      	adds	r7, #28
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d62:	4770      	bx	lr
 8001d64:	03fff000 	.word	0x03fff000

08001d68 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	b085      	sub	sp, #20
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
 8001d70:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	3360      	adds	r3, #96	; 0x60
 8001d76:	461a      	mov	r2, r3
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	009b      	lsls	r3, r3, #2
 8001d7c:	4413      	add	r3, r2
 8001d7e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001d88:	4618      	mov	r0, r3
 8001d8a:	3714      	adds	r7, #20
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d92:	4770      	bx	lr

08001d94 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001d94:	b480      	push	{r7}
 8001d96:	b087      	sub	sp, #28
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	60f8      	str	r0, [r7, #12]
 8001d9c:	60b9      	str	r1, [r7, #8]
 8001d9e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	3360      	adds	r3, #96	; 0x60
 8001da4:	461a      	mov	r2, r3
 8001da6:	68bb      	ldr	r3, [r7, #8]
 8001da8:	009b      	lsls	r3, r3, #2
 8001daa:	4413      	add	r3, r2
 8001dac:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001dae:	697b      	ldr	r3, [r7, #20]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	431a      	orrs	r2, r3
 8001dba:	697b      	ldr	r3, [r7, #20]
 8001dbc:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001dbe:	bf00      	nop
 8001dc0:	371c      	adds	r7, #28
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc8:	4770      	bx	lr

08001dca <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001dca:	b480      	push	{r7}
 8001dcc:	b083      	sub	sp, #12
 8001dce:	af00      	add	r7, sp, #0
 8001dd0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	68db      	ldr	r3, [r3, #12]
 8001dd6:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d101      	bne.n	8001de2 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001dde:	2301      	movs	r3, #1
 8001de0:	e000      	b.n	8001de4 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001de2:	2300      	movs	r3, #0
}
 8001de4:	4618      	mov	r0, r3
 8001de6:	370c      	adds	r7, #12
 8001de8:	46bd      	mov	sp, r7
 8001dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dee:	4770      	bx	lr

08001df0 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001df0:	b480      	push	{r7}
 8001df2:	b087      	sub	sp, #28
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	60f8      	str	r0, [r7, #12]
 8001df8:	60b9      	str	r1, [r7, #8]
 8001dfa:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	3330      	adds	r3, #48	; 0x30
 8001e00:	461a      	mov	r2, r3
 8001e02:	68bb      	ldr	r3, [r7, #8]
 8001e04:	0a1b      	lsrs	r3, r3, #8
 8001e06:	009b      	lsls	r3, r3, #2
 8001e08:	f003 030c 	and.w	r3, r3, #12
 8001e0c:	4413      	add	r3, r2
 8001e0e:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001e10:	697b      	ldr	r3, [r7, #20]
 8001e12:	681a      	ldr	r2, [r3, #0]
 8001e14:	68bb      	ldr	r3, [r7, #8]
 8001e16:	f003 031f 	and.w	r3, r3, #31
 8001e1a:	211f      	movs	r1, #31
 8001e1c:	fa01 f303 	lsl.w	r3, r1, r3
 8001e20:	43db      	mvns	r3, r3
 8001e22:	401a      	ands	r2, r3
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	0e9b      	lsrs	r3, r3, #26
 8001e28:	f003 011f 	and.w	r1, r3, #31
 8001e2c:	68bb      	ldr	r3, [r7, #8]
 8001e2e:	f003 031f 	and.w	r3, r3, #31
 8001e32:	fa01 f303 	lsl.w	r3, r1, r3
 8001e36:	431a      	orrs	r2, r3
 8001e38:	697b      	ldr	r3, [r7, #20]
 8001e3a:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001e3c:	bf00      	nop
 8001e3e:	371c      	adds	r7, #28
 8001e40:	46bd      	mov	sp, r7
 8001e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e46:	4770      	bx	lr

08001e48 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	b087      	sub	sp, #28
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	60f8      	str	r0, [r7, #12]
 8001e50:	60b9      	str	r1, [r7, #8]
 8001e52:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	3314      	adds	r3, #20
 8001e58:	461a      	mov	r2, r3
 8001e5a:	68bb      	ldr	r3, [r7, #8]
 8001e5c:	0e5b      	lsrs	r3, r3, #25
 8001e5e:	009b      	lsls	r3, r3, #2
 8001e60:	f003 0304 	and.w	r3, r3, #4
 8001e64:	4413      	add	r3, r2
 8001e66:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001e68:	697b      	ldr	r3, [r7, #20]
 8001e6a:	681a      	ldr	r2, [r3, #0]
 8001e6c:	68bb      	ldr	r3, [r7, #8]
 8001e6e:	0d1b      	lsrs	r3, r3, #20
 8001e70:	f003 031f 	and.w	r3, r3, #31
 8001e74:	2107      	movs	r1, #7
 8001e76:	fa01 f303 	lsl.w	r3, r1, r3
 8001e7a:	43db      	mvns	r3, r3
 8001e7c:	401a      	ands	r2, r3
 8001e7e:	68bb      	ldr	r3, [r7, #8]
 8001e80:	0d1b      	lsrs	r3, r3, #20
 8001e82:	f003 031f 	and.w	r3, r3, #31
 8001e86:	6879      	ldr	r1, [r7, #4]
 8001e88:	fa01 f303 	lsl.w	r3, r1, r3
 8001e8c:	431a      	orrs	r2, r3
 8001e8e:	697b      	ldr	r3, [r7, #20]
 8001e90:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001e92:	bf00      	nop
 8001e94:	371c      	adds	r7, #28
 8001e96:	46bd      	mov	sp, r7
 8001e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9c:	4770      	bx	lr
	...

08001ea0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	b085      	sub	sp, #20
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	60f8      	str	r0, [r7, #12]
 8001ea8:	60b9      	str	r1, [r7, #8]
 8001eaa:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001eb2:	68bb      	ldr	r3, [r7, #8]
 8001eb4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001eb8:	43db      	mvns	r3, r3
 8001eba:	401a      	ands	r2, r3
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	f003 0318 	and.w	r3, r3, #24
 8001ec2:	4908      	ldr	r1, [pc, #32]	; (8001ee4 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001ec4:	40d9      	lsrs	r1, r3
 8001ec6:	68bb      	ldr	r3, [r7, #8]
 8001ec8:	400b      	ands	r3, r1
 8001eca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ece:	431a      	orrs	r2, r3
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001ed6:	bf00      	nop
 8001ed8:	3714      	adds	r7, #20
 8001eda:	46bd      	mov	sp, r7
 8001edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee0:	4770      	bx	lr
 8001ee2:	bf00      	nop
 8001ee4:	0007ffff 	.word	0x0007ffff

08001ee8 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	b083      	sub	sp, #12
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	689b      	ldr	r3, [r3, #8]
 8001ef4:	f003 031f 	and.w	r3, r3, #31
}
 8001ef8:	4618      	mov	r0, r3
 8001efa:	370c      	adds	r7, #12
 8001efc:	46bd      	mov	sp, r7
 8001efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f02:	4770      	bx	lr

08001f04 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001f04:	b480      	push	{r7}
 8001f06:	b083      	sub	sp, #12
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	689b      	ldr	r3, [r3, #8]
 8001f10:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8001f14:	4618      	mov	r0, r3
 8001f16:	370c      	adds	r7, #12
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1e:	4770      	bx	lr

08001f20 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001f20:	b480      	push	{r7}
 8001f22:	b083      	sub	sp, #12
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	689b      	ldr	r3, [r3, #8]
 8001f2c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001f30:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001f34:	687a      	ldr	r2, [r7, #4]
 8001f36:	6093      	str	r3, [r2, #8]
}
 8001f38:	bf00      	nop
 8001f3a:	370c      	adds	r7, #12
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f42:	4770      	bx	lr

08001f44 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001f44:	b480      	push	{r7}
 8001f46:	b083      	sub	sp, #12
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	689b      	ldr	r3, [r3, #8]
 8001f50:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001f54:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001f58:	d101      	bne.n	8001f5e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	e000      	b.n	8001f60 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001f5e:	2300      	movs	r3, #0
}
 8001f60:	4618      	mov	r0, r3
 8001f62:	370c      	adds	r7, #12
 8001f64:	46bd      	mov	sp, r7
 8001f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6a:	4770      	bx	lr

08001f6c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	b083      	sub	sp, #12
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	689b      	ldr	r3, [r3, #8]
 8001f78:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001f7c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001f80:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001f88:	bf00      	nop
 8001f8a:	370c      	adds	r7, #12
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f92:	4770      	bx	lr

08001f94 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001f94:	b480      	push	{r7}
 8001f96:	b083      	sub	sp, #12
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	689b      	ldr	r3, [r3, #8]
 8001fa0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fa4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001fa8:	d101      	bne.n	8001fae <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001faa:	2301      	movs	r3, #1
 8001fac:	e000      	b.n	8001fb0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001fae:	2300      	movs	r3, #0
}
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	370c      	adds	r7, #12
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fba:	4770      	bx	lr

08001fbc <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	b083      	sub	sp, #12
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	689b      	ldr	r3, [r3, #8]
 8001fc8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001fcc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001fd0:	f043 0201 	orr.w	r2, r3, #1
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001fd8:	bf00      	nop
 8001fda:	370c      	adds	r7, #12
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe2:	4770      	bx	lr

08001fe4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	b083      	sub	sp, #12
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	689b      	ldr	r3, [r3, #8]
 8001ff0:	f003 0301 	and.w	r3, r3, #1
 8001ff4:	2b01      	cmp	r3, #1
 8001ff6:	d101      	bne.n	8001ffc <LL_ADC_IsEnabled+0x18>
 8001ff8:	2301      	movs	r3, #1
 8001ffa:	e000      	b.n	8001ffe <LL_ADC_IsEnabled+0x1a>
 8001ffc:	2300      	movs	r3, #0
}
 8001ffe:	4618      	mov	r0, r3
 8002000:	370c      	adds	r7, #12
 8002002:	46bd      	mov	sp, r7
 8002004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002008:	4770      	bx	lr

0800200a <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800200a:	b480      	push	{r7}
 800200c:	b083      	sub	sp, #12
 800200e:	af00      	add	r7, sp, #0
 8002010:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	689b      	ldr	r3, [r3, #8]
 8002016:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800201a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800201e:	f043 0204 	orr.w	r2, r3, #4
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002026:	bf00      	nop
 8002028:	370c      	adds	r7, #12
 800202a:	46bd      	mov	sp, r7
 800202c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002030:	4770      	bx	lr

08002032 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002032:	b480      	push	{r7}
 8002034:	b083      	sub	sp, #12
 8002036:	af00      	add	r7, sp, #0
 8002038:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	689b      	ldr	r3, [r3, #8]
 800203e:	f003 0304 	and.w	r3, r3, #4
 8002042:	2b04      	cmp	r3, #4
 8002044:	d101      	bne.n	800204a <LL_ADC_REG_IsConversionOngoing+0x18>
 8002046:	2301      	movs	r3, #1
 8002048:	e000      	b.n	800204c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800204a:	2300      	movs	r3, #0
}
 800204c:	4618      	mov	r0, r3
 800204e:	370c      	adds	r7, #12
 8002050:	46bd      	mov	sp, r7
 8002052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002056:	4770      	bx	lr

08002058 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002058:	b480      	push	{r7}
 800205a:	b083      	sub	sp, #12
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	689b      	ldr	r3, [r3, #8]
 8002064:	f003 0308 	and.w	r3, r3, #8
 8002068:	2b08      	cmp	r3, #8
 800206a:	d101      	bne.n	8002070 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800206c:	2301      	movs	r3, #1
 800206e:	e000      	b.n	8002072 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002070:	2300      	movs	r3, #0
}
 8002072:	4618      	mov	r0, r3
 8002074:	370c      	adds	r7, #12
 8002076:	46bd      	mov	sp, r7
 8002078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207c:	4770      	bx	lr
	...

08002080 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002080:	b590      	push	{r4, r7, lr}
 8002082:	b089      	sub	sp, #36	; 0x24
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002088:	2300      	movs	r3, #0
 800208a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 800208c:	2300      	movs	r3, #0
 800208e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	2b00      	cmp	r3, #0
 8002094:	d101      	bne.n	800209a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002096:	2301      	movs	r3, #1
 8002098:	e130      	b.n	80022fc <HAL_ADC_Init+0x27c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	691b      	ldr	r3, [r3, #16]
 800209e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d109      	bne.n	80020bc <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80020a8:	6878      	ldr	r0, [r7, #4]
 80020aa:	f7ff fac9 	bl	8001640 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	2200      	movs	r2, #0
 80020b2:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	2200      	movs	r2, #0
 80020b8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	4618      	mov	r0, r3
 80020c2:	f7ff ff3f 	bl	8001f44 <LL_ADC_IsDeepPowerDownEnabled>
 80020c6:	4603      	mov	r3, r0
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d004      	beq.n	80020d6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	4618      	mov	r0, r3
 80020d2:	f7ff ff25 	bl	8001f20 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	4618      	mov	r0, r3
 80020dc:	f7ff ff5a 	bl	8001f94 <LL_ADC_IsInternalRegulatorEnabled>
 80020e0:	4603      	mov	r3, r0
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d115      	bne.n	8002112 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	4618      	mov	r0, r3
 80020ec:	f7ff ff3e 	bl	8001f6c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80020f0:	4b84      	ldr	r3, [pc, #528]	; (8002304 <HAL_ADC_Init+0x284>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	099b      	lsrs	r3, r3, #6
 80020f6:	4a84      	ldr	r2, [pc, #528]	; (8002308 <HAL_ADC_Init+0x288>)
 80020f8:	fba2 2303 	umull	r2, r3, r2, r3
 80020fc:	099b      	lsrs	r3, r3, #6
 80020fe:	3301      	adds	r3, #1
 8002100:	005b      	lsls	r3, r3, #1
 8002102:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002104:	e002      	b.n	800210c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	3b01      	subs	r3, #1
 800210a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	2b00      	cmp	r3, #0
 8002110:	d1f9      	bne.n	8002106 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4618      	mov	r0, r3
 8002118:	f7ff ff3c 	bl	8001f94 <LL_ADC_IsInternalRegulatorEnabled>
 800211c:	4603      	mov	r3, r0
 800211e:	2b00      	cmp	r3, #0
 8002120:	d10d      	bne.n	800213e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002126:	f043 0210 	orr.w	r2, r3, #16
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002132:	f043 0201 	orr.w	r2, r3, #1
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800213a:	2301      	movs	r3, #1
 800213c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	4618      	mov	r0, r3
 8002144:	f7ff ff75 	bl	8002032 <LL_ADC_REG_IsConversionOngoing>
 8002148:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800214e:	f003 0310 	and.w	r3, r3, #16
 8002152:	2b00      	cmp	r3, #0
 8002154:	f040 80c9 	bne.w	80022ea <HAL_ADC_Init+0x26a>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002158:	697b      	ldr	r3, [r7, #20]
 800215a:	2b00      	cmp	r3, #0
 800215c:	f040 80c5 	bne.w	80022ea <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002164:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002168:	f043 0202 	orr.w	r2, r3, #2
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	4618      	mov	r0, r3
 8002176:	f7ff ff35 	bl	8001fe4 <LL_ADC_IsEnabled>
 800217a:	4603      	mov	r3, r0
 800217c:	2b00      	cmp	r3, #0
 800217e:	d115      	bne.n	80021ac <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002180:	4862      	ldr	r0, [pc, #392]	; (800230c <HAL_ADC_Init+0x28c>)
 8002182:	f7ff ff2f 	bl	8001fe4 <LL_ADC_IsEnabled>
 8002186:	4604      	mov	r4, r0
 8002188:	4861      	ldr	r0, [pc, #388]	; (8002310 <HAL_ADC_Init+0x290>)
 800218a:	f7ff ff2b 	bl	8001fe4 <LL_ADC_IsEnabled>
 800218e:	4603      	mov	r3, r0
 8002190:	431c      	orrs	r4, r3
 8002192:	4860      	ldr	r0, [pc, #384]	; (8002314 <HAL_ADC_Init+0x294>)
 8002194:	f7ff ff26 	bl	8001fe4 <LL_ADC_IsEnabled>
 8002198:	4603      	mov	r3, r0
 800219a:	4323      	orrs	r3, r4
 800219c:	2b00      	cmp	r3, #0
 800219e:	d105      	bne.n	80021ac <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	4619      	mov	r1, r3
 80021a6:	485c      	ldr	r0, [pc, #368]	; (8002318 <HAL_ADC_Init+0x298>)
 80021a8:	f7ff fd86 	bl	8001cb8 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	7e5b      	ldrb	r3, [r3, #25]
 80021b0:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80021b6:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80021bc:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80021c2:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80021ca:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80021cc:	4313      	orrs	r3, r2
 80021ce:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80021d6:	2b01      	cmp	r3, #1
 80021d8:	d106      	bne.n	80021e8 <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021de:	3b01      	subs	r3, #1
 80021e0:	045b      	lsls	r3, r3, #17
 80021e2:	69ba      	ldr	r2, [r7, #24]
 80021e4:	4313      	orrs	r3, r2
 80021e6:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d009      	beq.n	8002204 <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021f4:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021fc:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80021fe:	69ba      	ldr	r2, [r7, #24]
 8002200:	4313      	orrs	r3, r2
 8002202:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	68da      	ldr	r2, [r3, #12]
 800220a:	4b44      	ldr	r3, [pc, #272]	; (800231c <HAL_ADC_Init+0x29c>)
 800220c:	4013      	ands	r3, r2
 800220e:	687a      	ldr	r2, [r7, #4]
 8002210:	6812      	ldr	r2, [r2, #0]
 8002212:	69b9      	ldr	r1, [r7, #24]
 8002214:	430b      	orrs	r3, r1
 8002216:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	4618      	mov	r0, r3
 800221e:	f7ff ff1b 	bl	8002058 <LL_ADC_INJ_IsConversionOngoing>
 8002222:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002224:	697b      	ldr	r3, [r7, #20]
 8002226:	2b00      	cmp	r3, #0
 8002228:	d13d      	bne.n	80022a6 <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800222a:	693b      	ldr	r3, [r7, #16]
 800222c:	2b00      	cmp	r3, #0
 800222e:	d13a      	bne.n	80022a6 <HAL_ADC_Init+0x226>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002234:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800223c:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800223e:	4313      	orrs	r3, r2
 8002240:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	68db      	ldr	r3, [r3, #12]
 8002248:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800224c:	f023 0302 	bic.w	r3, r3, #2
 8002250:	687a      	ldr	r2, [r7, #4]
 8002252:	6812      	ldr	r2, [r2, #0]
 8002254:	69b9      	ldr	r1, [r7, #24]
 8002256:	430b      	orrs	r3, r1
 8002258:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002260:	2b01      	cmp	r3, #1
 8002262:	d118      	bne.n	8002296 <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	691b      	ldr	r3, [r3, #16]
 800226a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800226e:	f023 0304 	bic.w	r3, r3, #4
 8002272:	687a      	ldr	r2, [r7, #4]
 8002274:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8002276:	687a      	ldr	r2, [r7, #4]
 8002278:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800227a:	4311      	orrs	r1, r2
 800227c:	687a      	ldr	r2, [r7, #4]
 800227e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002280:	4311      	orrs	r1, r2
 8002282:	687a      	ldr	r2, [r7, #4]
 8002284:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002286:	430a      	orrs	r2, r1
 8002288:	431a      	orrs	r2, r3
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f042 0201 	orr.w	r2, r2, #1
 8002292:	611a      	str	r2, [r3, #16]
 8002294:	e007      	b.n	80022a6 <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	691a      	ldr	r2, [r3, #16]
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f022 0201 	bic.w	r2, r2, #1
 80022a4:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	691b      	ldr	r3, [r3, #16]
 80022aa:	2b01      	cmp	r3, #1
 80022ac:	d10c      	bne.n	80022c8 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022b4:	f023 010f 	bic.w	r1, r3, #15
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	69db      	ldr	r3, [r3, #28]
 80022bc:	1e5a      	subs	r2, r3, #1
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	430a      	orrs	r2, r1
 80022c4:	631a      	str	r2, [r3, #48]	; 0x30
 80022c6:	e007      	b.n	80022d8 <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f022 020f 	bic.w	r2, r2, #15
 80022d6:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022dc:	f023 0303 	bic.w	r3, r3, #3
 80022e0:	f043 0201 	orr.w	r2, r3, #1
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	655a      	str	r2, [r3, #84]	; 0x54
 80022e8:	e007      	b.n	80022fa <HAL_ADC_Init+0x27a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022ee:	f043 0210 	orr.w	r2, r3, #16
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80022f6:	2301      	movs	r3, #1
 80022f8:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80022fa:	7ffb      	ldrb	r3, [r7, #31]
}
 80022fc:	4618      	mov	r0, r3
 80022fe:	3724      	adds	r7, #36	; 0x24
 8002300:	46bd      	mov	sp, r7
 8002302:	bd90      	pop	{r4, r7, pc}
 8002304:	20000000 	.word	0x20000000
 8002308:	053e2d63 	.word	0x053e2d63
 800230c:	50040000 	.word	0x50040000
 8002310:	50040100 	.word	0x50040100
 8002314:	50040200 	.word	0x50040200
 8002318:	50040300 	.word	0x50040300
 800231c:	fff0c007 	.word	0xfff0c007

08002320 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b086      	sub	sp, #24
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002328:	4857      	ldr	r0, [pc, #348]	; (8002488 <HAL_ADC_Start+0x168>)
 800232a:	f7ff fddd 	bl	8001ee8 <LL_ADC_GetMultimode>
 800232e:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	4618      	mov	r0, r3
 8002336:	f7ff fe7c 	bl	8002032 <LL_ADC_REG_IsConversionOngoing>
 800233a:	4603      	mov	r3, r0
 800233c:	2b00      	cmp	r3, #0
 800233e:	f040 809c 	bne.w	800247a <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002348:	2b01      	cmp	r3, #1
 800234a:	d101      	bne.n	8002350 <HAL_ADC_Start+0x30>
 800234c:	2302      	movs	r3, #2
 800234e:	e097      	b.n	8002480 <HAL_ADC_Start+0x160>
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	2201      	movs	r2, #1
 8002354:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002358:	6878      	ldr	r0, [r7, #4]
 800235a:	f000 fd73 	bl	8002e44 <ADC_Enable>
 800235e:	4603      	mov	r3, r0
 8002360:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002362:	7dfb      	ldrb	r3, [r7, #23]
 8002364:	2b00      	cmp	r3, #0
 8002366:	f040 8083 	bne.w	8002470 <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800236e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002372:	f023 0301 	bic.w	r3, r3, #1
 8002376:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	4a42      	ldr	r2, [pc, #264]	; (800248c <HAL_ADC_Start+0x16c>)
 8002384:	4293      	cmp	r3, r2
 8002386:	d002      	beq.n	800238e <HAL_ADC_Start+0x6e>
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	e000      	b.n	8002390 <HAL_ADC_Start+0x70>
 800238e:	4b40      	ldr	r3, [pc, #256]	; (8002490 <HAL_ADC_Start+0x170>)
 8002390:	687a      	ldr	r2, [r7, #4]
 8002392:	6812      	ldr	r2, [r2, #0]
 8002394:	4293      	cmp	r3, r2
 8002396:	d002      	beq.n	800239e <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002398:	693b      	ldr	r3, [r7, #16]
 800239a:	2b00      	cmp	r3, #0
 800239c:	d105      	bne.n	80023aa <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023a2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023ae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80023b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80023b6:	d106      	bne.n	80023c6 <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023bc:	f023 0206 	bic.w	r2, r3, #6
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	659a      	str	r2, [r3, #88]	; 0x58
 80023c4:	e002      	b.n	80023cc <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	2200      	movs	r2, #0
 80023ca:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	221c      	movs	r2, #28
 80023d2:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	2200      	movs	r2, #0
 80023d8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	4a2a      	ldr	r2, [pc, #168]	; (800248c <HAL_ADC_Start+0x16c>)
 80023e2:	4293      	cmp	r3, r2
 80023e4:	d002      	beq.n	80023ec <HAL_ADC_Start+0xcc>
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	e000      	b.n	80023ee <HAL_ADC_Start+0xce>
 80023ec:	4b28      	ldr	r3, [pc, #160]	; (8002490 <HAL_ADC_Start+0x170>)
 80023ee:	687a      	ldr	r2, [r7, #4]
 80023f0:	6812      	ldr	r2, [r2, #0]
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d008      	beq.n	8002408 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80023f6:	693b      	ldr	r3, [r7, #16]
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d005      	beq.n	8002408 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80023fc:	693b      	ldr	r3, [r7, #16]
 80023fe:	2b05      	cmp	r3, #5
 8002400:	d002      	beq.n	8002408 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002402:	693b      	ldr	r3, [r7, #16]
 8002404:	2b09      	cmp	r3, #9
 8002406:	d114      	bne.n	8002432 <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	68db      	ldr	r3, [r3, #12]
 800240e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002412:	2b00      	cmp	r3, #0
 8002414:	d007      	beq.n	8002426 <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800241a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800241e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	4618      	mov	r0, r3
 800242c:	f7ff fded 	bl	800200a <LL_ADC_REG_StartConversion>
 8002430:	e025      	b.n	800247e <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002436:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	4a12      	ldr	r2, [pc, #72]	; (800248c <HAL_ADC_Start+0x16c>)
 8002444:	4293      	cmp	r3, r2
 8002446:	d002      	beq.n	800244e <HAL_ADC_Start+0x12e>
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	e000      	b.n	8002450 <HAL_ADC_Start+0x130>
 800244e:	4b10      	ldr	r3, [pc, #64]	; (8002490 <HAL_ADC_Start+0x170>)
 8002450:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	68db      	ldr	r3, [r3, #12]
 8002456:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800245a:	2b00      	cmp	r3, #0
 800245c:	d00f      	beq.n	800247e <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002462:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002466:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	655a      	str	r2, [r3, #84]	; 0x54
 800246e:	e006      	b.n	800247e <HAL_ADC_Start+0x15e>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2200      	movs	r2, #0
 8002474:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8002478:	e001      	b.n	800247e <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800247a:	2302      	movs	r3, #2
 800247c:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800247e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002480:	4618      	mov	r0, r3
 8002482:	3718      	adds	r7, #24
 8002484:	46bd      	mov	sp, r7
 8002486:	bd80      	pop	{r7, pc}
 8002488:	50040300 	.word	0x50040300
 800248c:	50040100 	.word	0x50040100
 8002490:	50040000 	.word	0x50040000

08002494 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b088      	sub	sp, #32
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
 800249c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800249e:	4866      	ldr	r0, [pc, #408]	; (8002638 <HAL_ADC_PollForConversion+0x1a4>)
 80024a0:	f7ff fd22 	bl	8001ee8 <LL_ADC_GetMultimode>
 80024a4:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	695b      	ldr	r3, [r3, #20]
 80024aa:	2b08      	cmp	r3, #8
 80024ac:	d102      	bne.n	80024b4 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 80024ae:	2308      	movs	r3, #8
 80024b0:	61fb      	str	r3, [r7, #28]
 80024b2:	e02a      	b.n	800250a <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80024b4:	697b      	ldr	r3, [r7, #20]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d005      	beq.n	80024c6 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80024ba:	697b      	ldr	r3, [r7, #20]
 80024bc:	2b05      	cmp	r3, #5
 80024be:	d002      	beq.n	80024c6 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80024c0:	697b      	ldr	r3, [r7, #20]
 80024c2:	2b09      	cmp	r3, #9
 80024c4:	d111      	bne.n	80024ea <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	68db      	ldr	r3, [r3, #12]
 80024cc:	f003 0301 	and.w	r3, r3, #1
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d007      	beq.n	80024e4 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024d8:	f043 0220 	orr.w	r2, r3, #32
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 80024e0:	2301      	movs	r3, #1
 80024e2:	e0a4      	b.n	800262e <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80024e4:	2304      	movs	r3, #4
 80024e6:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 80024e8:	e00f      	b.n	800250a <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80024ea:	4853      	ldr	r0, [pc, #332]	; (8002638 <HAL_ADC_PollForConversion+0x1a4>)
 80024ec:	f7ff fd0a 	bl	8001f04 <LL_ADC_GetMultiDMATransfer>
 80024f0:	4603      	mov	r3, r0
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d007      	beq.n	8002506 <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024fa:	f043 0220 	orr.w	r2, r3, #32
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8002502:	2301      	movs	r3, #1
 8002504:	e093      	b.n	800262e <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8002506:	2304      	movs	r3, #4
 8002508:	61fb      	str	r3, [r7, #28]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800250a:	f7ff fba5 	bl	8001c58 <HAL_GetTick>
 800250e:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002510:	e021      	b.n	8002556 <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002518:	d01d      	beq.n	8002556 <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 800251a:	f7ff fb9d 	bl	8001c58 <HAL_GetTick>
 800251e:	4602      	mov	r2, r0
 8002520:	693b      	ldr	r3, [r7, #16]
 8002522:	1ad3      	subs	r3, r2, r3
 8002524:	683a      	ldr	r2, [r7, #0]
 8002526:	429a      	cmp	r2, r3
 8002528:	d302      	bcc.n	8002530 <HAL_ADC_PollForConversion+0x9c>
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	2b00      	cmp	r3, #0
 800252e:	d112      	bne.n	8002556 <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	681a      	ldr	r2, [r3, #0]
 8002536:	69fb      	ldr	r3, [r7, #28]
 8002538:	4013      	ands	r3, r2
 800253a:	2b00      	cmp	r3, #0
 800253c:	d10b      	bne.n	8002556 <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002542:	f043 0204 	orr.w	r2, r3, #4
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	2200      	movs	r2, #0
 800254e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 8002552:	2303      	movs	r3, #3
 8002554:	e06b      	b.n	800262e <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	681a      	ldr	r2, [r3, #0]
 800255c:	69fb      	ldr	r3, [r7, #28]
 800255e:	4013      	ands	r3, r2
 8002560:	2b00      	cmp	r3, #0
 8002562:	d0d6      	beq.n	8002512 <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002568:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	4618      	mov	r0, r3
 8002576:	f7ff fc28 	bl	8001dca <LL_ADC_REG_IsTriggerSourceSWStart>
 800257a:	4603      	mov	r3, r0
 800257c:	2b00      	cmp	r3, #0
 800257e:	d01c      	beq.n	80025ba <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	7e5b      	ldrb	r3, [r3, #25]
 8002584:	2b00      	cmp	r3, #0
 8002586:	d118      	bne.n	80025ba <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f003 0308 	and.w	r3, r3, #8
 8002592:	2b08      	cmp	r3, #8
 8002594:	d111      	bne.n	80025ba <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800259a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025a6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d105      	bne.n	80025ba <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025b2:	f043 0201 	orr.w	r2, r3, #1
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	4a1f      	ldr	r2, [pc, #124]	; (800263c <HAL_ADC_PollForConversion+0x1a8>)
 80025c0:	4293      	cmp	r3, r2
 80025c2:	d002      	beq.n	80025ca <HAL_ADC_PollForConversion+0x136>
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	e000      	b.n	80025cc <HAL_ADC_PollForConversion+0x138>
 80025ca:	4b1d      	ldr	r3, [pc, #116]	; (8002640 <HAL_ADC_PollForConversion+0x1ac>)
 80025cc:	687a      	ldr	r2, [r7, #4]
 80025ce:	6812      	ldr	r2, [r2, #0]
 80025d0:	4293      	cmp	r3, r2
 80025d2:	d008      	beq.n	80025e6 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80025d4:	697b      	ldr	r3, [r7, #20]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d005      	beq.n	80025e6 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80025da:	697b      	ldr	r3, [r7, #20]
 80025dc:	2b05      	cmp	r3, #5
 80025de:	d002      	beq.n	80025e6 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80025e0:	697b      	ldr	r3, [r7, #20]
 80025e2:	2b09      	cmp	r3, #9
 80025e4:	d104      	bne.n	80025f0 <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	68db      	ldr	r3, [r3, #12]
 80025ec:	61bb      	str	r3, [r7, #24]
 80025ee:	e00c      	b.n	800260a <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	4a11      	ldr	r2, [pc, #68]	; (800263c <HAL_ADC_PollForConversion+0x1a8>)
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d002      	beq.n	8002600 <HAL_ADC_PollForConversion+0x16c>
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	e000      	b.n	8002602 <HAL_ADC_PollForConversion+0x16e>
 8002600:	4b0f      	ldr	r3, [pc, #60]	; (8002640 <HAL_ADC_PollForConversion+0x1ac>)
 8002602:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	68db      	ldr	r3, [r3, #12]
 8002608:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 800260a:	69fb      	ldr	r3, [r7, #28]
 800260c:	2b08      	cmp	r3, #8
 800260e:	d104      	bne.n	800261a <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	2208      	movs	r2, #8
 8002616:	601a      	str	r2, [r3, #0]
 8002618:	e008      	b.n	800262c <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 800261a:	69bb      	ldr	r3, [r7, #24]
 800261c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002620:	2b00      	cmp	r3, #0
 8002622:	d103      	bne.n	800262c <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	220c      	movs	r2, #12
 800262a:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 800262c:	2300      	movs	r3, #0
}
 800262e:	4618      	mov	r0, r3
 8002630:	3720      	adds	r7, #32
 8002632:	46bd      	mov	sp, r7
 8002634:	bd80      	pop	{r7, pc}
 8002636:	bf00      	nop
 8002638:	50040300 	.word	0x50040300
 800263c:	50040100 	.word	0x50040100
 8002640:	50040000 	.word	0x50040000

08002644 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8002644:	b480      	push	{r7}
 8002646:	b083      	sub	sp, #12
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8002652:	4618      	mov	r0, r3
 8002654:	370c      	adds	r7, #12
 8002656:	46bd      	mov	sp, r7
 8002658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265c:	4770      	bx	lr
	...

08002660 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b0b6      	sub	sp, #216	; 0xd8
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
 8002668:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800266a:	2300      	movs	r3, #0
 800266c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002670:	2300      	movs	r3, #0
 8002672:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800267a:	2b01      	cmp	r3, #1
 800267c:	d101      	bne.n	8002682 <HAL_ADC_ConfigChannel+0x22>
 800267e:	2302      	movs	r3, #2
 8002680:	e3c9      	b.n	8002e16 <HAL_ADC_ConfigChannel+0x7b6>
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	2201      	movs	r2, #1
 8002686:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	4618      	mov	r0, r3
 8002690:	f7ff fccf 	bl	8002032 <LL_ADC_REG_IsConversionOngoing>
 8002694:	4603      	mov	r3, r0
 8002696:	2b00      	cmp	r3, #0
 8002698:	f040 83aa 	bne.w	8002df0 <HAL_ADC_ConfigChannel+0x790>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	685b      	ldr	r3, [r3, #4]
 80026a0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	685b      	ldr	r3, [r3, #4]
 80026a8:	2b05      	cmp	r3, #5
 80026aa:	d824      	bhi.n	80026f6 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	685b      	ldr	r3, [r3, #4]
 80026b0:	3b02      	subs	r3, #2
 80026b2:	2b03      	cmp	r3, #3
 80026b4:	d81b      	bhi.n	80026ee <HAL_ADC_ConfigChannel+0x8e>
 80026b6:	a201      	add	r2, pc, #4	; (adr r2, 80026bc <HAL_ADC_ConfigChannel+0x5c>)
 80026b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026bc:	080026cd 	.word	0x080026cd
 80026c0:	080026d5 	.word	0x080026d5
 80026c4:	080026dd 	.word	0x080026dd
 80026c8:	080026e5 	.word	0x080026e5
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 80026cc:	230c      	movs	r3, #12
 80026ce:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 80026d2:	e010      	b.n	80026f6 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 80026d4:	2312      	movs	r3, #18
 80026d6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 80026da:	e00c      	b.n	80026f6 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 80026dc:	2318      	movs	r3, #24
 80026de:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 80026e2:	e008      	b.n	80026f6 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 80026e4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80026e8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 80026ec:	e003      	b.n	80026f6 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 80026ee:	2306      	movs	r3, #6
 80026f0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 80026f4:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6818      	ldr	r0, [r3, #0]
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	461a      	mov	r2, r3
 8002700:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8002704:	f7ff fb74 	bl	8001df0 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	4618      	mov	r0, r3
 800270e:	f7ff fc90 	bl	8002032 <LL_ADC_REG_IsConversionOngoing>
 8002712:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	4618      	mov	r0, r3
 800271c:	f7ff fc9c 	bl	8002058 <LL_ADC_INJ_IsConversionOngoing>
 8002720:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002724:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002728:	2b00      	cmp	r3, #0
 800272a:	f040 81a4 	bne.w	8002a76 <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800272e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002732:	2b00      	cmp	r3, #0
 8002734:	f040 819f 	bne.w	8002a76 <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6818      	ldr	r0, [r3, #0]
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	6819      	ldr	r1, [r3, #0]
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	689b      	ldr	r3, [r3, #8]
 8002744:	461a      	mov	r2, r3
 8002746:	f7ff fb7f 	bl	8001e48 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	695a      	ldr	r2, [r3, #20]
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	68db      	ldr	r3, [r3, #12]
 8002754:	08db      	lsrs	r3, r3, #3
 8002756:	f003 0303 	and.w	r3, r3, #3
 800275a:	005b      	lsls	r3, r3, #1
 800275c:	fa02 f303 	lsl.w	r3, r2, r3
 8002760:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	691b      	ldr	r3, [r3, #16]
 8002768:	2b04      	cmp	r3, #4
 800276a:	d00a      	beq.n	8002782 <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6818      	ldr	r0, [r3, #0]
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	6919      	ldr	r1, [r3, #16]
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	681a      	ldr	r2, [r3, #0]
 8002778:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800277c:	f7ff fad0 	bl	8001d20 <LL_ADC_SetOffset>
 8002780:	e179      	b.n	8002a76 <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	2100      	movs	r1, #0
 8002788:	4618      	mov	r0, r3
 800278a:	f7ff faed 	bl	8001d68 <LL_ADC_GetOffsetChannel>
 800278e:	4603      	mov	r3, r0
 8002790:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002794:	2b00      	cmp	r3, #0
 8002796:	d10a      	bne.n	80027ae <HAL_ADC_ConfigChannel+0x14e>
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	2100      	movs	r1, #0
 800279e:	4618      	mov	r0, r3
 80027a0:	f7ff fae2 	bl	8001d68 <LL_ADC_GetOffsetChannel>
 80027a4:	4603      	mov	r3, r0
 80027a6:	0e9b      	lsrs	r3, r3, #26
 80027a8:	f003 021f 	and.w	r2, r3, #31
 80027ac:	e01e      	b.n	80027ec <HAL_ADC_ConfigChannel+0x18c>
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	2100      	movs	r1, #0
 80027b4:	4618      	mov	r0, r3
 80027b6:	f7ff fad7 	bl	8001d68 <LL_ADC_GetOffsetChannel>
 80027ba:	4603      	mov	r3, r0
 80027bc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027c0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80027c4:	fa93 f3a3 	rbit	r3, r3
 80027c8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80027cc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80027d0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80027d4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d101      	bne.n	80027e0 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 80027dc:	2320      	movs	r3, #32
 80027de:	e004      	b.n	80027ea <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 80027e0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80027e4:	fab3 f383 	clz	r3, r3
 80027e8:	b2db      	uxtb	r3, r3
 80027ea:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d105      	bne.n	8002804 <HAL_ADC_ConfigChannel+0x1a4>
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	0e9b      	lsrs	r3, r3, #26
 80027fe:	f003 031f 	and.w	r3, r3, #31
 8002802:	e018      	b.n	8002836 <HAL_ADC_ConfigChannel+0x1d6>
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800280c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002810:	fa93 f3a3 	rbit	r3, r3
 8002814:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 8002818:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800281c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 8002820:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002824:	2b00      	cmp	r3, #0
 8002826:	d101      	bne.n	800282c <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 8002828:	2320      	movs	r3, #32
 800282a:	e004      	b.n	8002836 <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 800282c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002830:	fab3 f383 	clz	r3, r3
 8002834:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002836:	429a      	cmp	r2, r3
 8002838:	d106      	bne.n	8002848 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	2200      	movs	r2, #0
 8002840:	2100      	movs	r1, #0
 8002842:	4618      	mov	r0, r3
 8002844:	f7ff faa6 	bl	8001d94 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	2101      	movs	r1, #1
 800284e:	4618      	mov	r0, r3
 8002850:	f7ff fa8a 	bl	8001d68 <LL_ADC_GetOffsetChannel>
 8002854:	4603      	mov	r3, r0
 8002856:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800285a:	2b00      	cmp	r3, #0
 800285c:	d10a      	bne.n	8002874 <HAL_ADC_ConfigChannel+0x214>
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	2101      	movs	r1, #1
 8002864:	4618      	mov	r0, r3
 8002866:	f7ff fa7f 	bl	8001d68 <LL_ADC_GetOffsetChannel>
 800286a:	4603      	mov	r3, r0
 800286c:	0e9b      	lsrs	r3, r3, #26
 800286e:	f003 021f 	and.w	r2, r3, #31
 8002872:	e01e      	b.n	80028b2 <HAL_ADC_ConfigChannel+0x252>
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	2101      	movs	r1, #1
 800287a:	4618      	mov	r0, r3
 800287c:	f7ff fa74 	bl	8001d68 <LL_ADC_GetOffsetChannel>
 8002880:	4603      	mov	r3, r0
 8002882:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002886:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800288a:	fa93 f3a3 	rbit	r3, r3
 800288e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 8002892:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002896:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 800289a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d101      	bne.n	80028a6 <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 80028a2:	2320      	movs	r3, #32
 80028a4:	e004      	b.n	80028b0 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 80028a6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80028aa:	fab3 f383 	clz	r3, r3
 80028ae:	b2db      	uxtb	r3, r3
 80028b0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d105      	bne.n	80028ca <HAL_ADC_ConfigChannel+0x26a>
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	0e9b      	lsrs	r3, r3, #26
 80028c4:	f003 031f 	and.w	r3, r3, #31
 80028c8:	e018      	b.n	80028fc <HAL_ADC_ConfigChannel+0x29c>
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028d2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80028d6:	fa93 f3a3 	rbit	r3, r3
 80028da:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 80028de:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80028e2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 80028e6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d101      	bne.n	80028f2 <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 80028ee:	2320      	movs	r3, #32
 80028f0:	e004      	b.n	80028fc <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 80028f2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80028f6:	fab3 f383 	clz	r3, r3
 80028fa:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80028fc:	429a      	cmp	r2, r3
 80028fe:	d106      	bne.n	800290e <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	2200      	movs	r2, #0
 8002906:	2101      	movs	r1, #1
 8002908:	4618      	mov	r0, r3
 800290a:	f7ff fa43 	bl	8001d94 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	2102      	movs	r1, #2
 8002914:	4618      	mov	r0, r3
 8002916:	f7ff fa27 	bl	8001d68 <LL_ADC_GetOffsetChannel>
 800291a:	4603      	mov	r3, r0
 800291c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002920:	2b00      	cmp	r3, #0
 8002922:	d10a      	bne.n	800293a <HAL_ADC_ConfigChannel+0x2da>
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	2102      	movs	r1, #2
 800292a:	4618      	mov	r0, r3
 800292c:	f7ff fa1c 	bl	8001d68 <LL_ADC_GetOffsetChannel>
 8002930:	4603      	mov	r3, r0
 8002932:	0e9b      	lsrs	r3, r3, #26
 8002934:	f003 021f 	and.w	r2, r3, #31
 8002938:	e01e      	b.n	8002978 <HAL_ADC_ConfigChannel+0x318>
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	2102      	movs	r1, #2
 8002940:	4618      	mov	r0, r3
 8002942:	f7ff fa11 	bl	8001d68 <LL_ADC_GetOffsetChannel>
 8002946:	4603      	mov	r3, r0
 8002948:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800294c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002950:	fa93 f3a3 	rbit	r3, r3
 8002954:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 8002958:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800295c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 8002960:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002964:	2b00      	cmp	r3, #0
 8002966:	d101      	bne.n	800296c <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 8002968:	2320      	movs	r3, #32
 800296a:	e004      	b.n	8002976 <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 800296c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002970:	fab3 f383 	clz	r3, r3
 8002974:	b2db      	uxtb	r3, r3
 8002976:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002980:	2b00      	cmp	r3, #0
 8002982:	d105      	bne.n	8002990 <HAL_ADC_ConfigChannel+0x330>
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	0e9b      	lsrs	r3, r3, #26
 800298a:	f003 031f 	and.w	r3, r3, #31
 800298e:	e014      	b.n	80029ba <HAL_ADC_ConfigChannel+0x35a>
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002996:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002998:	fa93 f3a3 	rbit	r3, r3
 800299c:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 800299e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80029a0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 80029a4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d101      	bne.n	80029b0 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 80029ac:	2320      	movs	r3, #32
 80029ae:	e004      	b.n	80029ba <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 80029b0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80029b4:	fab3 f383 	clz	r3, r3
 80029b8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80029ba:	429a      	cmp	r2, r3
 80029bc:	d106      	bne.n	80029cc <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	2200      	movs	r2, #0
 80029c4:	2102      	movs	r1, #2
 80029c6:	4618      	mov	r0, r3
 80029c8:	f7ff f9e4 	bl	8001d94 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	2103      	movs	r1, #3
 80029d2:	4618      	mov	r0, r3
 80029d4:	f7ff f9c8 	bl	8001d68 <LL_ADC_GetOffsetChannel>
 80029d8:	4603      	mov	r3, r0
 80029da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d10a      	bne.n	80029f8 <HAL_ADC_ConfigChannel+0x398>
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	2103      	movs	r1, #3
 80029e8:	4618      	mov	r0, r3
 80029ea:	f7ff f9bd 	bl	8001d68 <LL_ADC_GetOffsetChannel>
 80029ee:	4603      	mov	r3, r0
 80029f0:	0e9b      	lsrs	r3, r3, #26
 80029f2:	f003 021f 	and.w	r2, r3, #31
 80029f6:	e017      	b.n	8002a28 <HAL_ADC_ConfigChannel+0x3c8>
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	2103      	movs	r1, #3
 80029fe:	4618      	mov	r0, r3
 8002a00:	f7ff f9b2 	bl	8001d68 <LL_ADC_GetOffsetChannel>
 8002a04:	4603      	mov	r3, r0
 8002a06:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a08:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002a0a:	fa93 f3a3 	rbit	r3, r3
 8002a0e:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002a10:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a12:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 8002a14:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d101      	bne.n	8002a1e <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 8002a1a:	2320      	movs	r3, #32
 8002a1c:	e003      	b.n	8002a26 <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 8002a1e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002a20:	fab3 f383 	clz	r3, r3
 8002a24:	b2db      	uxtb	r3, r3
 8002a26:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d105      	bne.n	8002a40 <HAL_ADC_ConfigChannel+0x3e0>
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	0e9b      	lsrs	r3, r3, #26
 8002a3a:	f003 031f 	and.w	r3, r3, #31
 8002a3e:	e011      	b.n	8002a64 <HAL_ADC_ConfigChannel+0x404>
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a46:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002a48:	fa93 f3a3 	rbit	r3, r3
 8002a4c:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 8002a4e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002a50:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 8002a52:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d101      	bne.n	8002a5c <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8002a58:	2320      	movs	r3, #32
 8002a5a:	e003      	b.n	8002a64 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8002a5c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002a5e:	fab3 f383 	clz	r3, r3
 8002a62:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002a64:	429a      	cmp	r2, r3
 8002a66:	d106      	bne.n	8002a76 <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	2103      	movs	r1, #3
 8002a70:	4618      	mov	r0, r3
 8002a72:	f7ff f98f 	bl	8001d94 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	f7ff fab2 	bl	8001fe4 <LL_ADC_IsEnabled>
 8002a80:	4603      	mov	r3, r0
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	f040 8140 	bne.w	8002d08 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6818      	ldr	r0, [r3, #0]
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	6819      	ldr	r1, [r3, #0]
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	68db      	ldr	r3, [r3, #12]
 8002a94:	461a      	mov	r2, r3
 8002a96:	f7ff fa03 	bl	8001ea0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	68db      	ldr	r3, [r3, #12]
 8002a9e:	4a8f      	ldr	r2, [pc, #572]	; (8002cdc <HAL_ADC_ConfigChannel+0x67c>)
 8002aa0:	4293      	cmp	r3, r2
 8002aa2:	f040 8131 	bne.w	8002d08 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d10b      	bne.n	8002ace <HAL_ADC_ConfigChannel+0x46e>
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	0e9b      	lsrs	r3, r3, #26
 8002abc:	3301      	adds	r3, #1
 8002abe:	f003 031f 	and.w	r3, r3, #31
 8002ac2:	2b09      	cmp	r3, #9
 8002ac4:	bf94      	ite	ls
 8002ac6:	2301      	movls	r3, #1
 8002ac8:	2300      	movhi	r3, #0
 8002aca:	b2db      	uxtb	r3, r3
 8002acc:	e019      	b.n	8002b02 <HAL_ADC_ConfigChannel+0x4a2>
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ad4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002ad6:	fa93 f3a3 	rbit	r3, r3
 8002ada:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8002adc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ade:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8002ae0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d101      	bne.n	8002aea <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 8002ae6:	2320      	movs	r3, #32
 8002ae8:	e003      	b.n	8002af2 <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8002aea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002aec:	fab3 f383 	clz	r3, r3
 8002af0:	b2db      	uxtb	r3, r3
 8002af2:	3301      	adds	r3, #1
 8002af4:	f003 031f 	and.w	r3, r3, #31
 8002af8:	2b09      	cmp	r3, #9
 8002afa:	bf94      	ite	ls
 8002afc:	2301      	movls	r3, #1
 8002afe:	2300      	movhi	r3, #0
 8002b00:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d079      	beq.n	8002bfa <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d107      	bne.n	8002b22 <HAL_ADC_ConfigChannel+0x4c2>
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	0e9b      	lsrs	r3, r3, #26
 8002b18:	3301      	adds	r3, #1
 8002b1a:	069b      	lsls	r3, r3, #26
 8002b1c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002b20:	e015      	b.n	8002b4e <HAL_ADC_ConfigChannel+0x4ee>
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b2a:	fa93 f3a3 	rbit	r3, r3
 8002b2e:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8002b30:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002b32:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8002b34:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d101      	bne.n	8002b3e <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 8002b3a:	2320      	movs	r3, #32
 8002b3c:	e003      	b.n	8002b46 <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 8002b3e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002b40:	fab3 f383 	clz	r3, r3
 8002b44:	b2db      	uxtb	r3, r3
 8002b46:	3301      	adds	r3, #1
 8002b48:	069b      	lsls	r3, r3, #26
 8002b4a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d109      	bne.n	8002b6e <HAL_ADC_ConfigChannel+0x50e>
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	0e9b      	lsrs	r3, r3, #26
 8002b60:	3301      	adds	r3, #1
 8002b62:	f003 031f 	and.w	r3, r3, #31
 8002b66:	2101      	movs	r1, #1
 8002b68:	fa01 f303 	lsl.w	r3, r1, r3
 8002b6c:	e017      	b.n	8002b9e <HAL_ADC_ConfigChannel+0x53e>
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002b76:	fa93 f3a3 	rbit	r3, r3
 8002b7a:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8002b7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b7e:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8002b80:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d101      	bne.n	8002b8a <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8002b86:	2320      	movs	r3, #32
 8002b88:	e003      	b.n	8002b92 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8002b8a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002b8c:	fab3 f383 	clz	r3, r3
 8002b90:	b2db      	uxtb	r3, r3
 8002b92:	3301      	adds	r3, #1
 8002b94:	f003 031f 	and.w	r3, r3, #31
 8002b98:	2101      	movs	r1, #1
 8002b9a:	fa01 f303 	lsl.w	r3, r1, r3
 8002b9e:	ea42 0103 	orr.w	r1, r2, r3
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d10a      	bne.n	8002bc4 <HAL_ADC_ConfigChannel+0x564>
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	0e9b      	lsrs	r3, r3, #26
 8002bb4:	3301      	adds	r3, #1
 8002bb6:	f003 021f 	and.w	r2, r3, #31
 8002bba:	4613      	mov	r3, r2
 8002bbc:	005b      	lsls	r3, r3, #1
 8002bbe:	4413      	add	r3, r2
 8002bc0:	051b      	lsls	r3, r3, #20
 8002bc2:	e018      	b.n	8002bf6 <HAL_ADC_ConfigChannel+0x596>
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bcc:	fa93 f3a3 	rbit	r3, r3
 8002bd0:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8002bd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bd4:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8002bd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d101      	bne.n	8002be0 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 8002bdc:	2320      	movs	r3, #32
 8002bde:	e003      	b.n	8002be8 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 8002be0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002be2:	fab3 f383 	clz	r3, r3
 8002be6:	b2db      	uxtb	r3, r3
 8002be8:	3301      	adds	r3, #1
 8002bea:	f003 021f 	and.w	r2, r3, #31
 8002bee:	4613      	mov	r3, r2
 8002bf0:	005b      	lsls	r3, r3, #1
 8002bf2:	4413      	add	r3, r2
 8002bf4:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002bf6:	430b      	orrs	r3, r1
 8002bf8:	e081      	b.n	8002cfe <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d107      	bne.n	8002c16 <HAL_ADC_ConfigChannel+0x5b6>
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	0e9b      	lsrs	r3, r3, #26
 8002c0c:	3301      	adds	r3, #1
 8002c0e:	069b      	lsls	r3, r3, #26
 8002c10:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002c14:	e015      	b.n	8002c42 <HAL_ADC_ConfigChannel+0x5e2>
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c1e:	fa93 f3a3 	rbit	r3, r3
 8002c22:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8002c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c26:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8002c28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d101      	bne.n	8002c32 <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 8002c2e:	2320      	movs	r3, #32
 8002c30:	e003      	b.n	8002c3a <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 8002c32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c34:	fab3 f383 	clz	r3, r3
 8002c38:	b2db      	uxtb	r3, r3
 8002c3a:	3301      	adds	r3, #1
 8002c3c:	069b      	lsls	r3, r3, #26
 8002c3e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d109      	bne.n	8002c62 <HAL_ADC_ConfigChannel+0x602>
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	0e9b      	lsrs	r3, r3, #26
 8002c54:	3301      	adds	r3, #1
 8002c56:	f003 031f 	and.w	r3, r3, #31
 8002c5a:	2101      	movs	r1, #1
 8002c5c:	fa01 f303 	lsl.w	r3, r1, r3
 8002c60:	e017      	b.n	8002c92 <HAL_ADC_ConfigChannel+0x632>
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c68:	69fb      	ldr	r3, [r7, #28]
 8002c6a:	fa93 f3a3 	rbit	r3, r3
 8002c6e:	61bb      	str	r3, [r7, #24]
  return result;
 8002c70:	69bb      	ldr	r3, [r7, #24]
 8002c72:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002c74:	6a3b      	ldr	r3, [r7, #32]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d101      	bne.n	8002c7e <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 8002c7a:	2320      	movs	r3, #32
 8002c7c:	e003      	b.n	8002c86 <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 8002c7e:	6a3b      	ldr	r3, [r7, #32]
 8002c80:	fab3 f383 	clz	r3, r3
 8002c84:	b2db      	uxtb	r3, r3
 8002c86:	3301      	adds	r3, #1
 8002c88:	f003 031f 	and.w	r3, r3, #31
 8002c8c:	2101      	movs	r1, #1
 8002c8e:	fa01 f303 	lsl.w	r3, r1, r3
 8002c92:	ea42 0103 	orr.w	r1, r2, r3
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d10d      	bne.n	8002cbe <HAL_ADC_ConfigChannel+0x65e>
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	0e9b      	lsrs	r3, r3, #26
 8002ca8:	3301      	adds	r3, #1
 8002caa:	f003 021f 	and.w	r2, r3, #31
 8002cae:	4613      	mov	r3, r2
 8002cb0:	005b      	lsls	r3, r3, #1
 8002cb2:	4413      	add	r3, r2
 8002cb4:	3b1e      	subs	r3, #30
 8002cb6:	051b      	lsls	r3, r3, #20
 8002cb8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002cbc:	e01e      	b.n	8002cfc <HAL_ADC_ConfigChannel+0x69c>
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cc4:	693b      	ldr	r3, [r7, #16]
 8002cc6:	fa93 f3a3 	rbit	r3, r3
 8002cca:	60fb      	str	r3, [r7, #12]
  return result;
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002cd0:	697b      	ldr	r3, [r7, #20]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d104      	bne.n	8002ce0 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 8002cd6:	2320      	movs	r3, #32
 8002cd8:	e006      	b.n	8002ce8 <HAL_ADC_ConfigChannel+0x688>
 8002cda:	bf00      	nop
 8002cdc:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002ce0:	697b      	ldr	r3, [r7, #20]
 8002ce2:	fab3 f383 	clz	r3, r3
 8002ce6:	b2db      	uxtb	r3, r3
 8002ce8:	3301      	adds	r3, #1
 8002cea:	f003 021f 	and.w	r2, r3, #31
 8002cee:	4613      	mov	r3, r2
 8002cf0:	005b      	lsls	r3, r3, #1
 8002cf2:	4413      	add	r3, r2
 8002cf4:	3b1e      	subs	r3, #30
 8002cf6:	051b      	lsls	r3, r3, #20
 8002cf8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002cfc:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002cfe:	683a      	ldr	r2, [r7, #0]
 8002d00:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002d02:	4619      	mov	r1, r3
 8002d04:	f7ff f8a0 	bl	8001e48 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	681a      	ldr	r2, [r3, #0]
 8002d0c:	4b44      	ldr	r3, [pc, #272]	; (8002e20 <HAL_ADC_ConfigChannel+0x7c0>)
 8002d0e:	4013      	ands	r3, r2
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d07a      	beq.n	8002e0a <HAL_ADC_ConfigChannel+0x7aa>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002d14:	4843      	ldr	r0, [pc, #268]	; (8002e24 <HAL_ADC_ConfigChannel+0x7c4>)
 8002d16:	f7fe fff5 	bl	8001d04 <LL_ADC_GetCommonPathInternalCh>
 8002d1a:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	4a41      	ldr	r2, [pc, #260]	; (8002e28 <HAL_ADC_ConfigChannel+0x7c8>)
 8002d24:	4293      	cmp	r3, r2
 8002d26:	d12c      	bne.n	8002d82 <HAL_ADC_ConfigChannel+0x722>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002d28:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002d2c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d126      	bne.n	8002d82 <HAL_ADC_ConfigChannel+0x722>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	4a3c      	ldr	r2, [pc, #240]	; (8002e2c <HAL_ADC_ConfigChannel+0x7cc>)
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d004      	beq.n	8002d48 <HAL_ADC_ConfigChannel+0x6e8>
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	4a3b      	ldr	r2, [pc, #236]	; (8002e30 <HAL_ADC_ConfigChannel+0x7d0>)
 8002d44:	4293      	cmp	r3, r2
 8002d46:	d15d      	bne.n	8002e04 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002d48:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002d4c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002d50:	4619      	mov	r1, r3
 8002d52:	4834      	ldr	r0, [pc, #208]	; (8002e24 <HAL_ADC_ConfigChannel+0x7c4>)
 8002d54:	f7fe ffc3 	bl	8001cde <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002d58:	4b36      	ldr	r3, [pc, #216]	; (8002e34 <HAL_ADC_ConfigChannel+0x7d4>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	099b      	lsrs	r3, r3, #6
 8002d5e:	4a36      	ldr	r2, [pc, #216]	; (8002e38 <HAL_ADC_ConfigChannel+0x7d8>)
 8002d60:	fba2 2303 	umull	r2, r3, r2, r3
 8002d64:	099b      	lsrs	r3, r3, #6
 8002d66:	1c5a      	adds	r2, r3, #1
 8002d68:	4613      	mov	r3, r2
 8002d6a:	005b      	lsls	r3, r3, #1
 8002d6c:	4413      	add	r3, r2
 8002d6e:	009b      	lsls	r3, r3, #2
 8002d70:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002d72:	e002      	b.n	8002d7a <HAL_ADC_ConfigChannel+0x71a>
          {
            wait_loop_index--;
 8002d74:	68bb      	ldr	r3, [r7, #8]
 8002d76:	3b01      	subs	r3, #1
 8002d78:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002d7a:	68bb      	ldr	r3, [r7, #8]
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d1f9      	bne.n	8002d74 <HAL_ADC_ConfigChannel+0x714>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002d80:	e040      	b.n	8002e04 <HAL_ADC_ConfigChannel+0x7a4>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	4a2d      	ldr	r2, [pc, #180]	; (8002e3c <HAL_ADC_ConfigChannel+0x7dc>)
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	d118      	bne.n	8002dbe <HAL_ADC_ConfigChannel+0x75e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002d8c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002d90:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d112      	bne.n	8002dbe <HAL_ADC_ConfigChannel+0x75e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	4a23      	ldr	r2, [pc, #140]	; (8002e2c <HAL_ADC_ConfigChannel+0x7cc>)
 8002d9e:	4293      	cmp	r3, r2
 8002da0:	d004      	beq.n	8002dac <HAL_ADC_ConfigChannel+0x74c>
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	4a22      	ldr	r2, [pc, #136]	; (8002e30 <HAL_ADC_ConfigChannel+0x7d0>)
 8002da8:	4293      	cmp	r3, r2
 8002daa:	d12d      	bne.n	8002e08 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002dac:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002db0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002db4:	4619      	mov	r1, r3
 8002db6:	481b      	ldr	r0, [pc, #108]	; (8002e24 <HAL_ADC_ConfigChannel+0x7c4>)
 8002db8:	f7fe ff91 	bl	8001cde <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002dbc:	e024      	b.n	8002e08 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4a1f      	ldr	r2, [pc, #124]	; (8002e40 <HAL_ADC_ConfigChannel+0x7e0>)
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	d120      	bne.n	8002e0a <HAL_ADC_ConfigChannel+0x7aa>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002dc8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002dcc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d11a      	bne.n	8002e0a <HAL_ADC_ConfigChannel+0x7aa>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	4a14      	ldr	r2, [pc, #80]	; (8002e2c <HAL_ADC_ConfigChannel+0x7cc>)
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	d115      	bne.n	8002e0a <HAL_ADC_ConfigChannel+0x7aa>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002dde:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002de2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002de6:	4619      	mov	r1, r3
 8002de8:	480e      	ldr	r0, [pc, #56]	; (8002e24 <HAL_ADC_ConfigChannel+0x7c4>)
 8002dea:	f7fe ff78 	bl	8001cde <LL_ADC_SetCommonPathInternalCh>
 8002dee:	e00c      	b.n	8002e0a <HAL_ADC_ConfigChannel+0x7aa>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002df4:	f043 0220 	orr.w	r2, r3, #32
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002dfc:	2301      	movs	r3, #1
 8002dfe:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8002e02:	e002      	b.n	8002e0a <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002e04:	bf00      	nop
 8002e06:	e000      	b.n	8002e0a <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002e08:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002e12:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002e16:	4618      	mov	r0, r3
 8002e18:	37d8      	adds	r7, #216	; 0xd8
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	bd80      	pop	{r7, pc}
 8002e1e:	bf00      	nop
 8002e20:	80080000 	.word	0x80080000
 8002e24:	50040300 	.word	0x50040300
 8002e28:	c7520000 	.word	0xc7520000
 8002e2c:	50040000 	.word	0x50040000
 8002e30:	50040200 	.word	0x50040200
 8002e34:	20000000 	.word	0x20000000
 8002e38:	053e2d63 	.word	0x053e2d63
 8002e3c:	cb840000 	.word	0xcb840000
 8002e40:	80000001 	.word	0x80000001

08002e44 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b084      	sub	sp, #16
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	4618      	mov	r0, r3
 8002e56:	f7ff f8c5 	bl	8001fe4 <LL_ADC_IsEnabled>
 8002e5a:	4603      	mov	r3, r0
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d169      	bne.n	8002f34 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	689a      	ldr	r2, [r3, #8]
 8002e66:	4b36      	ldr	r3, [pc, #216]	; (8002f40 <ADC_Enable+0xfc>)
 8002e68:	4013      	ands	r3, r2
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d00d      	beq.n	8002e8a <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e72:	f043 0210 	orr.w	r2, r3, #16
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e7e:	f043 0201 	orr.w	r2, r3, #1
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8002e86:	2301      	movs	r3, #1
 8002e88:	e055      	b.n	8002f36 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	4618      	mov	r0, r3
 8002e90:	f7ff f894 	bl	8001fbc <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002e94:	482b      	ldr	r0, [pc, #172]	; (8002f44 <ADC_Enable+0x100>)
 8002e96:	f7fe ff35 	bl	8001d04 <LL_ADC_GetCommonPathInternalCh>
 8002e9a:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002e9c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d013      	beq.n	8002ecc <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002ea4:	4b28      	ldr	r3, [pc, #160]	; (8002f48 <ADC_Enable+0x104>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	099b      	lsrs	r3, r3, #6
 8002eaa:	4a28      	ldr	r2, [pc, #160]	; (8002f4c <ADC_Enable+0x108>)
 8002eac:	fba2 2303 	umull	r2, r3, r2, r3
 8002eb0:	099b      	lsrs	r3, r3, #6
 8002eb2:	1c5a      	adds	r2, r3, #1
 8002eb4:	4613      	mov	r3, r2
 8002eb6:	005b      	lsls	r3, r3, #1
 8002eb8:	4413      	add	r3, r2
 8002eba:	009b      	lsls	r3, r3, #2
 8002ebc:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002ebe:	e002      	b.n	8002ec6 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8002ec0:	68bb      	ldr	r3, [r7, #8]
 8002ec2:	3b01      	subs	r3, #1
 8002ec4:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002ec6:	68bb      	ldr	r3, [r7, #8]
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d1f9      	bne.n	8002ec0 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002ecc:	f7fe fec4 	bl	8001c58 <HAL_GetTick>
 8002ed0:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002ed2:	e028      	b.n	8002f26 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	4618      	mov	r0, r3
 8002eda:	f7ff f883 	bl	8001fe4 <LL_ADC_IsEnabled>
 8002ede:	4603      	mov	r3, r0
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d104      	bne.n	8002eee <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	4618      	mov	r0, r3
 8002eea:	f7ff f867 	bl	8001fbc <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002eee:	f7fe feb3 	bl	8001c58 <HAL_GetTick>
 8002ef2:	4602      	mov	r2, r0
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	1ad3      	subs	r3, r2, r3
 8002ef8:	2b02      	cmp	r3, #2
 8002efa:	d914      	bls.n	8002f26 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f003 0301 	and.w	r3, r3, #1
 8002f06:	2b01      	cmp	r3, #1
 8002f08:	d00d      	beq.n	8002f26 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f0e:	f043 0210 	orr.w	r2, r3, #16
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f1a:	f043 0201 	orr.w	r2, r3, #1
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8002f22:	2301      	movs	r3, #1
 8002f24:	e007      	b.n	8002f36 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f003 0301 	and.w	r3, r3, #1
 8002f30:	2b01      	cmp	r3, #1
 8002f32:	d1cf      	bne.n	8002ed4 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002f34:	2300      	movs	r3, #0
}
 8002f36:	4618      	mov	r0, r3
 8002f38:	3710      	adds	r7, #16
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	bd80      	pop	{r7, pc}
 8002f3e:	bf00      	nop
 8002f40:	8000003f 	.word	0x8000003f
 8002f44:	50040300 	.word	0x50040300
 8002f48:	20000000 	.word	0x20000000
 8002f4c:	053e2d63 	.word	0x053e2d63

08002f50 <LL_ADC_IsEnabled>:
{
 8002f50:	b480      	push	{r7}
 8002f52:	b083      	sub	sp, #12
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	689b      	ldr	r3, [r3, #8]
 8002f5c:	f003 0301 	and.w	r3, r3, #1
 8002f60:	2b01      	cmp	r3, #1
 8002f62:	d101      	bne.n	8002f68 <LL_ADC_IsEnabled+0x18>
 8002f64:	2301      	movs	r3, #1
 8002f66:	e000      	b.n	8002f6a <LL_ADC_IsEnabled+0x1a>
 8002f68:	2300      	movs	r3, #0
}
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	370c      	adds	r7, #12
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f74:	4770      	bx	lr

08002f76 <LL_ADC_REG_IsConversionOngoing>:
{
 8002f76:	b480      	push	{r7}
 8002f78:	b083      	sub	sp, #12
 8002f7a:	af00      	add	r7, sp, #0
 8002f7c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	689b      	ldr	r3, [r3, #8]
 8002f82:	f003 0304 	and.w	r3, r3, #4
 8002f86:	2b04      	cmp	r3, #4
 8002f88:	d101      	bne.n	8002f8e <LL_ADC_REG_IsConversionOngoing+0x18>
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	e000      	b.n	8002f90 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002f8e:	2300      	movs	r3, #0
}
 8002f90:	4618      	mov	r0, r3
 8002f92:	370c      	adds	r7, #12
 8002f94:	46bd      	mov	sp, r7
 8002f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9a:	4770      	bx	lr

08002f9c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8002f9c:	b590      	push	{r4, r7, lr}
 8002f9e:	b09f      	sub	sp, #124	; 0x7c
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
 8002fa4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002fb2:	2b01      	cmp	r3, #1
 8002fb4:	d101      	bne.n	8002fba <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002fb6:	2302      	movs	r3, #2
 8002fb8:	e093      	b.n	80030e2 <HAL_ADCEx_MultiModeConfigChannel+0x146>
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	2201      	movs	r2, #1
 8002fbe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	4a47      	ldr	r2, [pc, #284]	; (80030ec <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002fd0:	4293      	cmp	r3, r2
 8002fd2:	d102      	bne.n	8002fda <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002fd4:	4b46      	ldr	r3, [pc, #280]	; (80030f0 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002fd6:	60bb      	str	r3, [r7, #8]
 8002fd8:	e001      	b.n	8002fde <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002fda:	2300      	movs	r3, #0
 8002fdc:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8002fde:	68bb      	ldr	r3, [r7, #8]
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d10b      	bne.n	8002ffc <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fe8:	f043 0220 	orr.w	r2, r3, #32
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8002ff8:	2301      	movs	r3, #1
 8002ffa:	e072      	b.n	80030e2 <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8002ffc:	68bb      	ldr	r3, [r7, #8]
 8002ffe:	4618      	mov	r0, r3
 8003000:	f7ff ffb9 	bl	8002f76 <LL_ADC_REG_IsConversionOngoing>
 8003004:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	4618      	mov	r0, r3
 800300c:	f7ff ffb3 	bl	8002f76 <LL_ADC_REG_IsConversionOngoing>
 8003010:	4603      	mov	r3, r0
 8003012:	2b00      	cmp	r3, #0
 8003014:	d154      	bne.n	80030c0 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8003016:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003018:	2b00      	cmp	r3, #0
 800301a:	d151      	bne.n	80030c0 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800301c:	4b35      	ldr	r3, [pc, #212]	; (80030f4 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 800301e:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	2b00      	cmp	r3, #0
 8003026:	d02c      	beq.n	8003082 <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003028:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800302a:	689b      	ldr	r3, [r3, #8]
 800302c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	6859      	ldr	r1, [r3, #4]
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800303a:	035b      	lsls	r3, r3, #13
 800303c:	430b      	orrs	r3, r1
 800303e:	431a      	orrs	r2, r3
 8003040:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003042:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003044:	4829      	ldr	r0, [pc, #164]	; (80030ec <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8003046:	f7ff ff83 	bl	8002f50 <LL_ADC_IsEnabled>
 800304a:	4604      	mov	r4, r0
 800304c:	4828      	ldr	r0, [pc, #160]	; (80030f0 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800304e:	f7ff ff7f 	bl	8002f50 <LL_ADC_IsEnabled>
 8003052:	4603      	mov	r3, r0
 8003054:	431c      	orrs	r4, r3
 8003056:	4828      	ldr	r0, [pc, #160]	; (80030f8 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8003058:	f7ff ff7a 	bl	8002f50 <LL_ADC_IsEnabled>
 800305c:	4603      	mov	r3, r0
 800305e:	4323      	orrs	r3, r4
 8003060:	2b00      	cmp	r3, #0
 8003062:	d137      	bne.n	80030d4 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003064:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003066:	689b      	ldr	r3, [r3, #8]
 8003068:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800306c:	f023 030f 	bic.w	r3, r3, #15
 8003070:	683a      	ldr	r2, [r7, #0]
 8003072:	6811      	ldr	r1, [r2, #0]
 8003074:	683a      	ldr	r2, [r7, #0]
 8003076:	6892      	ldr	r2, [r2, #8]
 8003078:	430a      	orrs	r2, r1
 800307a:	431a      	orrs	r2, r3
 800307c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800307e:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003080:	e028      	b.n	80030d4 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003082:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003084:	689b      	ldr	r3, [r3, #8]
 8003086:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800308a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800308c:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800308e:	4817      	ldr	r0, [pc, #92]	; (80030ec <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8003090:	f7ff ff5e 	bl	8002f50 <LL_ADC_IsEnabled>
 8003094:	4604      	mov	r4, r0
 8003096:	4816      	ldr	r0, [pc, #88]	; (80030f0 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8003098:	f7ff ff5a 	bl	8002f50 <LL_ADC_IsEnabled>
 800309c:	4603      	mov	r3, r0
 800309e:	431c      	orrs	r4, r3
 80030a0:	4815      	ldr	r0, [pc, #84]	; (80030f8 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 80030a2:	f7ff ff55 	bl	8002f50 <LL_ADC_IsEnabled>
 80030a6:	4603      	mov	r3, r0
 80030a8:	4323      	orrs	r3, r4
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d112      	bne.n	80030d4 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80030ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030b0:	689b      	ldr	r3, [r3, #8]
 80030b2:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80030b6:	f023 030f 	bic.w	r3, r3, #15
 80030ba:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80030bc:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80030be:	e009      	b.n	80030d4 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030c4:	f043 0220 	orr.w	r2, r3, #32
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80030cc:	2301      	movs	r3, #1
 80030ce:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80030d2:	e000      	b.n	80030d6 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80030d4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	2200      	movs	r2, #0
 80030da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80030de:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 80030e2:	4618      	mov	r0, r3
 80030e4:	377c      	adds	r7, #124	; 0x7c
 80030e6:	46bd      	mov	sp, r7
 80030e8:	bd90      	pop	{r4, r7, pc}
 80030ea:	bf00      	nop
 80030ec:	50040000 	.word	0x50040000
 80030f0:	50040100 	.word	0x50040100
 80030f4:	50040300 	.word	0x50040300
 80030f8:	50040200 	.word	0x50040200

080030fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80030fc:	b480      	push	{r7}
 80030fe:	b085      	sub	sp, #20
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	f003 0307 	and.w	r3, r3, #7
 800310a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800310c:	4b0c      	ldr	r3, [pc, #48]	; (8003140 <__NVIC_SetPriorityGrouping+0x44>)
 800310e:	68db      	ldr	r3, [r3, #12]
 8003110:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003112:	68ba      	ldr	r2, [r7, #8]
 8003114:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003118:	4013      	ands	r3, r2
 800311a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003120:	68bb      	ldr	r3, [r7, #8]
 8003122:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003124:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003128:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800312c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800312e:	4a04      	ldr	r2, [pc, #16]	; (8003140 <__NVIC_SetPriorityGrouping+0x44>)
 8003130:	68bb      	ldr	r3, [r7, #8]
 8003132:	60d3      	str	r3, [r2, #12]
}
 8003134:	bf00      	nop
 8003136:	3714      	adds	r7, #20
 8003138:	46bd      	mov	sp, r7
 800313a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313e:	4770      	bx	lr
 8003140:	e000ed00 	.word	0xe000ed00

08003144 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003144:	b480      	push	{r7}
 8003146:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003148:	4b04      	ldr	r3, [pc, #16]	; (800315c <__NVIC_GetPriorityGrouping+0x18>)
 800314a:	68db      	ldr	r3, [r3, #12]
 800314c:	0a1b      	lsrs	r3, r3, #8
 800314e:	f003 0307 	and.w	r3, r3, #7
}
 8003152:	4618      	mov	r0, r3
 8003154:	46bd      	mov	sp, r7
 8003156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315a:	4770      	bx	lr
 800315c:	e000ed00 	.word	0xe000ed00

08003160 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003160:	b480      	push	{r7}
 8003162:	b083      	sub	sp, #12
 8003164:	af00      	add	r7, sp, #0
 8003166:	4603      	mov	r3, r0
 8003168:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800316a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800316e:	2b00      	cmp	r3, #0
 8003170:	db0b      	blt.n	800318a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003172:	79fb      	ldrb	r3, [r7, #7]
 8003174:	f003 021f 	and.w	r2, r3, #31
 8003178:	4907      	ldr	r1, [pc, #28]	; (8003198 <__NVIC_EnableIRQ+0x38>)
 800317a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800317e:	095b      	lsrs	r3, r3, #5
 8003180:	2001      	movs	r0, #1
 8003182:	fa00 f202 	lsl.w	r2, r0, r2
 8003186:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800318a:	bf00      	nop
 800318c:	370c      	adds	r7, #12
 800318e:	46bd      	mov	sp, r7
 8003190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003194:	4770      	bx	lr
 8003196:	bf00      	nop
 8003198:	e000e100 	.word	0xe000e100

0800319c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800319c:	b480      	push	{r7}
 800319e:	b083      	sub	sp, #12
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	4603      	mov	r3, r0
 80031a4:	6039      	str	r1, [r7, #0]
 80031a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80031a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	db0a      	blt.n	80031c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	b2da      	uxtb	r2, r3
 80031b4:	490c      	ldr	r1, [pc, #48]	; (80031e8 <__NVIC_SetPriority+0x4c>)
 80031b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031ba:	0112      	lsls	r2, r2, #4
 80031bc:	b2d2      	uxtb	r2, r2
 80031be:	440b      	add	r3, r1
 80031c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80031c4:	e00a      	b.n	80031dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	b2da      	uxtb	r2, r3
 80031ca:	4908      	ldr	r1, [pc, #32]	; (80031ec <__NVIC_SetPriority+0x50>)
 80031cc:	79fb      	ldrb	r3, [r7, #7]
 80031ce:	f003 030f 	and.w	r3, r3, #15
 80031d2:	3b04      	subs	r3, #4
 80031d4:	0112      	lsls	r2, r2, #4
 80031d6:	b2d2      	uxtb	r2, r2
 80031d8:	440b      	add	r3, r1
 80031da:	761a      	strb	r2, [r3, #24]
}
 80031dc:	bf00      	nop
 80031de:	370c      	adds	r7, #12
 80031e0:	46bd      	mov	sp, r7
 80031e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e6:	4770      	bx	lr
 80031e8:	e000e100 	.word	0xe000e100
 80031ec:	e000ed00 	.word	0xe000ed00

080031f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80031f0:	b480      	push	{r7}
 80031f2:	b089      	sub	sp, #36	; 0x24
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	60f8      	str	r0, [r7, #12]
 80031f8:	60b9      	str	r1, [r7, #8]
 80031fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	f003 0307 	and.w	r3, r3, #7
 8003202:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003204:	69fb      	ldr	r3, [r7, #28]
 8003206:	f1c3 0307 	rsb	r3, r3, #7
 800320a:	2b04      	cmp	r3, #4
 800320c:	bf28      	it	cs
 800320e:	2304      	movcs	r3, #4
 8003210:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003212:	69fb      	ldr	r3, [r7, #28]
 8003214:	3304      	adds	r3, #4
 8003216:	2b06      	cmp	r3, #6
 8003218:	d902      	bls.n	8003220 <NVIC_EncodePriority+0x30>
 800321a:	69fb      	ldr	r3, [r7, #28]
 800321c:	3b03      	subs	r3, #3
 800321e:	e000      	b.n	8003222 <NVIC_EncodePriority+0x32>
 8003220:	2300      	movs	r3, #0
 8003222:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003224:	f04f 32ff 	mov.w	r2, #4294967295
 8003228:	69bb      	ldr	r3, [r7, #24]
 800322a:	fa02 f303 	lsl.w	r3, r2, r3
 800322e:	43da      	mvns	r2, r3
 8003230:	68bb      	ldr	r3, [r7, #8]
 8003232:	401a      	ands	r2, r3
 8003234:	697b      	ldr	r3, [r7, #20]
 8003236:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003238:	f04f 31ff 	mov.w	r1, #4294967295
 800323c:	697b      	ldr	r3, [r7, #20]
 800323e:	fa01 f303 	lsl.w	r3, r1, r3
 8003242:	43d9      	mvns	r1, r3
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003248:	4313      	orrs	r3, r2
         );
}
 800324a:	4618      	mov	r0, r3
 800324c:	3724      	adds	r7, #36	; 0x24
 800324e:	46bd      	mov	sp, r7
 8003250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003254:	4770      	bx	lr
	...

08003258 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b082      	sub	sp, #8
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	3b01      	subs	r3, #1
 8003264:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003268:	d301      	bcc.n	800326e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800326a:	2301      	movs	r3, #1
 800326c:	e00f      	b.n	800328e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800326e:	4a0a      	ldr	r2, [pc, #40]	; (8003298 <SysTick_Config+0x40>)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	3b01      	subs	r3, #1
 8003274:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003276:	210f      	movs	r1, #15
 8003278:	f04f 30ff 	mov.w	r0, #4294967295
 800327c:	f7ff ff8e 	bl	800319c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003280:	4b05      	ldr	r3, [pc, #20]	; (8003298 <SysTick_Config+0x40>)
 8003282:	2200      	movs	r2, #0
 8003284:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003286:	4b04      	ldr	r3, [pc, #16]	; (8003298 <SysTick_Config+0x40>)
 8003288:	2207      	movs	r2, #7
 800328a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800328c:	2300      	movs	r3, #0
}
 800328e:	4618      	mov	r0, r3
 8003290:	3708      	adds	r7, #8
 8003292:	46bd      	mov	sp, r7
 8003294:	bd80      	pop	{r7, pc}
 8003296:	bf00      	nop
 8003298:	e000e010 	.word	0xe000e010

0800329c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	b082      	sub	sp, #8
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80032a4:	6878      	ldr	r0, [r7, #4]
 80032a6:	f7ff ff29 	bl	80030fc <__NVIC_SetPriorityGrouping>
}
 80032aa:	bf00      	nop
 80032ac:	3708      	adds	r7, #8
 80032ae:	46bd      	mov	sp, r7
 80032b0:	bd80      	pop	{r7, pc}

080032b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80032b2:	b580      	push	{r7, lr}
 80032b4:	b086      	sub	sp, #24
 80032b6:	af00      	add	r7, sp, #0
 80032b8:	4603      	mov	r3, r0
 80032ba:	60b9      	str	r1, [r7, #8]
 80032bc:	607a      	str	r2, [r7, #4]
 80032be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80032c0:	2300      	movs	r3, #0
 80032c2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80032c4:	f7ff ff3e 	bl	8003144 <__NVIC_GetPriorityGrouping>
 80032c8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80032ca:	687a      	ldr	r2, [r7, #4]
 80032cc:	68b9      	ldr	r1, [r7, #8]
 80032ce:	6978      	ldr	r0, [r7, #20]
 80032d0:	f7ff ff8e 	bl	80031f0 <NVIC_EncodePriority>
 80032d4:	4602      	mov	r2, r0
 80032d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80032da:	4611      	mov	r1, r2
 80032dc:	4618      	mov	r0, r3
 80032de:	f7ff ff5d 	bl	800319c <__NVIC_SetPriority>
}
 80032e2:	bf00      	nop
 80032e4:	3718      	adds	r7, #24
 80032e6:	46bd      	mov	sp, r7
 80032e8:	bd80      	pop	{r7, pc}

080032ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80032ea:	b580      	push	{r7, lr}
 80032ec:	b082      	sub	sp, #8
 80032ee:	af00      	add	r7, sp, #0
 80032f0:	4603      	mov	r3, r0
 80032f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80032f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032f8:	4618      	mov	r0, r3
 80032fa:	f7ff ff31 	bl	8003160 <__NVIC_EnableIRQ>
}
 80032fe:	bf00      	nop
 8003300:	3708      	adds	r7, #8
 8003302:	46bd      	mov	sp, r7
 8003304:	bd80      	pop	{r7, pc}

08003306 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003306:	b580      	push	{r7, lr}
 8003308:	b082      	sub	sp, #8
 800330a:	af00      	add	r7, sp, #0
 800330c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800330e:	6878      	ldr	r0, [r7, #4]
 8003310:	f7ff ffa2 	bl	8003258 <SysTick_Config>
 8003314:	4603      	mov	r3, r0
}
 8003316:	4618      	mov	r0, r3
 8003318:	3708      	adds	r7, #8
 800331a:	46bd      	mov	sp, r7
 800331c:	bd80      	pop	{r7, pc}
	...

08003320 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003320:	b480      	push	{r7}
 8003322:	b085      	sub	sp, #20
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2b00      	cmp	r3, #0
 800332c:	d101      	bne.n	8003332 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800332e:	2301      	movs	r3, #1
 8003330:	e098      	b.n	8003464 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	461a      	mov	r2, r3
 8003338:	4b4d      	ldr	r3, [pc, #308]	; (8003470 <HAL_DMA_Init+0x150>)
 800333a:	429a      	cmp	r2, r3
 800333c:	d80f      	bhi.n	800335e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	461a      	mov	r2, r3
 8003344:	4b4b      	ldr	r3, [pc, #300]	; (8003474 <HAL_DMA_Init+0x154>)
 8003346:	4413      	add	r3, r2
 8003348:	4a4b      	ldr	r2, [pc, #300]	; (8003478 <HAL_DMA_Init+0x158>)
 800334a:	fba2 2303 	umull	r2, r3, r2, r3
 800334e:	091b      	lsrs	r3, r3, #4
 8003350:	009a      	lsls	r2, r3, #2
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	4a48      	ldr	r2, [pc, #288]	; (800347c <HAL_DMA_Init+0x15c>)
 800335a:	641a      	str	r2, [r3, #64]	; 0x40
 800335c:	e00e      	b.n	800337c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	461a      	mov	r2, r3
 8003364:	4b46      	ldr	r3, [pc, #280]	; (8003480 <HAL_DMA_Init+0x160>)
 8003366:	4413      	add	r3, r2
 8003368:	4a43      	ldr	r2, [pc, #268]	; (8003478 <HAL_DMA_Init+0x158>)
 800336a:	fba2 2303 	umull	r2, r3, r2, r3
 800336e:	091b      	lsrs	r3, r3, #4
 8003370:	009a      	lsls	r2, r3, #2
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	4a42      	ldr	r2, [pc, #264]	; (8003484 <HAL_DMA_Init+0x164>)
 800337a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2202      	movs	r2, #2
 8003380:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003392:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003396:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80033a0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	691b      	ldr	r3, [r3, #16]
 80033a6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80033ac:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	699b      	ldr	r3, [r3, #24]
 80033b2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80033b8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6a1b      	ldr	r3, [r3, #32]
 80033be:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80033c0:	68fa      	ldr	r2, [r7, #12]
 80033c2:	4313      	orrs	r3, r2
 80033c4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	68fa      	ldr	r2, [r7, #12]
 80033cc:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	689b      	ldr	r3, [r3, #8]
 80033d2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80033d6:	d039      	beq.n	800344c <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033dc:	4a27      	ldr	r2, [pc, #156]	; (800347c <HAL_DMA_Init+0x15c>)
 80033de:	4293      	cmp	r3, r2
 80033e0:	d11a      	bne.n	8003418 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80033e2:	4b29      	ldr	r3, [pc, #164]	; (8003488 <HAL_DMA_Init+0x168>)
 80033e4:	681a      	ldr	r2, [r3, #0]
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033ea:	f003 031c 	and.w	r3, r3, #28
 80033ee:	210f      	movs	r1, #15
 80033f0:	fa01 f303 	lsl.w	r3, r1, r3
 80033f4:	43db      	mvns	r3, r3
 80033f6:	4924      	ldr	r1, [pc, #144]	; (8003488 <HAL_DMA_Init+0x168>)
 80033f8:	4013      	ands	r3, r2
 80033fa:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80033fc:	4b22      	ldr	r3, [pc, #136]	; (8003488 <HAL_DMA_Init+0x168>)
 80033fe:	681a      	ldr	r2, [r3, #0]
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6859      	ldr	r1, [r3, #4]
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003408:	f003 031c 	and.w	r3, r3, #28
 800340c:	fa01 f303 	lsl.w	r3, r1, r3
 8003410:	491d      	ldr	r1, [pc, #116]	; (8003488 <HAL_DMA_Init+0x168>)
 8003412:	4313      	orrs	r3, r2
 8003414:	600b      	str	r3, [r1, #0]
 8003416:	e019      	b.n	800344c <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003418:	4b1c      	ldr	r3, [pc, #112]	; (800348c <HAL_DMA_Init+0x16c>)
 800341a:	681a      	ldr	r2, [r3, #0]
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003420:	f003 031c 	and.w	r3, r3, #28
 8003424:	210f      	movs	r1, #15
 8003426:	fa01 f303 	lsl.w	r3, r1, r3
 800342a:	43db      	mvns	r3, r3
 800342c:	4917      	ldr	r1, [pc, #92]	; (800348c <HAL_DMA_Init+0x16c>)
 800342e:	4013      	ands	r3, r2
 8003430:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003432:	4b16      	ldr	r3, [pc, #88]	; (800348c <HAL_DMA_Init+0x16c>)
 8003434:	681a      	ldr	r2, [r3, #0]
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6859      	ldr	r1, [r3, #4]
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800343e:	f003 031c 	and.w	r3, r3, #28
 8003442:	fa01 f303 	lsl.w	r3, r1, r3
 8003446:	4911      	ldr	r1, [pc, #68]	; (800348c <HAL_DMA_Init+0x16c>)
 8003448:	4313      	orrs	r3, r2
 800344a:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2200      	movs	r2, #0
 8003450:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	2201      	movs	r2, #1
 8003456:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2200      	movs	r2, #0
 800345e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003462:	2300      	movs	r3, #0
}
 8003464:	4618      	mov	r0, r3
 8003466:	3714      	adds	r7, #20
 8003468:	46bd      	mov	sp, r7
 800346a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346e:	4770      	bx	lr
 8003470:	40020407 	.word	0x40020407
 8003474:	bffdfff8 	.word	0xbffdfff8
 8003478:	cccccccd 	.word	0xcccccccd
 800347c:	40020000 	.word	0x40020000
 8003480:	bffdfbf8 	.word	0xbffdfbf8
 8003484:	40020400 	.word	0x40020400
 8003488:	400200a8 	.word	0x400200a8
 800348c:	400204a8 	.word	0x400204a8

08003490 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003490:	b580      	push	{r7, lr}
 8003492:	b086      	sub	sp, #24
 8003494:	af00      	add	r7, sp, #0
 8003496:	60f8      	str	r0, [r7, #12]
 8003498:	60b9      	str	r1, [r7, #8]
 800349a:	607a      	str	r2, [r7, #4]
 800349c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800349e:	2300      	movs	r3, #0
 80034a0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80034a8:	2b01      	cmp	r3, #1
 80034aa:	d101      	bne.n	80034b0 <HAL_DMA_Start_IT+0x20>
 80034ac:	2302      	movs	r3, #2
 80034ae:	e04b      	b.n	8003548 <HAL_DMA_Start_IT+0xb8>
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	2201      	movs	r2, #1
 80034b4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80034be:	b2db      	uxtb	r3, r3
 80034c0:	2b01      	cmp	r3, #1
 80034c2:	d13a      	bne.n	800353a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	2202      	movs	r2, #2
 80034c8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	2200      	movs	r2, #0
 80034d0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	681a      	ldr	r2, [r3, #0]
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f022 0201 	bic.w	r2, r2, #1
 80034e0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	687a      	ldr	r2, [r7, #4]
 80034e6:	68b9      	ldr	r1, [r7, #8]
 80034e8:	68f8      	ldr	r0, [r7, #12]
 80034ea:	f000 f95f 	bl	80037ac <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d008      	beq.n	8003508 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	681a      	ldr	r2, [r3, #0]
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f042 020e 	orr.w	r2, r2, #14
 8003504:	601a      	str	r2, [r3, #0]
 8003506:	e00f      	b.n	8003528 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	681a      	ldr	r2, [r3, #0]
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f022 0204 	bic.w	r2, r2, #4
 8003516:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	681a      	ldr	r2, [r3, #0]
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f042 020a 	orr.w	r2, r2, #10
 8003526:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	681a      	ldr	r2, [r3, #0]
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f042 0201 	orr.w	r2, r2, #1
 8003536:	601a      	str	r2, [r3, #0]
 8003538:	e005      	b.n	8003546 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	2200      	movs	r2, #0
 800353e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003542:	2302      	movs	r3, #2
 8003544:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003546:	7dfb      	ldrb	r3, [r7, #23]
}
 8003548:	4618      	mov	r0, r3
 800354a:	3718      	adds	r7, #24
 800354c:	46bd      	mov	sp, r7
 800354e:	bd80      	pop	{r7, pc}

08003550 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003550:	b480      	push	{r7}
 8003552:	b085      	sub	sp, #20
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003558:	2300      	movs	r3, #0
 800355a:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003562:	b2db      	uxtb	r3, r3
 8003564:	2b02      	cmp	r3, #2
 8003566:	d008      	beq.n	800357a <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2204      	movs	r2, #4
 800356c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	2200      	movs	r2, #0
 8003572:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003576:	2301      	movs	r3, #1
 8003578:	e022      	b.n	80035c0 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	681a      	ldr	r2, [r3, #0]
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f022 020e 	bic.w	r2, r2, #14
 8003588:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	681a      	ldr	r2, [r3, #0]
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f022 0201 	bic.w	r2, r2, #1
 8003598:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800359e:	f003 021c 	and.w	r2, r3, #28
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035a6:	2101      	movs	r1, #1
 80035a8:	fa01 f202 	lsl.w	r2, r1, r2
 80035ac:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	2201      	movs	r2, #1
 80035b2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2200      	movs	r2, #0
 80035ba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 80035be:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80035c0:	4618      	mov	r0, r3
 80035c2:	3714      	adds	r7, #20
 80035c4:	46bd      	mov	sp, r7
 80035c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ca:	4770      	bx	lr

080035cc <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	b084      	sub	sp, #16
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80035d4:	2300      	movs	r3, #0
 80035d6:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80035de:	b2db      	uxtb	r3, r3
 80035e0:	2b02      	cmp	r3, #2
 80035e2:	d005      	beq.n	80035f0 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2204      	movs	r2, #4
 80035e8:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80035ea:	2301      	movs	r3, #1
 80035ec:	73fb      	strb	r3, [r7, #15]
 80035ee:	e029      	b.n	8003644 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	681a      	ldr	r2, [r3, #0]
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f022 020e 	bic.w	r2, r2, #14
 80035fe:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	681a      	ldr	r2, [r3, #0]
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f022 0201 	bic.w	r2, r2, #1
 800360e:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003614:	f003 021c 	and.w	r2, r3, #28
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800361c:	2101      	movs	r1, #1
 800361e:	fa01 f202 	lsl.w	r2, r1, r2
 8003622:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2201      	movs	r2, #1
 8003628:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2200      	movs	r2, #0
 8003630:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003638:	2b00      	cmp	r3, #0
 800363a:	d003      	beq.n	8003644 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003640:	6878      	ldr	r0, [r7, #4]
 8003642:	4798      	blx	r3
    }
  }
  return status;
 8003644:	7bfb      	ldrb	r3, [r7, #15]
}
 8003646:	4618      	mov	r0, r3
 8003648:	3710      	adds	r7, #16
 800364a:	46bd      	mov	sp, r7
 800364c:	bd80      	pop	{r7, pc}

0800364e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800364e:	b580      	push	{r7, lr}
 8003650:	b084      	sub	sp, #16
 8003652:	af00      	add	r7, sp, #0
 8003654:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800366a:	f003 031c 	and.w	r3, r3, #28
 800366e:	2204      	movs	r2, #4
 8003670:	409a      	lsls	r2, r3
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	4013      	ands	r3, r2
 8003676:	2b00      	cmp	r3, #0
 8003678:	d026      	beq.n	80036c8 <HAL_DMA_IRQHandler+0x7a>
 800367a:	68bb      	ldr	r3, [r7, #8]
 800367c:	f003 0304 	and.w	r3, r3, #4
 8003680:	2b00      	cmp	r3, #0
 8003682:	d021      	beq.n	80036c8 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f003 0320 	and.w	r3, r3, #32
 800368e:	2b00      	cmp	r3, #0
 8003690:	d107      	bne.n	80036a2 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	681a      	ldr	r2, [r3, #0]
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f022 0204 	bic.w	r2, r2, #4
 80036a0:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036a6:	f003 021c 	and.w	r2, r3, #28
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ae:	2104      	movs	r1, #4
 80036b0:	fa01 f202 	lsl.w	r2, r1, r2
 80036b4:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d071      	beq.n	80037a2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036c2:	6878      	ldr	r0, [r7, #4]
 80036c4:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80036c6:	e06c      	b.n	80037a2 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036cc:	f003 031c 	and.w	r3, r3, #28
 80036d0:	2202      	movs	r2, #2
 80036d2:	409a      	lsls	r2, r3
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	4013      	ands	r3, r2
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d02e      	beq.n	800373a <HAL_DMA_IRQHandler+0xec>
 80036dc:	68bb      	ldr	r3, [r7, #8]
 80036de:	f003 0302 	and.w	r3, r3, #2
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d029      	beq.n	800373a <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f003 0320 	and.w	r3, r3, #32
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d10b      	bne.n	800370c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	681a      	ldr	r2, [r3, #0]
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f022 020a 	bic.w	r2, r2, #10
 8003702:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2201      	movs	r2, #1
 8003708:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003710:	f003 021c 	and.w	r2, r3, #28
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003718:	2102      	movs	r1, #2
 800371a:	fa01 f202 	lsl.w	r2, r1, r2
 800371e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2200      	movs	r2, #0
 8003724:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800372c:	2b00      	cmp	r3, #0
 800372e:	d038      	beq.n	80037a2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003734:	6878      	ldr	r0, [r7, #4]
 8003736:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003738:	e033      	b.n	80037a2 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800373e:	f003 031c 	and.w	r3, r3, #28
 8003742:	2208      	movs	r2, #8
 8003744:	409a      	lsls	r2, r3
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	4013      	ands	r3, r2
 800374a:	2b00      	cmp	r3, #0
 800374c:	d02a      	beq.n	80037a4 <HAL_DMA_IRQHandler+0x156>
 800374e:	68bb      	ldr	r3, [r7, #8]
 8003750:	f003 0308 	and.w	r3, r3, #8
 8003754:	2b00      	cmp	r3, #0
 8003756:	d025      	beq.n	80037a4 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	681a      	ldr	r2, [r3, #0]
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f022 020e 	bic.w	r2, r2, #14
 8003766:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800376c:	f003 021c 	and.w	r2, r3, #28
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003774:	2101      	movs	r1, #1
 8003776:	fa01 f202 	lsl.w	r2, r1, r2
 800377a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2201      	movs	r2, #1
 8003780:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	2201      	movs	r2, #1
 8003786:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	2200      	movs	r2, #0
 800378e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003796:	2b00      	cmp	r3, #0
 8003798:	d004      	beq.n	80037a4 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800379e:	6878      	ldr	r0, [r7, #4]
 80037a0:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80037a2:	bf00      	nop
 80037a4:	bf00      	nop
}
 80037a6:	3710      	adds	r7, #16
 80037a8:	46bd      	mov	sp, r7
 80037aa:	bd80      	pop	{r7, pc}

080037ac <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80037ac:	b480      	push	{r7}
 80037ae:	b085      	sub	sp, #20
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	60f8      	str	r0, [r7, #12]
 80037b4:	60b9      	str	r1, [r7, #8]
 80037b6:	607a      	str	r2, [r7, #4]
 80037b8:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037be:	f003 021c 	and.w	r2, r3, #28
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037c6:	2101      	movs	r1, #1
 80037c8:	fa01 f202 	lsl.w	r2, r1, r2
 80037cc:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	683a      	ldr	r2, [r7, #0]
 80037d4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	689b      	ldr	r3, [r3, #8]
 80037da:	2b10      	cmp	r3, #16
 80037dc:	d108      	bne.n	80037f0 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	687a      	ldr	r2, [r7, #4]
 80037e4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	68ba      	ldr	r2, [r7, #8]
 80037ec:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80037ee:	e007      	b.n	8003800 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	68ba      	ldr	r2, [r7, #8]
 80037f6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	687a      	ldr	r2, [r7, #4]
 80037fe:	60da      	str	r2, [r3, #12]
}
 8003800:	bf00      	nop
 8003802:	3714      	adds	r7, #20
 8003804:	46bd      	mov	sp, r7
 8003806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380a:	4770      	bx	lr

0800380c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800380c:	b480      	push	{r7}
 800380e:	b087      	sub	sp, #28
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
 8003814:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003816:	2300      	movs	r3, #0
 8003818:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800381a:	e17f      	b.n	8003b1c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	681a      	ldr	r2, [r3, #0]
 8003820:	2101      	movs	r1, #1
 8003822:	697b      	ldr	r3, [r7, #20]
 8003824:	fa01 f303 	lsl.w	r3, r1, r3
 8003828:	4013      	ands	r3, r2
 800382a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	2b00      	cmp	r3, #0
 8003830:	f000 8171 	beq.w	8003b16 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003834:	683b      	ldr	r3, [r7, #0]
 8003836:	685b      	ldr	r3, [r3, #4]
 8003838:	f003 0303 	and.w	r3, r3, #3
 800383c:	2b01      	cmp	r3, #1
 800383e:	d005      	beq.n	800384c <HAL_GPIO_Init+0x40>
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	685b      	ldr	r3, [r3, #4]
 8003844:	f003 0303 	and.w	r3, r3, #3
 8003848:	2b02      	cmp	r3, #2
 800384a:	d130      	bne.n	80038ae <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	689b      	ldr	r3, [r3, #8]
 8003850:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003852:	697b      	ldr	r3, [r7, #20]
 8003854:	005b      	lsls	r3, r3, #1
 8003856:	2203      	movs	r2, #3
 8003858:	fa02 f303 	lsl.w	r3, r2, r3
 800385c:	43db      	mvns	r3, r3
 800385e:	693a      	ldr	r2, [r7, #16]
 8003860:	4013      	ands	r3, r2
 8003862:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003864:	683b      	ldr	r3, [r7, #0]
 8003866:	68da      	ldr	r2, [r3, #12]
 8003868:	697b      	ldr	r3, [r7, #20]
 800386a:	005b      	lsls	r3, r3, #1
 800386c:	fa02 f303 	lsl.w	r3, r2, r3
 8003870:	693a      	ldr	r2, [r7, #16]
 8003872:	4313      	orrs	r3, r2
 8003874:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	693a      	ldr	r2, [r7, #16]
 800387a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	685b      	ldr	r3, [r3, #4]
 8003880:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003882:	2201      	movs	r2, #1
 8003884:	697b      	ldr	r3, [r7, #20]
 8003886:	fa02 f303 	lsl.w	r3, r2, r3
 800388a:	43db      	mvns	r3, r3
 800388c:	693a      	ldr	r2, [r7, #16]
 800388e:	4013      	ands	r3, r2
 8003890:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	685b      	ldr	r3, [r3, #4]
 8003896:	091b      	lsrs	r3, r3, #4
 8003898:	f003 0201 	and.w	r2, r3, #1
 800389c:	697b      	ldr	r3, [r7, #20]
 800389e:	fa02 f303 	lsl.w	r3, r2, r3
 80038a2:	693a      	ldr	r2, [r7, #16]
 80038a4:	4313      	orrs	r3, r2
 80038a6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	693a      	ldr	r2, [r7, #16]
 80038ac:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80038ae:	683b      	ldr	r3, [r7, #0]
 80038b0:	685b      	ldr	r3, [r3, #4]
 80038b2:	f003 0303 	and.w	r3, r3, #3
 80038b6:	2b03      	cmp	r3, #3
 80038b8:	d118      	bne.n	80038ec <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038be:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80038c0:	2201      	movs	r2, #1
 80038c2:	697b      	ldr	r3, [r7, #20]
 80038c4:	fa02 f303 	lsl.w	r3, r2, r3
 80038c8:	43db      	mvns	r3, r3
 80038ca:	693a      	ldr	r2, [r7, #16]
 80038cc:	4013      	ands	r3, r2
 80038ce:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	685b      	ldr	r3, [r3, #4]
 80038d4:	08db      	lsrs	r3, r3, #3
 80038d6:	f003 0201 	and.w	r2, r3, #1
 80038da:	697b      	ldr	r3, [r7, #20]
 80038dc:	fa02 f303 	lsl.w	r3, r2, r3
 80038e0:	693a      	ldr	r2, [r7, #16]
 80038e2:	4313      	orrs	r3, r2
 80038e4:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	693a      	ldr	r2, [r7, #16]
 80038ea:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	685b      	ldr	r3, [r3, #4]
 80038f0:	f003 0303 	and.w	r3, r3, #3
 80038f4:	2b03      	cmp	r3, #3
 80038f6:	d017      	beq.n	8003928 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	68db      	ldr	r3, [r3, #12]
 80038fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80038fe:	697b      	ldr	r3, [r7, #20]
 8003900:	005b      	lsls	r3, r3, #1
 8003902:	2203      	movs	r2, #3
 8003904:	fa02 f303 	lsl.w	r3, r2, r3
 8003908:	43db      	mvns	r3, r3
 800390a:	693a      	ldr	r2, [r7, #16]
 800390c:	4013      	ands	r3, r2
 800390e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	689a      	ldr	r2, [r3, #8]
 8003914:	697b      	ldr	r3, [r7, #20]
 8003916:	005b      	lsls	r3, r3, #1
 8003918:	fa02 f303 	lsl.w	r3, r2, r3
 800391c:	693a      	ldr	r2, [r7, #16]
 800391e:	4313      	orrs	r3, r2
 8003920:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	693a      	ldr	r2, [r7, #16]
 8003926:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003928:	683b      	ldr	r3, [r7, #0]
 800392a:	685b      	ldr	r3, [r3, #4]
 800392c:	f003 0303 	and.w	r3, r3, #3
 8003930:	2b02      	cmp	r3, #2
 8003932:	d123      	bne.n	800397c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003934:	697b      	ldr	r3, [r7, #20]
 8003936:	08da      	lsrs	r2, r3, #3
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	3208      	adds	r2, #8
 800393c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003940:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003942:	697b      	ldr	r3, [r7, #20]
 8003944:	f003 0307 	and.w	r3, r3, #7
 8003948:	009b      	lsls	r3, r3, #2
 800394a:	220f      	movs	r2, #15
 800394c:	fa02 f303 	lsl.w	r3, r2, r3
 8003950:	43db      	mvns	r3, r3
 8003952:	693a      	ldr	r2, [r7, #16]
 8003954:	4013      	ands	r3, r2
 8003956:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	691a      	ldr	r2, [r3, #16]
 800395c:	697b      	ldr	r3, [r7, #20]
 800395e:	f003 0307 	and.w	r3, r3, #7
 8003962:	009b      	lsls	r3, r3, #2
 8003964:	fa02 f303 	lsl.w	r3, r2, r3
 8003968:	693a      	ldr	r2, [r7, #16]
 800396a:	4313      	orrs	r3, r2
 800396c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800396e:	697b      	ldr	r3, [r7, #20]
 8003970:	08da      	lsrs	r2, r3, #3
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	3208      	adds	r2, #8
 8003976:	6939      	ldr	r1, [r7, #16]
 8003978:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003982:	697b      	ldr	r3, [r7, #20]
 8003984:	005b      	lsls	r3, r3, #1
 8003986:	2203      	movs	r2, #3
 8003988:	fa02 f303 	lsl.w	r3, r2, r3
 800398c:	43db      	mvns	r3, r3
 800398e:	693a      	ldr	r2, [r7, #16]
 8003990:	4013      	ands	r3, r2
 8003992:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	685b      	ldr	r3, [r3, #4]
 8003998:	f003 0203 	and.w	r2, r3, #3
 800399c:	697b      	ldr	r3, [r7, #20]
 800399e:	005b      	lsls	r3, r3, #1
 80039a0:	fa02 f303 	lsl.w	r3, r2, r3
 80039a4:	693a      	ldr	r2, [r7, #16]
 80039a6:	4313      	orrs	r3, r2
 80039a8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	693a      	ldr	r2, [r7, #16]
 80039ae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	685b      	ldr	r3, [r3, #4]
 80039b4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	f000 80ac 	beq.w	8003b16 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80039be:	4b5f      	ldr	r3, [pc, #380]	; (8003b3c <HAL_GPIO_Init+0x330>)
 80039c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80039c2:	4a5e      	ldr	r2, [pc, #376]	; (8003b3c <HAL_GPIO_Init+0x330>)
 80039c4:	f043 0301 	orr.w	r3, r3, #1
 80039c8:	6613      	str	r3, [r2, #96]	; 0x60
 80039ca:	4b5c      	ldr	r3, [pc, #368]	; (8003b3c <HAL_GPIO_Init+0x330>)
 80039cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80039ce:	f003 0301 	and.w	r3, r3, #1
 80039d2:	60bb      	str	r3, [r7, #8]
 80039d4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80039d6:	4a5a      	ldr	r2, [pc, #360]	; (8003b40 <HAL_GPIO_Init+0x334>)
 80039d8:	697b      	ldr	r3, [r7, #20]
 80039da:	089b      	lsrs	r3, r3, #2
 80039dc:	3302      	adds	r3, #2
 80039de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039e2:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80039e4:	697b      	ldr	r3, [r7, #20]
 80039e6:	f003 0303 	and.w	r3, r3, #3
 80039ea:	009b      	lsls	r3, r3, #2
 80039ec:	220f      	movs	r2, #15
 80039ee:	fa02 f303 	lsl.w	r3, r2, r3
 80039f2:	43db      	mvns	r3, r3
 80039f4:	693a      	ldr	r2, [r7, #16]
 80039f6:	4013      	ands	r3, r2
 80039f8:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003a00:	d025      	beq.n	8003a4e <HAL_GPIO_Init+0x242>
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	4a4f      	ldr	r2, [pc, #316]	; (8003b44 <HAL_GPIO_Init+0x338>)
 8003a06:	4293      	cmp	r3, r2
 8003a08:	d01f      	beq.n	8003a4a <HAL_GPIO_Init+0x23e>
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	4a4e      	ldr	r2, [pc, #312]	; (8003b48 <HAL_GPIO_Init+0x33c>)
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d019      	beq.n	8003a46 <HAL_GPIO_Init+0x23a>
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	4a4d      	ldr	r2, [pc, #308]	; (8003b4c <HAL_GPIO_Init+0x340>)
 8003a16:	4293      	cmp	r3, r2
 8003a18:	d013      	beq.n	8003a42 <HAL_GPIO_Init+0x236>
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	4a4c      	ldr	r2, [pc, #304]	; (8003b50 <HAL_GPIO_Init+0x344>)
 8003a1e:	4293      	cmp	r3, r2
 8003a20:	d00d      	beq.n	8003a3e <HAL_GPIO_Init+0x232>
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	4a4b      	ldr	r2, [pc, #300]	; (8003b54 <HAL_GPIO_Init+0x348>)
 8003a26:	4293      	cmp	r3, r2
 8003a28:	d007      	beq.n	8003a3a <HAL_GPIO_Init+0x22e>
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	4a4a      	ldr	r2, [pc, #296]	; (8003b58 <HAL_GPIO_Init+0x34c>)
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	d101      	bne.n	8003a36 <HAL_GPIO_Init+0x22a>
 8003a32:	2306      	movs	r3, #6
 8003a34:	e00c      	b.n	8003a50 <HAL_GPIO_Init+0x244>
 8003a36:	2307      	movs	r3, #7
 8003a38:	e00a      	b.n	8003a50 <HAL_GPIO_Init+0x244>
 8003a3a:	2305      	movs	r3, #5
 8003a3c:	e008      	b.n	8003a50 <HAL_GPIO_Init+0x244>
 8003a3e:	2304      	movs	r3, #4
 8003a40:	e006      	b.n	8003a50 <HAL_GPIO_Init+0x244>
 8003a42:	2303      	movs	r3, #3
 8003a44:	e004      	b.n	8003a50 <HAL_GPIO_Init+0x244>
 8003a46:	2302      	movs	r3, #2
 8003a48:	e002      	b.n	8003a50 <HAL_GPIO_Init+0x244>
 8003a4a:	2301      	movs	r3, #1
 8003a4c:	e000      	b.n	8003a50 <HAL_GPIO_Init+0x244>
 8003a4e:	2300      	movs	r3, #0
 8003a50:	697a      	ldr	r2, [r7, #20]
 8003a52:	f002 0203 	and.w	r2, r2, #3
 8003a56:	0092      	lsls	r2, r2, #2
 8003a58:	4093      	lsls	r3, r2
 8003a5a:	693a      	ldr	r2, [r7, #16]
 8003a5c:	4313      	orrs	r3, r2
 8003a5e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003a60:	4937      	ldr	r1, [pc, #220]	; (8003b40 <HAL_GPIO_Init+0x334>)
 8003a62:	697b      	ldr	r3, [r7, #20]
 8003a64:	089b      	lsrs	r3, r3, #2
 8003a66:	3302      	adds	r3, #2
 8003a68:	693a      	ldr	r2, [r7, #16]
 8003a6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003a6e:	4b3b      	ldr	r3, [pc, #236]	; (8003b5c <HAL_GPIO_Init+0x350>)
 8003a70:	689b      	ldr	r3, [r3, #8]
 8003a72:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	43db      	mvns	r3, r3
 8003a78:	693a      	ldr	r2, [r7, #16]
 8003a7a:	4013      	ands	r3, r2
 8003a7c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003a7e:	683b      	ldr	r3, [r7, #0]
 8003a80:	685b      	ldr	r3, [r3, #4]
 8003a82:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d003      	beq.n	8003a92 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8003a8a:	693a      	ldr	r2, [r7, #16]
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	4313      	orrs	r3, r2
 8003a90:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003a92:	4a32      	ldr	r2, [pc, #200]	; (8003b5c <HAL_GPIO_Init+0x350>)
 8003a94:	693b      	ldr	r3, [r7, #16]
 8003a96:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003a98:	4b30      	ldr	r3, [pc, #192]	; (8003b5c <HAL_GPIO_Init+0x350>)
 8003a9a:	68db      	ldr	r3, [r3, #12]
 8003a9c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	43db      	mvns	r3, r3
 8003aa2:	693a      	ldr	r2, [r7, #16]
 8003aa4:	4013      	ands	r3, r2
 8003aa6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	685b      	ldr	r3, [r3, #4]
 8003aac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d003      	beq.n	8003abc <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003ab4:	693a      	ldr	r2, [r7, #16]
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	4313      	orrs	r3, r2
 8003aba:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003abc:	4a27      	ldr	r2, [pc, #156]	; (8003b5c <HAL_GPIO_Init+0x350>)
 8003abe:	693b      	ldr	r3, [r7, #16]
 8003ac0:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003ac2:	4b26      	ldr	r3, [pc, #152]	; (8003b5c <HAL_GPIO_Init+0x350>)
 8003ac4:	685b      	ldr	r3, [r3, #4]
 8003ac6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	43db      	mvns	r3, r3
 8003acc:	693a      	ldr	r2, [r7, #16]
 8003ace:	4013      	ands	r3, r2
 8003ad0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003ad2:	683b      	ldr	r3, [r7, #0]
 8003ad4:	685b      	ldr	r3, [r3, #4]
 8003ad6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d003      	beq.n	8003ae6 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8003ade:	693a      	ldr	r2, [r7, #16]
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	4313      	orrs	r3, r2
 8003ae4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003ae6:	4a1d      	ldr	r2, [pc, #116]	; (8003b5c <HAL_GPIO_Init+0x350>)
 8003ae8:	693b      	ldr	r3, [r7, #16]
 8003aea:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003aec:	4b1b      	ldr	r3, [pc, #108]	; (8003b5c <HAL_GPIO_Init+0x350>)
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	43db      	mvns	r3, r3
 8003af6:	693a      	ldr	r2, [r7, #16]
 8003af8:	4013      	ands	r3, r2
 8003afa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003afc:	683b      	ldr	r3, [r7, #0]
 8003afe:	685b      	ldr	r3, [r3, #4]
 8003b00:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d003      	beq.n	8003b10 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8003b08:	693a      	ldr	r2, [r7, #16]
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	4313      	orrs	r3, r2
 8003b0e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003b10:	4a12      	ldr	r2, [pc, #72]	; (8003b5c <HAL_GPIO_Init+0x350>)
 8003b12:	693b      	ldr	r3, [r7, #16]
 8003b14:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003b16:	697b      	ldr	r3, [r7, #20]
 8003b18:	3301      	adds	r3, #1
 8003b1a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003b1c:	683b      	ldr	r3, [r7, #0]
 8003b1e:	681a      	ldr	r2, [r3, #0]
 8003b20:	697b      	ldr	r3, [r7, #20]
 8003b22:	fa22 f303 	lsr.w	r3, r2, r3
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	f47f ae78 	bne.w	800381c <HAL_GPIO_Init+0x10>
  }
}
 8003b2c:	bf00      	nop
 8003b2e:	bf00      	nop
 8003b30:	371c      	adds	r7, #28
 8003b32:	46bd      	mov	sp, r7
 8003b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b38:	4770      	bx	lr
 8003b3a:	bf00      	nop
 8003b3c:	40021000 	.word	0x40021000
 8003b40:	40010000 	.word	0x40010000
 8003b44:	48000400 	.word	0x48000400
 8003b48:	48000800 	.word	0x48000800
 8003b4c:	48000c00 	.word	0x48000c00
 8003b50:	48001000 	.word	0x48001000
 8003b54:	48001400 	.word	0x48001400
 8003b58:	48001800 	.word	0x48001800
 8003b5c:	40010400 	.word	0x40010400

08003b60 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003b60:	b480      	push	{r7}
 8003b62:	b083      	sub	sp, #12
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
 8003b68:	460b      	mov	r3, r1
 8003b6a:	807b      	strh	r3, [r7, #2]
 8003b6c:	4613      	mov	r3, r2
 8003b6e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003b70:	787b      	ldrb	r3, [r7, #1]
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d003      	beq.n	8003b7e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003b76:	887a      	ldrh	r2, [r7, #2]
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003b7c:	e002      	b.n	8003b84 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003b7e:	887a      	ldrh	r2, [r7, #2]
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003b84:	bf00      	nop
 8003b86:	370c      	adds	r7, #12
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8e:	4770      	bx	lr

08003b90 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003b90:	b480      	push	{r7}
 8003b92:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003b94:	4b04      	ldr	r3, [pc, #16]	; (8003ba8 <HAL_PWREx_GetVoltageRange+0x18>)
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba4:	4770      	bx	lr
 8003ba6:	bf00      	nop
 8003ba8:	40007000 	.word	0x40007000

08003bac <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003bac:	b480      	push	{r7}
 8003bae:	b085      	sub	sp, #20
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003bba:	d130      	bne.n	8003c1e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003bbc:	4b23      	ldr	r3, [pc, #140]	; (8003c4c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003bc4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003bc8:	d038      	beq.n	8003c3c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003bca:	4b20      	ldr	r3, [pc, #128]	; (8003c4c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003bd2:	4a1e      	ldr	r2, [pc, #120]	; (8003c4c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003bd4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003bd8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003bda:	4b1d      	ldr	r3, [pc, #116]	; (8003c50 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	2232      	movs	r2, #50	; 0x32
 8003be0:	fb02 f303 	mul.w	r3, r2, r3
 8003be4:	4a1b      	ldr	r2, [pc, #108]	; (8003c54 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003be6:	fba2 2303 	umull	r2, r3, r2, r3
 8003bea:	0c9b      	lsrs	r3, r3, #18
 8003bec:	3301      	adds	r3, #1
 8003bee:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003bf0:	e002      	b.n	8003bf8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	3b01      	subs	r3, #1
 8003bf6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003bf8:	4b14      	ldr	r3, [pc, #80]	; (8003c4c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003bfa:	695b      	ldr	r3, [r3, #20]
 8003bfc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c00:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c04:	d102      	bne.n	8003c0c <HAL_PWREx_ControlVoltageScaling+0x60>
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d1f2      	bne.n	8003bf2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003c0c:	4b0f      	ldr	r3, [pc, #60]	; (8003c4c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003c0e:	695b      	ldr	r3, [r3, #20]
 8003c10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c14:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c18:	d110      	bne.n	8003c3c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003c1a:	2303      	movs	r3, #3
 8003c1c:	e00f      	b.n	8003c3e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003c1e:	4b0b      	ldr	r3, [pc, #44]	; (8003c4c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003c26:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c2a:	d007      	beq.n	8003c3c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003c2c:	4b07      	ldr	r3, [pc, #28]	; (8003c4c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003c34:	4a05      	ldr	r2, [pc, #20]	; (8003c4c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003c36:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003c3a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003c3c:	2300      	movs	r3, #0
}
 8003c3e:	4618      	mov	r0, r3
 8003c40:	3714      	adds	r7, #20
 8003c42:	46bd      	mov	sp, r7
 8003c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c48:	4770      	bx	lr
 8003c4a:	bf00      	nop
 8003c4c:	40007000 	.word	0x40007000
 8003c50:	20000000 	.word	0x20000000
 8003c54:	431bde83 	.word	0x431bde83

08003c58 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b088      	sub	sp, #32
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d101      	bne.n	8003c6a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003c66:	2301      	movs	r3, #1
 8003c68:	e3ca      	b.n	8004400 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003c6a:	4b97      	ldr	r3, [pc, #604]	; (8003ec8 <HAL_RCC_OscConfig+0x270>)
 8003c6c:	689b      	ldr	r3, [r3, #8]
 8003c6e:	f003 030c 	and.w	r3, r3, #12
 8003c72:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003c74:	4b94      	ldr	r3, [pc, #592]	; (8003ec8 <HAL_RCC_OscConfig+0x270>)
 8003c76:	68db      	ldr	r3, [r3, #12]
 8003c78:	f003 0303 	and.w	r3, r3, #3
 8003c7c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f003 0310 	and.w	r3, r3, #16
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	f000 80e4 	beq.w	8003e54 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003c8c:	69bb      	ldr	r3, [r7, #24]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d007      	beq.n	8003ca2 <HAL_RCC_OscConfig+0x4a>
 8003c92:	69bb      	ldr	r3, [r7, #24]
 8003c94:	2b0c      	cmp	r3, #12
 8003c96:	f040 808b 	bne.w	8003db0 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003c9a:	697b      	ldr	r3, [r7, #20]
 8003c9c:	2b01      	cmp	r3, #1
 8003c9e:	f040 8087 	bne.w	8003db0 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003ca2:	4b89      	ldr	r3, [pc, #548]	; (8003ec8 <HAL_RCC_OscConfig+0x270>)
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f003 0302 	and.w	r3, r3, #2
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d005      	beq.n	8003cba <HAL_RCC_OscConfig+0x62>
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	699b      	ldr	r3, [r3, #24]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d101      	bne.n	8003cba <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8003cb6:	2301      	movs	r3, #1
 8003cb8:	e3a2      	b.n	8004400 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6a1a      	ldr	r2, [r3, #32]
 8003cbe:	4b82      	ldr	r3, [pc, #520]	; (8003ec8 <HAL_RCC_OscConfig+0x270>)
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f003 0308 	and.w	r3, r3, #8
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d004      	beq.n	8003cd4 <HAL_RCC_OscConfig+0x7c>
 8003cca:	4b7f      	ldr	r3, [pc, #508]	; (8003ec8 <HAL_RCC_OscConfig+0x270>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003cd2:	e005      	b.n	8003ce0 <HAL_RCC_OscConfig+0x88>
 8003cd4:	4b7c      	ldr	r3, [pc, #496]	; (8003ec8 <HAL_RCC_OscConfig+0x270>)
 8003cd6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003cda:	091b      	lsrs	r3, r3, #4
 8003cdc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003ce0:	4293      	cmp	r3, r2
 8003ce2:	d223      	bcs.n	8003d2c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6a1b      	ldr	r3, [r3, #32]
 8003ce8:	4618      	mov	r0, r3
 8003cea:	f000 fd55 	bl	8004798 <RCC_SetFlashLatencyFromMSIRange>
 8003cee:	4603      	mov	r3, r0
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d001      	beq.n	8003cf8 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003cf4:	2301      	movs	r3, #1
 8003cf6:	e383      	b.n	8004400 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003cf8:	4b73      	ldr	r3, [pc, #460]	; (8003ec8 <HAL_RCC_OscConfig+0x270>)
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	4a72      	ldr	r2, [pc, #456]	; (8003ec8 <HAL_RCC_OscConfig+0x270>)
 8003cfe:	f043 0308 	orr.w	r3, r3, #8
 8003d02:	6013      	str	r3, [r2, #0]
 8003d04:	4b70      	ldr	r3, [pc, #448]	; (8003ec8 <HAL_RCC_OscConfig+0x270>)
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	6a1b      	ldr	r3, [r3, #32]
 8003d10:	496d      	ldr	r1, [pc, #436]	; (8003ec8 <HAL_RCC_OscConfig+0x270>)
 8003d12:	4313      	orrs	r3, r2
 8003d14:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003d16:	4b6c      	ldr	r3, [pc, #432]	; (8003ec8 <HAL_RCC_OscConfig+0x270>)
 8003d18:	685b      	ldr	r3, [r3, #4]
 8003d1a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	69db      	ldr	r3, [r3, #28]
 8003d22:	021b      	lsls	r3, r3, #8
 8003d24:	4968      	ldr	r1, [pc, #416]	; (8003ec8 <HAL_RCC_OscConfig+0x270>)
 8003d26:	4313      	orrs	r3, r2
 8003d28:	604b      	str	r3, [r1, #4]
 8003d2a:	e025      	b.n	8003d78 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003d2c:	4b66      	ldr	r3, [pc, #408]	; (8003ec8 <HAL_RCC_OscConfig+0x270>)
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	4a65      	ldr	r2, [pc, #404]	; (8003ec8 <HAL_RCC_OscConfig+0x270>)
 8003d32:	f043 0308 	orr.w	r3, r3, #8
 8003d36:	6013      	str	r3, [r2, #0]
 8003d38:	4b63      	ldr	r3, [pc, #396]	; (8003ec8 <HAL_RCC_OscConfig+0x270>)
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	6a1b      	ldr	r3, [r3, #32]
 8003d44:	4960      	ldr	r1, [pc, #384]	; (8003ec8 <HAL_RCC_OscConfig+0x270>)
 8003d46:	4313      	orrs	r3, r2
 8003d48:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003d4a:	4b5f      	ldr	r3, [pc, #380]	; (8003ec8 <HAL_RCC_OscConfig+0x270>)
 8003d4c:	685b      	ldr	r3, [r3, #4]
 8003d4e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	69db      	ldr	r3, [r3, #28]
 8003d56:	021b      	lsls	r3, r3, #8
 8003d58:	495b      	ldr	r1, [pc, #364]	; (8003ec8 <HAL_RCC_OscConfig+0x270>)
 8003d5a:	4313      	orrs	r3, r2
 8003d5c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003d5e:	69bb      	ldr	r3, [r7, #24]
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d109      	bne.n	8003d78 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6a1b      	ldr	r3, [r3, #32]
 8003d68:	4618      	mov	r0, r3
 8003d6a:	f000 fd15 	bl	8004798 <RCC_SetFlashLatencyFromMSIRange>
 8003d6e:	4603      	mov	r3, r0
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d001      	beq.n	8003d78 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003d74:	2301      	movs	r3, #1
 8003d76:	e343      	b.n	8004400 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003d78:	f000 fc4a 	bl	8004610 <HAL_RCC_GetSysClockFreq>
 8003d7c:	4602      	mov	r2, r0
 8003d7e:	4b52      	ldr	r3, [pc, #328]	; (8003ec8 <HAL_RCC_OscConfig+0x270>)
 8003d80:	689b      	ldr	r3, [r3, #8]
 8003d82:	091b      	lsrs	r3, r3, #4
 8003d84:	f003 030f 	and.w	r3, r3, #15
 8003d88:	4950      	ldr	r1, [pc, #320]	; (8003ecc <HAL_RCC_OscConfig+0x274>)
 8003d8a:	5ccb      	ldrb	r3, [r1, r3]
 8003d8c:	f003 031f 	and.w	r3, r3, #31
 8003d90:	fa22 f303 	lsr.w	r3, r2, r3
 8003d94:	4a4e      	ldr	r2, [pc, #312]	; (8003ed0 <HAL_RCC_OscConfig+0x278>)
 8003d96:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003d98:	4b4e      	ldr	r3, [pc, #312]	; (8003ed4 <HAL_RCC_OscConfig+0x27c>)
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	f7fd ff0b 	bl	8001bb8 <HAL_InitTick>
 8003da2:	4603      	mov	r3, r0
 8003da4:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003da6:	7bfb      	ldrb	r3, [r7, #15]
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d052      	beq.n	8003e52 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003dac:	7bfb      	ldrb	r3, [r7, #15]
 8003dae:	e327      	b.n	8004400 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	699b      	ldr	r3, [r3, #24]
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d032      	beq.n	8003e1e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003db8:	4b43      	ldr	r3, [pc, #268]	; (8003ec8 <HAL_RCC_OscConfig+0x270>)
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	4a42      	ldr	r2, [pc, #264]	; (8003ec8 <HAL_RCC_OscConfig+0x270>)
 8003dbe:	f043 0301 	orr.w	r3, r3, #1
 8003dc2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003dc4:	f7fd ff48 	bl	8001c58 <HAL_GetTick>
 8003dc8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003dca:	e008      	b.n	8003dde <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003dcc:	f7fd ff44 	bl	8001c58 <HAL_GetTick>
 8003dd0:	4602      	mov	r2, r0
 8003dd2:	693b      	ldr	r3, [r7, #16]
 8003dd4:	1ad3      	subs	r3, r2, r3
 8003dd6:	2b02      	cmp	r3, #2
 8003dd8:	d901      	bls.n	8003dde <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8003dda:	2303      	movs	r3, #3
 8003ddc:	e310      	b.n	8004400 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003dde:	4b3a      	ldr	r3, [pc, #232]	; (8003ec8 <HAL_RCC_OscConfig+0x270>)
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f003 0302 	and.w	r3, r3, #2
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d0f0      	beq.n	8003dcc <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003dea:	4b37      	ldr	r3, [pc, #220]	; (8003ec8 <HAL_RCC_OscConfig+0x270>)
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	4a36      	ldr	r2, [pc, #216]	; (8003ec8 <HAL_RCC_OscConfig+0x270>)
 8003df0:	f043 0308 	orr.w	r3, r3, #8
 8003df4:	6013      	str	r3, [r2, #0]
 8003df6:	4b34      	ldr	r3, [pc, #208]	; (8003ec8 <HAL_RCC_OscConfig+0x270>)
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	6a1b      	ldr	r3, [r3, #32]
 8003e02:	4931      	ldr	r1, [pc, #196]	; (8003ec8 <HAL_RCC_OscConfig+0x270>)
 8003e04:	4313      	orrs	r3, r2
 8003e06:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003e08:	4b2f      	ldr	r3, [pc, #188]	; (8003ec8 <HAL_RCC_OscConfig+0x270>)
 8003e0a:	685b      	ldr	r3, [r3, #4]
 8003e0c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	69db      	ldr	r3, [r3, #28]
 8003e14:	021b      	lsls	r3, r3, #8
 8003e16:	492c      	ldr	r1, [pc, #176]	; (8003ec8 <HAL_RCC_OscConfig+0x270>)
 8003e18:	4313      	orrs	r3, r2
 8003e1a:	604b      	str	r3, [r1, #4]
 8003e1c:	e01a      	b.n	8003e54 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003e1e:	4b2a      	ldr	r3, [pc, #168]	; (8003ec8 <HAL_RCC_OscConfig+0x270>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	4a29      	ldr	r2, [pc, #164]	; (8003ec8 <HAL_RCC_OscConfig+0x270>)
 8003e24:	f023 0301 	bic.w	r3, r3, #1
 8003e28:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003e2a:	f7fd ff15 	bl	8001c58 <HAL_GetTick>
 8003e2e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003e30:	e008      	b.n	8003e44 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003e32:	f7fd ff11 	bl	8001c58 <HAL_GetTick>
 8003e36:	4602      	mov	r2, r0
 8003e38:	693b      	ldr	r3, [r7, #16]
 8003e3a:	1ad3      	subs	r3, r2, r3
 8003e3c:	2b02      	cmp	r3, #2
 8003e3e:	d901      	bls.n	8003e44 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003e40:	2303      	movs	r3, #3
 8003e42:	e2dd      	b.n	8004400 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003e44:	4b20      	ldr	r3, [pc, #128]	; (8003ec8 <HAL_RCC_OscConfig+0x270>)
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f003 0302 	and.w	r3, r3, #2
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d1f0      	bne.n	8003e32 <HAL_RCC_OscConfig+0x1da>
 8003e50:	e000      	b.n	8003e54 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003e52:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f003 0301 	and.w	r3, r3, #1
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d074      	beq.n	8003f4a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003e60:	69bb      	ldr	r3, [r7, #24]
 8003e62:	2b08      	cmp	r3, #8
 8003e64:	d005      	beq.n	8003e72 <HAL_RCC_OscConfig+0x21a>
 8003e66:	69bb      	ldr	r3, [r7, #24]
 8003e68:	2b0c      	cmp	r3, #12
 8003e6a:	d10e      	bne.n	8003e8a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003e6c:	697b      	ldr	r3, [r7, #20]
 8003e6e:	2b03      	cmp	r3, #3
 8003e70:	d10b      	bne.n	8003e8a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e72:	4b15      	ldr	r3, [pc, #84]	; (8003ec8 <HAL_RCC_OscConfig+0x270>)
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d064      	beq.n	8003f48 <HAL_RCC_OscConfig+0x2f0>
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	685b      	ldr	r3, [r3, #4]
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d160      	bne.n	8003f48 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003e86:	2301      	movs	r3, #1
 8003e88:	e2ba      	b.n	8004400 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	685b      	ldr	r3, [r3, #4]
 8003e8e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e92:	d106      	bne.n	8003ea2 <HAL_RCC_OscConfig+0x24a>
 8003e94:	4b0c      	ldr	r3, [pc, #48]	; (8003ec8 <HAL_RCC_OscConfig+0x270>)
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	4a0b      	ldr	r2, [pc, #44]	; (8003ec8 <HAL_RCC_OscConfig+0x270>)
 8003e9a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e9e:	6013      	str	r3, [r2, #0]
 8003ea0:	e026      	b.n	8003ef0 <HAL_RCC_OscConfig+0x298>
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	685b      	ldr	r3, [r3, #4]
 8003ea6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003eaa:	d115      	bne.n	8003ed8 <HAL_RCC_OscConfig+0x280>
 8003eac:	4b06      	ldr	r3, [pc, #24]	; (8003ec8 <HAL_RCC_OscConfig+0x270>)
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	4a05      	ldr	r2, [pc, #20]	; (8003ec8 <HAL_RCC_OscConfig+0x270>)
 8003eb2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003eb6:	6013      	str	r3, [r2, #0]
 8003eb8:	4b03      	ldr	r3, [pc, #12]	; (8003ec8 <HAL_RCC_OscConfig+0x270>)
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	4a02      	ldr	r2, [pc, #8]	; (8003ec8 <HAL_RCC_OscConfig+0x270>)
 8003ebe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ec2:	6013      	str	r3, [r2, #0]
 8003ec4:	e014      	b.n	8003ef0 <HAL_RCC_OscConfig+0x298>
 8003ec6:	bf00      	nop
 8003ec8:	40021000 	.word	0x40021000
 8003ecc:	0800a9bc 	.word	0x0800a9bc
 8003ed0:	20000000 	.word	0x20000000
 8003ed4:	20000004 	.word	0x20000004
 8003ed8:	4ba0      	ldr	r3, [pc, #640]	; (800415c <HAL_RCC_OscConfig+0x504>)
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	4a9f      	ldr	r2, [pc, #636]	; (800415c <HAL_RCC_OscConfig+0x504>)
 8003ede:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ee2:	6013      	str	r3, [r2, #0]
 8003ee4:	4b9d      	ldr	r3, [pc, #628]	; (800415c <HAL_RCC_OscConfig+0x504>)
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	4a9c      	ldr	r2, [pc, #624]	; (800415c <HAL_RCC_OscConfig+0x504>)
 8003eea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003eee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	685b      	ldr	r3, [r3, #4]
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d013      	beq.n	8003f20 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ef8:	f7fd feae 	bl	8001c58 <HAL_GetTick>
 8003efc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003efe:	e008      	b.n	8003f12 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f00:	f7fd feaa 	bl	8001c58 <HAL_GetTick>
 8003f04:	4602      	mov	r2, r0
 8003f06:	693b      	ldr	r3, [r7, #16]
 8003f08:	1ad3      	subs	r3, r2, r3
 8003f0a:	2b64      	cmp	r3, #100	; 0x64
 8003f0c:	d901      	bls.n	8003f12 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003f0e:	2303      	movs	r3, #3
 8003f10:	e276      	b.n	8004400 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003f12:	4b92      	ldr	r3, [pc, #584]	; (800415c <HAL_RCC_OscConfig+0x504>)
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d0f0      	beq.n	8003f00 <HAL_RCC_OscConfig+0x2a8>
 8003f1e:	e014      	b.n	8003f4a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f20:	f7fd fe9a 	bl	8001c58 <HAL_GetTick>
 8003f24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003f26:	e008      	b.n	8003f3a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f28:	f7fd fe96 	bl	8001c58 <HAL_GetTick>
 8003f2c:	4602      	mov	r2, r0
 8003f2e:	693b      	ldr	r3, [r7, #16]
 8003f30:	1ad3      	subs	r3, r2, r3
 8003f32:	2b64      	cmp	r3, #100	; 0x64
 8003f34:	d901      	bls.n	8003f3a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003f36:	2303      	movs	r3, #3
 8003f38:	e262      	b.n	8004400 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003f3a:	4b88      	ldr	r3, [pc, #544]	; (800415c <HAL_RCC_OscConfig+0x504>)
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d1f0      	bne.n	8003f28 <HAL_RCC_OscConfig+0x2d0>
 8003f46:	e000      	b.n	8003f4a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f48:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f003 0302 	and.w	r3, r3, #2
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d060      	beq.n	8004018 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003f56:	69bb      	ldr	r3, [r7, #24]
 8003f58:	2b04      	cmp	r3, #4
 8003f5a:	d005      	beq.n	8003f68 <HAL_RCC_OscConfig+0x310>
 8003f5c:	69bb      	ldr	r3, [r7, #24]
 8003f5e:	2b0c      	cmp	r3, #12
 8003f60:	d119      	bne.n	8003f96 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003f62:	697b      	ldr	r3, [r7, #20]
 8003f64:	2b02      	cmp	r3, #2
 8003f66:	d116      	bne.n	8003f96 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003f68:	4b7c      	ldr	r3, [pc, #496]	; (800415c <HAL_RCC_OscConfig+0x504>)
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d005      	beq.n	8003f80 <HAL_RCC_OscConfig+0x328>
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	68db      	ldr	r3, [r3, #12]
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d101      	bne.n	8003f80 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003f7c:	2301      	movs	r3, #1
 8003f7e:	e23f      	b.n	8004400 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f80:	4b76      	ldr	r3, [pc, #472]	; (800415c <HAL_RCC_OscConfig+0x504>)
 8003f82:	685b      	ldr	r3, [r3, #4]
 8003f84:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	691b      	ldr	r3, [r3, #16]
 8003f8c:	061b      	lsls	r3, r3, #24
 8003f8e:	4973      	ldr	r1, [pc, #460]	; (800415c <HAL_RCC_OscConfig+0x504>)
 8003f90:	4313      	orrs	r3, r2
 8003f92:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003f94:	e040      	b.n	8004018 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	68db      	ldr	r3, [r3, #12]
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d023      	beq.n	8003fe6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003f9e:	4b6f      	ldr	r3, [pc, #444]	; (800415c <HAL_RCC_OscConfig+0x504>)
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	4a6e      	ldr	r2, [pc, #440]	; (800415c <HAL_RCC_OscConfig+0x504>)
 8003fa4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003fa8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003faa:	f7fd fe55 	bl	8001c58 <HAL_GetTick>
 8003fae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003fb0:	e008      	b.n	8003fc4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003fb2:	f7fd fe51 	bl	8001c58 <HAL_GetTick>
 8003fb6:	4602      	mov	r2, r0
 8003fb8:	693b      	ldr	r3, [r7, #16]
 8003fba:	1ad3      	subs	r3, r2, r3
 8003fbc:	2b02      	cmp	r3, #2
 8003fbe:	d901      	bls.n	8003fc4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003fc0:	2303      	movs	r3, #3
 8003fc2:	e21d      	b.n	8004400 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003fc4:	4b65      	ldr	r3, [pc, #404]	; (800415c <HAL_RCC_OscConfig+0x504>)
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d0f0      	beq.n	8003fb2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003fd0:	4b62      	ldr	r3, [pc, #392]	; (800415c <HAL_RCC_OscConfig+0x504>)
 8003fd2:	685b      	ldr	r3, [r3, #4]
 8003fd4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	691b      	ldr	r3, [r3, #16]
 8003fdc:	061b      	lsls	r3, r3, #24
 8003fde:	495f      	ldr	r1, [pc, #380]	; (800415c <HAL_RCC_OscConfig+0x504>)
 8003fe0:	4313      	orrs	r3, r2
 8003fe2:	604b      	str	r3, [r1, #4]
 8003fe4:	e018      	b.n	8004018 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003fe6:	4b5d      	ldr	r3, [pc, #372]	; (800415c <HAL_RCC_OscConfig+0x504>)
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	4a5c      	ldr	r2, [pc, #368]	; (800415c <HAL_RCC_OscConfig+0x504>)
 8003fec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003ff0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ff2:	f7fd fe31 	bl	8001c58 <HAL_GetTick>
 8003ff6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003ff8:	e008      	b.n	800400c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ffa:	f7fd fe2d 	bl	8001c58 <HAL_GetTick>
 8003ffe:	4602      	mov	r2, r0
 8004000:	693b      	ldr	r3, [r7, #16]
 8004002:	1ad3      	subs	r3, r2, r3
 8004004:	2b02      	cmp	r3, #2
 8004006:	d901      	bls.n	800400c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004008:	2303      	movs	r3, #3
 800400a:	e1f9      	b.n	8004400 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800400c:	4b53      	ldr	r3, [pc, #332]	; (800415c <HAL_RCC_OscConfig+0x504>)
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004014:	2b00      	cmp	r3, #0
 8004016:	d1f0      	bne.n	8003ffa <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f003 0308 	and.w	r3, r3, #8
 8004020:	2b00      	cmp	r3, #0
 8004022:	d03c      	beq.n	800409e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	695b      	ldr	r3, [r3, #20]
 8004028:	2b00      	cmp	r3, #0
 800402a:	d01c      	beq.n	8004066 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800402c:	4b4b      	ldr	r3, [pc, #300]	; (800415c <HAL_RCC_OscConfig+0x504>)
 800402e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004032:	4a4a      	ldr	r2, [pc, #296]	; (800415c <HAL_RCC_OscConfig+0x504>)
 8004034:	f043 0301 	orr.w	r3, r3, #1
 8004038:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800403c:	f7fd fe0c 	bl	8001c58 <HAL_GetTick>
 8004040:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004042:	e008      	b.n	8004056 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004044:	f7fd fe08 	bl	8001c58 <HAL_GetTick>
 8004048:	4602      	mov	r2, r0
 800404a:	693b      	ldr	r3, [r7, #16]
 800404c:	1ad3      	subs	r3, r2, r3
 800404e:	2b02      	cmp	r3, #2
 8004050:	d901      	bls.n	8004056 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004052:	2303      	movs	r3, #3
 8004054:	e1d4      	b.n	8004400 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004056:	4b41      	ldr	r3, [pc, #260]	; (800415c <HAL_RCC_OscConfig+0x504>)
 8004058:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800405c:	f003 0302 	and.w	r3, r3, #2
 8004060:	2b00      	cmp	r3, #0
 8004062:	d0ef      	beq.n	8004044 <HAL_RCC_OscConfig+0x3ec>
 8004064:	e01b      	b.n	800409e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004066:	4b3d      	ldr	r3, [pc, #244]	; (800415c <HAL_RCC_OscConfig+0x504>)
 8004068:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800406c:	4a3b      	ldr	r2, [pc, #236]	; (800415c <HAL_RCC_OscConfig+0x504>)
 800406e:	f023 0301 	bic.w	r3, r3, #1
 8004072:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004076:	f7fd fdef 	bl	8001c58 <HAL_GetTick>
 800407a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800407c:	e008      	b.n	8004090 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800407e:	f7fd fdeb 	bl	8001c58 <HAL_GetTick>
 8004082:	4602      	mov	r2, r0
 8004084:	693b      	ldr	r3, [r7, #16]
 8004086:	1ad3      	subs	r3, r2, r3
 8004088:	2b02      	cmp	r3, #2
 800408a:	d901      	bls.n	8004090 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800408c:	2303      	movs	r3, #3
 800408e:	e1b7      	b.n	8004400 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004090:	4b32      	ldr	r3, [pc, #200]	; (800415c <HAL_RCC_OscConfig+0x504>)
 8004092:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004096:	f003 0302 	and.w	r3, r3, #2
 800409a:	2b00      	cmp	r3, #0
 800409c:	d1ef      	bne.n	800407e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f003 0304 	and.w	r3, r3, #4
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	f000 80a6 	beq.w	80041f8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80040ac:	2300      	movs	r3, #0
 80040ae:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80040b0:	4b2a      	ldr	r3, [pc, #168]	; (800415c <HAL_RCC_OscConfig+0x504>)
 80040b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d10d      	bne.n	80040d8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80040bc:	4b27      	ldr	r3, [pc, #156]	; (800415c <HAL_RCC_OscConfig+0x504>)
 80040be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040c0:	4a26      	ldr	r2, [pc, #152]	; (800415c <HAL_RCC_OscConfig+0x504>)
 80040c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040c6:	6593      	str	r3, [r2, #88]	; 0x58
 80040c8:	4b24      	ldr	r3, [pc, #144]	; (800415c <HAL_RCC_OscConfig+0x504>)
 80040ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040d0:	60bb      	str	r3, [r7, #8]
 80040d2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80040d4:	2301      	movs	r3, #1
 80040d6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80040d8:	4b21      	ldr	r3, [pc, #132]	; (8004160 <HAL_RCC_OscConfig+0x508>)
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d118      	bne.n	8004116 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80040e4:	4b1e      	ldr	r3, [pc, #120]	; (8004160 <HAL_RCC_OscConfig+0x508>)
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	4a1d      	ldr	r2, [pc, #116]	; (8004160 <HAL_RCC_OscConfig+0x508>)
 80040ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80040ee:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80040f0:	f7fd fdb2 	bl	8001c58 <HAL_GetTick>
 80040f4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80040f6:	e008      	b.n	800410a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80040f8:	f7fd fdae 	bl	8001c58 <HAL_GetTick>
 80040fc:	4602      	mov	r2, r0
 80040fe:	693b      	ldr	r3, [r7, #16]
 8004100:	1ad3      	subs	r3, r2, r3
 8004102:	2b02      	cmp	r3, #2
 8004104:	d901      	bls.n	800410a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004106:	2303      	movs	r3, #3
 8004108:	e17a      	b.n	8004400 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800410a:	4b15      	ldr	r3, [pc, #84]	; (8004160 <HAL_RCC_OscConfig+0x508>)
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004112:	2b00      	cmp	r3, #0
 8004114:	d0f0      	beq.n	80040f8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	689b      	ldr	r3, [r3, #8]
 800411a:	2b01      	cmp	r3, #1
 800411c:	d108      	bne.n	8004130 <HAL_RCC_OscConfig+0x4d8>
 800411e:	4b0f      	ldr	r3, [pc, #60]	; (800415c <HAL_RCC_OscConfig+0x504>)
 8004120:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004124:	4a0d      	ldr	r2, [pc, #52]	; (800415c <HAL_RCC_OscConfig+0x504>)
 8004126:	f043 0301 	orr.w	r3, r3, #1
 800412a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800412e:	e029      	b.n	8004184 <HAL_RCC_OscConfig+0x52c>
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	689b      	ldr	r3, [r3, #8]
 8004134:	2b05      	cmp	r3, #5
 8004136:	d115      	bne.n	8004164 <HAL_RCC_OscConfig+0x50c>
 8004138:	4b08      	ldr	r3, [pc, #32]	; (800415c <HAL_RCC_OscConfig+0x504>)
 800413a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800413e:	4a07      	ldr	r2, [pc, #28]	; (800415c <HAL_RCC_OscConfig+0x504>)
 8004140:	f043 0304 	orr.w	r3, r3, #4
 8004144:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004148:	4b04      	ldr	r3, [pc, #16]	; (800415c <HAL_RCC_OscConfig+0x504>)
 800414a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800414e:	4a03      	ldr	r2, [pc, #12]	; (800415c <HAL_RCC_OscConfig+0x504>)
 8004150:	f043 0301 	orr.w	r3, r3, #1
 8004154:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004158:	e014      	b.n	8004184 <HAL_RCC_OscConfig+0x52c>
 800415a:	bf00      	nop
 800415c:	40021000 	.word	0x40021000
 8004160:	40007000 	.word	0x40007000
 8004164:	4b9c      	ldr	r3, [pc, #624]	; (80043d8 <HAL_RCC_OscConfig+0x780>)
 8004166:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800416a:	4a9b      	ldr	r2, [pc, #620]	; (80043d8 <HAL_RCC_OscConfig+0x780>)
 800416c:	f023 0301 	bic.w	r3, r3, #1
 8004170:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004174:	4b98      	ldr	r3, [pc, #608]	; (80043d8 <HAL_RCC_OscConfig+0x780>)
 8004176:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800417a:	4a97      	ldr	r2, [pc, #604]	; (80043d8 <HAL_RCC_OscConfig+0x780>)
 800417c:	f023 0304 	bic.w	r3, r3, #4
 8004180:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	689b      	ldr	r3, [r3, #8]
 8004188:	2b00      	cmp	r3, #0
 800418a:	d016      	beq.n	80041ba <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800418c:	f7fd fd64 	bl	8001c58 <HAL_GetTick>
 8004190:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004192:	e00a      	b.n	80041aa <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004194:	f7fd fd60 	bl	8001c58 <HAL_GetTick>
 8004198:	4602      	mov	r2, r0
 800419a:	693b      	ldr	r3, [r7, #16]
 800419c:	1ad3      	subs	r3, r2, r3
 800419e:	f241 3288 	movw	r2, #5000	; 0x1388
 80041a2:	4293      	cmp	r3, r2
 80041a4:	d901      	bls.n	80041aa <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80041a6:	2303      	movs	r3, #3
 80041a8:	e12a      	b.n	8004400 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80041aa:	4b8b      	ldr	r3, [pc, #556]	; (80043d8 <HAL_RCC_OscConfig+0x780>)
 80041ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041b0:	f003 0302 	and.w	r3, r3, #2
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d0ed      	beq.n	8004194 <HAL_RCC_OscConfig+0x53c>
 80041b8:	e015      	b.n	80041e6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041ba:	f7fd fd4d 	bl	8001c58 <HAL_GetTick>
 80041be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80041c0:	e00a      	b.n	80041d8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80041c2:	f7fd fd49 	bl	8001c58 <HAL_GetTick>
 80041c6:	4602      	mov	r2, r0
 80041c8:	693b      	ldr	r3, [r7, #16]
 80041ca:	1ad3      	subs	r3, r2, r3
 80041cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80041d0:	4293      	cmp	r3, r2
 80041d2:	d901      	bls.n	80041d8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80041d4:	2303      	movs	r3, #3
 80041d6:	e113      	b.n	8004400 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80041d8:	4b7f      	ldr	r3, [pc, #508]	; (80043d8 <HAL_RCC_OscConfig+0x780>)
 80041da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041de:	f003 0302 	and.w	r3, r3, #2
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d1ed      	bne.n	80041c2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80041e6:	7ffb      	ldrb	r3, [r7, #31]
 80041e8:	2b01      	cmp	r3, #1
 80041ea:	d105      	bne.n	80041f8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80041ec:	4b7a      	ldr	r3, [pc, #488]	; (80043d8 <HAL_RCC_OscConfig+0x780>)
 80041ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041f0:	4a79      	ldr	r2, [pc, #484]	; (80043d8 <HAL_RCC_OscConfig+0x780>)
 80041f2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80041f6:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	f000 80fe 	beq.w	80043fe <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004206:	2b02      	cmp	r3, #2
 8004208:	f040 80d0 	bne.w	80043ac <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800420c:	4b72      	ldr	r3, [pc, #456]	; (80043d8 <HAL_RCC_OscConfig+0x780>)
 800420e:	68db      	ldr	r3, [r3, #12]
 8004210:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004212:	697b      	ldr	r3, [r7, #20]
 8004214:	f003 0203 	and.w	r2, r3, #3
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800421c:	429a      	cmp	r2, r3
 800421e:	d130      	bne.n	8004282 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004220:	697b      	ldr	r3, [r7, #20]
 8004222:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800422a:	3b01      	subs	r3, #1
 800422c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800422e:	429a      	cmp	r2, r3
 8004230:	d127      	bne.n	8004282 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004232:	697b      	ldr	r3, [r7, #20]
 8004234:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800423c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800423e:	429a      	cmp	r2, r3
 8004240:	d11f      	bne.n	8004282 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004242:	697b      	ldr	r3, [r7, #20]
 8004244:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004248:	687a      	ldr	r2, [r7, #4]
 800424a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800424c:	2a07      	cmp	r2, #7
 800424e:	bf14      	ite	ne
 8004250:	2201      	movne	r2, #1
 8004252:	2200      	moveq	r2, #0
 8004254:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004256:	4293      	cmp	r3, r2
 8004258:	d113      	bne.n	8004282 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800425a:	697b      	ldr	r3, [r7, #20]
 800425c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004264:	085b      	lsrs	r3, r3, #1
 8004266:	3b01      	subs	r3, #1
 8004268:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800426a:	429a      	cmp	r2, r3
 800426c:	d109      	bne.n	8004282 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800426e:	697b      	ldr	r3, [r7, #20]
 8004270:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004278:	085b      	lsrs	r3, r3, #1
 800427a:	3b01      	subs	r3, #1
 800427c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800427e:	429a      	cmp	r2, r3
 8004280:	d06e      	beq.n	8004360 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004282:	69bb      	ldr	r3, [r7, #24]
 8004284:	2b0c      	cmp	r3, #12
 8004286:	d069      	beq.n	800435c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004288:	4b53      	ldr	r3, [pc, #332]	; (80043d8 <HAL_RCC_OscConfig+0x780>)
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004290:	2b00      	cmp	r3, #0
 8004292:	d105      	bne.n	80042a0 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004294:	4b50      	ldr	r3, [pc, #320]	; (80043d8 <HAL_RCC_OscConfig+0x780>)
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800429c:	2b00      	cmp	r3, #0
 800429e:	d001      	beq.n	80042a4 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80042a0:	2301      	movs	r3, #1
 80042a2:	e0ad      	b.n	8004400 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80042a4:	4b4c      	ldr	r3, [pc, #304]	; (80043d8 <HAL_RCC_OscConfig+0x780>)
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	4a4b      	ldr	r2, [pc, #300]	; (80043d8 <HAL_RCC_OscConfig+0x780>)
 80042aa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80042ae:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80042b0:	f7fd fcd2 	bl	8001c58 <HAL_GetTick>
 80042b4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80042b6:	e008      	b.n	80042ca <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80042b8:	f7fd fcce 	bl	8001c58 <HAL_GetTick>
 80042bc:	4602      	mov	r2, r0
 80042be:	693b      	ldr	r3, [r7, #16]
 80042c0:	1ad3      	subs	r3, r2, r3
 80042c2:	2b02      	cmp	r3, #2
 80042c4:	d901      	bls.n	80042ca <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80042c6:	2303      	movs	r3, #3
 80042c8:	e09a      	b.n	8004400 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80042ca:	4b43      	ldr	r3, [pc, #268]	; (80043d8 <HAL_RCC_OscConfig+0x780>)
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d1f0      	bne.n	80042b8 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80042d6:	4b40      	ldr	r3, [pc, #256]	; (80043d8 <HAL_RCC_OscConfig+0x780>)
 80042d8:	68da      	ldr	r2, [r3, #12]
 80042da:	4b40      	ldr	r3, [pc, #256]	; (80043dc <HAL_RCC_OscConfig+0x784>)
 80042dc:	4013      	ands	r3, r2
 80042de:	687a      	ldr	r2, [r7, #4]
 80042e0:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80042e2:	687a      	ldr	r2, [r7, #4]
 80042e4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80042e6:	3a01      	subs	r2, #1
 80042e8:	0112      	lsls	r2, r2, #4
 80042ea:	4311      	orrs	r1, r2
 80042ec:	687a      	ldr	r2, [r7, #4]
 80042ee:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80042f0:	0212      	lsls	r2, r2, #8
 80042f2:	4311      	orrs	r1, r2
 80042f4:	687a      	ldr	r2, [r7, #4]
 80042f6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80042f8:	0852      	lsrs	r2, r2, #1
 80042fa:	3a01      	subs	r2, #1
 80042fc:	0552      	lsls	r2, r2, #21
 80042fe:	4311      	orrs	r1, r2
 8004300:	687a      	ldr	r2, [r7, #4]
 8004302:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004304:	0852      	lsrs	r2, r2, #1
 8004306:	3a01      	subs	r2, #1
 8004308:	0652      	lsls	r2, r2, #25
 800430a:	4311      	orrs	r1, r2
 800430c:	687a      	ldr	r2, [r7, #4]
 800430e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004310:	0912      	lsrs	r2, r2, #4
 8004312:	0452      	lsls	r2, r2, #17
 8004314:	430a      	orrs	r2, r1
 8004316:	4930      	ldr	r1, [pc, #192]	; (80043d8 <HAL_RCC_OscConfig+0x780>)
 8004318:	4313      	orrs	r3, r2
 800431a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800431c:	4b2e      	ldr	r3, [pc, #184]	; (80043d8 <HAL_RCC_OscConfig+0x780>)
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	4a2d      	ldr	r2, [pc, #180]	; (80043d8 <HAL_RCC_OscConfig+0x780>)
 8004322:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004326:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004328:	4b2b      	ldr	r3, [pc, #172]	; (80043d8 <HAL_RCC_OscConfig+0x780>)
 800432a:	68db      	ldr	r3, [r3, #12]
 800432c:	4a2a      	ldr	r2, [pc, #168]	; (80043d8 <HAL_RCC_OscConfig+0x780>)
 800432e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004332:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004334:	f7fd fc90 	bl	8001c58 <HAL_GetTick>
 8004338:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800433a:	e008      	b.n	800434e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800433c:	f7fd fc8c 	bl	8001c58 <HAL_GetTick>
 8004340:	4602      	mov	r2, r0
 8004342:	693b      	ldr	r3, [r7, #16]
 8004344:	1ad3      	subs	r3, r2, r3
 8004346:	2b02      	cmp	r3, #2
 8004348:	d901      	bls.n	800434e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800434a:	2303      	movs	r3, #3
 800434c:	e058      	b.n	8004400 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800434e:	4b22      	ldr	r3, [pc, #136]	; (80043d8 <HAL_RCC_OscConfig+0x780>)
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004356:	2b00      	cmp	r3, #0
 8004358:	d0f0      	beq.n	800433c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800435a:	e050      	b.n	80043fe <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800435c:	2301      	movs	r3, #1
 800435e:	e04f      	b.n	8004400 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004360:	4b1d      	ldr	r3, [pc, #116]	; (80043d8 <HAL_RCC_OscConfig+0x780>)
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004368:	2b00      	cmp	r3, #0
 800436a:	d148      	bne.n	80043fe <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800436c:	4b1a      	ldr	r3, [pc, #104]	; (80043d8 <HAL_RCC_OscConfig+0x780>)
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	4a19      	ldr	r2, [pc, #100]	; (80043d8 <HAL_RCC_OscConfig+0x780>)
 8004372:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004376:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004378:	4b17      	ldr	r3, [pc, #92]	; (80043d8 <HAL_RCC_OscConfig+0x780>)
 800437a:	68db      	ldr	r3, [r3, #12]
 800437c:	4a16      	ldr	r2, [pc, #88]	; (80043d8 <HAL_RCC_OscConfig+0x780>)
 800437e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004382:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004384:	f7fd fc68 	bl	8001c58 <HAL_GetTick>
 8004388:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800438a:	e008      	b.n	800439e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800438c:	f7fd fc64 	bl	8001c58 <HAL_GetTick>
 8004390:	4602      	mov	r2, r0
 8004392:	693b      	ldr	r3, [r7, #16]
 8004394:	1ad3      	subs	r3, r2, r3
 8004396:	2b02      	cmp	r3, #2
 8004398:	d901      	bls.n	800439e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800439a:	2303      	movs	r3, #3
 800439c:	e030      	b.n	8004400 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800439e:	4b0e      	ldr	r3, [pc, #56]	; (80043d8 <HAL_RCC_OscConfig+0x780>)
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d0f0      	beq.n	800438c <HAL_RCC_OscConfig+0x734>
 80043aa:	e028      	b.n	80043fe <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80043ac:	69bb      	ldr	r3, [r7, #24]
 80043ae:	2b0c      	cmp	r3, #12
 80043b0:	d023      	beq.n	80043fa <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043b2:	4b09      	ldr	r3, [pc, #36]	; (80043d8 <HAL_RCC_OscConfig+0x780>)
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	4a08      	ldr	r2, [pc, #32]	; (80043d8 <HAL_RCC_OscConfig+0x780>)
 80043b8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80043bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043be:	f7fd fc4b 	bl	8001c58 <HAL_GetTick>
 80043c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80043c4:	e00c      	b.n	80043e0 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043c6:	f7fd fc47 	bl	8001c58 <HAL_GetTick>
 80043ca:	4602      	mov	r2, r0
 80043cc:	693b      	ldr	r3, [r7, #16]
 80043ce:	1ad3      	subs	r3, r2, r3
 80043d0:	2b02      	cmp	r3, #2
 80043d2:	d905      	bls.n	80043e0 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80043d4:	2303      	movs	r3, #3
 80043d6:	e013      	b.n	8004400 <HAL_RCC_OscConfig+0x7a8>
 80043d8:	40021000 	.word	0x40021000
 80043dc:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80043e0:	4b09      	ldr	r3, [pc, #36]	; (8004408 <HAL_RCC_OscConfig+0x7b0>)
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d1ec      	bne.n	80043c6 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80043ec:	4b06      	ldr	r3, [pc, #24]	; (8004408 <HAL_RCC_OscConfig+0x7b0>)
 80043ee:	68da      	ldr	r2, [r3, #12]
 80043f0:	4905      	ldr	r1, [pc, #20]	; (8004408 <HAL_RCC_OscConfig+0x7b0>)
 80043f2:	4b06      	ldr	r3, [pc, #24]	; (800440c <HAL_RCC_OscConfig+0x7b4>)
 80043f4:	4013      	ands	r3, r2
 80043f6:	60cb      	str	r3, [r1, #12]
 80043f8:	e001      	b.n	80043fe <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80043fa:	2301      	movs	r3, #1
 80043fc:	e000      	b.n	8004400 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80043fe:	2300      	movs	r3, #0
}
 8004400:	4618      	mov	r0, r3
 8004402:	3720      	adds	r7, #32
 8004404:	46bd      	mov	sp, r7
 8004406:	bd80      	pop	{r7, pc}
 8004408:	40021000 	.word	0x40021000
 800440c:	feeefffc 	.word	0xfeeefffc

08004410 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004410:	b580      	push	{r7, lr}
 8004412:	b084      	sub	sp, #16
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
 8004418:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	2b00      	cmp	r3, #0
 800441e:	d101      	bne.n	8004424 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004420:	2301      	movs	r3, #1
 8004422:	e0e7      	b.n	80045f4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004424:	4b75      	ldr	r3, [pc, #468]	; (80045fc <HAL_RCC_ClockConfig+0x1ec>)
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f003 0307 	and.w	r3, r3, #7
 800442c:	683a      	ldr	r2, [r7, #0]
 800442e:	429a      	cmp	r2, r3
 8004430:	d910      	bls.n	8004454 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004432:	4b72      	ldr	r3, [pc, #456]	; (80045fc <HAL_RCC_ClockConfig+0x1ec>)
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f023 0207 	bic.w	r2, r3, #7
 800443a:	4970      	ldr	r1, [pc, #448]	; (80045fc <HAL_RCC_ClockConfig+0x1ec>)
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	4313      	orrs	r3, r2
 8004440:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004442:	4b6e      	ldr	r3, [pc, #440]	; (80045fc <HAL_RCC_ClockConfig+0x1ec>)
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f003 0307 	and.w	r3, r3, #7
 800444a:	683a      	ldr	r2, [r7, #0]
 800444c:	429a      	cmp	r2, r3
 800444e:	d001      	beq.n	8004454 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004450:	2301      	movs	r3, #1
 8004452:	e0cf      	b.n	80045f4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f003 0302 	and.w	r3, r3, #2
 800445c:	2b00      	cmp	r3, #0
 800445e:	d010      	beq.n	8004482 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	689a      	ldr	r2, [r3, #8]
 8004464:	4b66      	ldr	r3, [pc, #408]	; (8004600 <HAL_RCC_ClockConfig+0x1f0>)
 8004466:	689b      	ldr	r3, [r3, #8]
 8004468:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800446c:	429a      	cmp	r2, r3
 800446e:	d908      	bls.n	8004482 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004470:	4b63      	ldr	r3, [pc, #396]	; (8004600 <HAL_RCC_ClockConfig+0x1f0>)
 8004472:	689b      	ldr	r3, [r3, #8]
 8004474:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	689b      	ldr	r3, [r3, #8]
 800447c:	4960      	ldr	r1, [pc, #384]	; (8004600 <HAL_RCC_ClockConfig+0x1f0>)
 800447e:	4313      	orrs	r3, r2
 8004480:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f003 0301 	and.w	r3, r3, #1
 800448a:	2b00      	cmp	r3, #0
 800448c:	d04c      	beq.n	8004528 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	685b      	ldr	r3, [r3, #4]
 8004492:	2b03      	cmp	r3, #3
 8004494:	d107      	bne.n	80044a6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004496:	4b5a      	ldr	r3, [pc, #360]	; (8004600 <HAL_RCC_ClockConfig+0x1f0>)
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d121      	bne.n	80044e6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80044a2:	2301      	movs	r3, #1
 80044a4:	e0a6      	b.n	80045f4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	685b      	ldr	r3, [r3, #4]
 80044aa:	2b02      	cmp	r3, #2
 80044ac:	d107      	bne.n	80044be <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80044ae:	4b54      	ldr	r3, [pc, #336]	; (8004600 <HAL_RCC_ClockConfig+0x1f0>)
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d115      	bne.n	80044e6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80044ba:	2301      	movs	r3, #1
 80044bc:	e09a      	b.n	80045f4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	685b      	ldr	r3, [r3, #4]
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d107      	bne.n	80044d6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80044c6:	4b4e      	ldr	r3, [pc, #312]	; (8004600 <HAL_RCC_ClockConfig+0x1f0>)
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f003 0302 	and.w	r3, r3, #2
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d109      	bne.n	80044e6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80044d2:	2301      	movs	r3, #1
 80044d4:	e08e      	b.n	80045f4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80044d6:	4b4a      	ldr	r3, [pc, #296]	; (8004600 <HAL_RCC_ClockConfig+0x1f0>)
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d101      	bne.n	80044e6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80044e2:	2301      	movs	r3, #1
 80044e4:	e086      	b.n	80045f4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80044e6:	4b46      	ldr	r3, [pc, #280]	; (8004600 <HAL_RCC_ClockConfig+0x1f0>)
 80044e8:	689b      	ldr	r3, [r3, #8]
 80044ea:	f023 0203 	bic.w	r2, r3, #3
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	685b      	ldr	r3, [r3, #4]
 80044f2:	4943      	ldr	r1, [pc, #268]	; (8004600 <HAL_RCC_ClockConfig+0x1f0>)
 80044f4:	4313      	orrs	r3, r2
 80044f6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80044f8:	f7fd fbae 	bl	8001c58 <HAL_GetTick>
 80044fc:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044fe:	e00a      	b.n	8004516 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004500:	f7fd fbaa 	bl	8001c58 <HAL_GetTick>
 8004504:	4602      	mov	r2, r0
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	1ad3      	subs	r3, r2, r3
 800450a:	f241 3288 	movw	r2, #5000	; 0x1388
 800450e:	4293      	cmp	r3, r2
 8004510:	d901      	bls.n	8004516 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8004512:	2303      	movs	r3, #3
 8004514:	e06e      	b.n	80045f4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004516:	4b3a      	ldr	r3, [pc, #232]	; (8004600 <HAL_RCC_ClockConfig+0x1f0>)
 8004518:	689b      	ldr	r3, [r3, #8]
 800451a:	f003 020c 	and.w	r2, r3, #12
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	685b      	ldr	r3, [r3, #4]
 8004522:	009b      	lsls	r3, r3, #2
 8004524:	429a      	cmp	r2, r3
 8004526:	d1eb      	bne.n	8004500 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f003 0302 	and.w	r3, r3, #2
 8004530:	2b00      	cmp	r3, #0
 8004532:	d010      	beq.n	8004556 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	689a      	ldr	r2, [r3, #8]
 8004538:	4b31      	ldr	r3, [pc, #196]	; (8004600 <HAL_RCC_ClockConfig+0x1f0>)
 800453a:	689b      	ldr	r3, [r3, #8]
 800453c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004540:	429a      	cmp	r2, r3
 8004542:	d208      	bcs.n	8004556 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004544:	4b2e      	ldr	r3, [pc, #184]	; (8004600 <HAL_RCC_ClockConfig+0x1f0>)
 8004546:	689b      	ldr	r3, [r3, #8]
 8004548:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	689b      	ldr	r3, [r3, #8]
 8004550:	492b      	ldr	r1, [pc, #172]	; (8004600 <HAL_RCC_ClockConfig+0x1f0>)
 8004552:	4313      	orrs	r3, r2
 8004554:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004556:	4b29      	ldr	r3, [pc, #164]	; (80045fc <HAL_RCC_ClockConfig+0x1ec>)
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f003 0307 	and.w	r3, r3, #7
 800455e:	683a      	ldr	r2, [r7, #0]
 8004560:	429a      	cmp	r2, r3
 8004562:	d210      	bcs.n	8004586 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004564:	4b25      	ldr	r3, [pc, #148]	; (80045fc <HAL_RCC_ClockConfig+0x1ec>)
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f023 0207 	bic.w	r2, r3, #7
 800456c:	4923      	ldr	r1, [pc, #140]	; (80045fc <HAL_RCC_ClockConfig+0x1ec>)
 800456e:	683b      	ldr	r3, [r7, #0]
 8004570:	4313      	orrs	r3, r2
 8004572:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004574:	4b21      	ldr	r3, [pc, #132]	; (80045fc <HAL_RCC_ClockConfig+0x1ec>)
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f003 0307 	and.w	r3, r3, #7
 800457c:	683a      	ldr	r2, [r7, #0]
 800457e:	429a      	cmp	r2, r3
 8004580:	d001      	beq.n	8004586 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8004582:	2301      	movs	r3, #1
 8004584:	e036      	b.n	80045f4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f003 0304 	and.w	r3, r3, #4
 800458e:	2b00      	cmp	r3, #0
 8004590:	d008      	beq.n	80045a4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004592:	4b1b      	ldr	r3, [pc, #108]	; (8004600 <HAL_RCC_ClockConfig+0x1f0>)
 8004594:	689b      	ldr	r3, [r3, #8]
 8004596:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	68db      	ldr	r3, [r3, #12]
 800459e:	4918      	ldr	r1, [pc, #96]	; (8004600 <HAL_RCC_ClockConfig+0x1f0>)
 80045a0:	4313      	orrs	r3, r2
 80045a2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f003 0308 	and.w	r3, r3, #8
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d009      	beq.n	80045c4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80045b0:	4b13      	ldr	r3, [pc, #76]	; (8004600 <HAL_RCC_ClockConfig+0x1f0>)
 80045b2:	689b      	ldr	r3, [r3, #8]
 80045b4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	691b      	ldr	r3, [r3, #16]
 80045bc:	00db      	lsls	r3, r3, #3
 80045be:	4910      	ldr	r1, [pc, #64]	; (8004600 <HAL_RCC_ClockConfig+0x1f0>)
 80045c0:	4313      	orrs	r3, r2
 80045c2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80045c4:	f000 f824 	bl	8004610 <HAL_RCC_GetSysClockFreq>
 80045c8:	4602      	mov	r2, r0
 80045ca:	4b0d      	ldr	r3, [pc, #52]	; (8004600 <HAL_RCC_ClockConfig+0x1f0>)
 80045cc:	689b      	ldr	r3, [r3, #8]
 80045ce:	091b      	lsrs	r3, r3, #4
 80045d0:	f003 030f 	and.w	r3, r3, #15
 80045d4:	490b      	ldr	r1, [pc, #44]	; (8004604 <HAL_RCC_ClockConfig+0x1f4>)
 80045d6:	5ccb      	ldrb	r3, [r1, r3]
 80045d8:	f003 031f 	and.w	r3, r3, #31
 80045dc:	fa22 f303 	lsr.w	r3, r2, r3
 80045e0:	4a09      	ldr	r2, [pc, #36]	; (8004608 <HAL_RCC_ClockConfig+0x1f8>)
 80045e2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80045e4:	4b09      	ldr	r3, [pc, #36]	; (800460c <HAL_RCC_ClockConfig+0x1fc>)
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	4618      	mov	r0, r3
 80045ea:	f7fd fae5 	bl	8001bb8 <HAL_InitTick>
 80045ee:	4603      	mov	r3, r0
 80045f0:	72fb      	strb	r3, [r7, #11]

  return status;
 80045f2:	7afb      	ldrb	r3, [r7, #11]
}
 80045f4:	4618      	mov	r0, r3
 80045f6:	3710      	adds	r7, #16
 80045f8:	46bd      	mov	sp, r7
 80045fa:	bd80      	pop	{r7, pc}
 80045fc:	40022000 	.word	0x40022000
 8004600:	40021000 	.word	0x40021000
 8004604:	0800a9bc 	.word	0x0800a9bc
 8004608:	20000000 	.word	0x20000000
 800460c:	20000004 	.word	0x20000004

08004610 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004610:	b480      	push	{r7}
 8004612:	b089      	sub	sp, #36	; 0x24
 8004614:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004616:	2300      	movs	r3, #0
 8004618:	61fb      	str	r3, [r7, #28]
 800461a:	2300      	movs	r3, #0
 800461c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800461e:	4b3e      	ldr	r3, [pc, #248]	; (8004718 <HAL_RCC_GetSysClockFreq+0x108>)
 8004620:	689b      	ldr	r3, [r3, #8]
 8004622:	f003 030c 	and.w	r3, r3, #12
 8004626:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004628:	4b3b      	ldr	r3, [pc, #236]	; (8004718 <HAL_RCC_GetSysClockFreq+0x108>)
 800462a:	68db      	ldr	r3, [r3, #12]
 800462c:	f003 0303 	and.w	r3, r3, #3
 8004630:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004632:	693b      	ldr	r3, [r7, #16]
 8004634:	2b00      	cmp	r3, #0
 8004636:	d005      	beq.n	8004644 <HAL_RCC_GetSysClockFreq+0x34>
 8004638:	693b      	ldr	r3, [r7, #16]
 800463a:	2b0c      	cmp	r3, #12
 800463c:	d121      	bne.n	8004682 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	2b01      	cmp	r3, #1
 8004642:	d11e      	bne.n	8004682 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004644:	4b34      	ldr	r3, [pc, #208]	; (8004718 <HAL_RCC_GetSysClockFreq+0x108>)
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f003 0308 	and.w	r3, r3, #8
 800464c:	2b00      	cmp	r3, #0
 800464e:	d107      	bne.n	8004660 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004650:	4b31      	ldr	r3, [pc, #196]	; (8004718 <HAL_RCC_GetSysClockFreq+0x108>)
 8004652:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004656:	0a1b      	lsrs	r3, r3, #8
 8004658:	f003 030f 	and.w	r3, r3, #15
 800465c:	61fb      	str	r3, [r7, #28]
 800465e:	e005      	b.n	800466c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004660:	4b2d      	ldr	r3, [pc, #180]	; (8004718 <HAL_RCC_GetSysClockFreq+0x108>)
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	091b      	lsrs	r3, r3, #4
 8004666:	f003 030f 	and.w	r3, r3, #15
 800466a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800466c:	4a2b      	ldr	r2, [pc, #172]	; (800471c <HAL_RCC_GetSysClockFreq+0x10c>)
 800466e:	69fb      	ldr	r3, [r7, #28]
 8004670:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004674:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004676:	693b      	ldr	r3, [r7, #16]
 8004678:	2b00      	cmp	r3, #0
 800467a:	d10d      	bne.n	8004698 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800467c:	69fb      	ldr	r3, [r7, #28]
 800467e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004680:	e00a      	b.n	8004698 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004682:	693b      	ldr	r3, [r7, #16]
 8004684:	2b04      	cmp	r3, #4
 8004686:	d102      	bne.n	800468e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004688:	4b25      	ldr	r3, [pc, #148]	; (8004720 <HAL_RCC_GetSysClockFreq+0x110>)
 800468a:	61bb      	str	r3, [r7, #24]
 800468c:	e004      	b.n	8004698 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800468e:	693b      	ldr	r3, [r7, #16]
 8004690:	2b08      	cmp	r3, #8
 8004692:	d101      	bne.n	8004698 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004694:	4b23      	ldr	r3, [pc, #140]	; (8004724 <HAL_RCC_GetSysClockFreq+0x114>)
 8004696:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004698:	693b      	ldr	r3, [r7, #16]
 800469a:	2b0c      	cmp	r3, #12
 800469c:	d134      	bne.n	8004708 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800469e:	4b1e      	ldr	r3, [pc, #120]	; (8004718 <HAL_RCC_GetSysClockFreq+0x108>)
 80046a0:	68db      	ldr	r3, [r3, #12]
 80046a2:	f003 0303 	and.w	r3, r3, #3
 80046a6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80046a8:	68bb      	ldr	r3, [r7, #8]
 80046aa:	2b02      	cmp	r3, #2
 80046ac:	d003      	beq.n	80046b6 <HAL_RCC_GetSysClockFreq+0xa6>
 80046ae:	68bb      	ldr	r3, [r7, #8]
 80046b0:	2b03      	cmp	r3, #3
 80046b2:	d003      	beq.n	80046bc <HAL_RCC_GetSysClockFreq+0xac>
 80046b4:	e005      	b.n	80046c2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80046b6:	4b1a      	ldr	r3, [pc, #104]	; (8004720 <HAL_RCC_GetSysClockFreq+0x110>)
 80046b8:	617b      	str	r3, [r7, #20]
      break;
 80046ba:	e005      	b.n	80046c8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80046bc:	4b19      	ldr	r3, [pc, #100]	; (8004724 <HAL_RCC_GetSysClockFreq+0x114>)
 80046be:	617b      	str	r3, [r7, #20]
      break;
 80046c0:	e002      	b.n	80046c8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80046c2:	69fb      	ldr	r3, [r7, #28]
 80046c4:	617b      	str	r3, [r7, #20]
      break;
 80046c6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80046c8:	4b13      	ldr	r3, [pc, #76]	; (8004718 <HAL_RCC_GetSysClockFreq+0x108>)
 80046ca:	68db      	ldr	r3, [r3, #12]
 80046cc:	091b      	lsrs	r3, r3, #4
 80046ce:	f003 0307 	and.w	r3, r3, #7
 80046d2:	3301      	adds	r3, #1
 80046d4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80046d6:	4b10      	ldr	r3, [pc, #64]	; (8004718 <HAL_RCC_GetSysClockFreq+0x108>)
 80046d8:	68db      	ldr	r3, [r3, #12]
 80046da:	0a1b      	lsrs	r3, r3, #8
 80046dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80046e0:	697a      	ldr	r2, [r7, #20]
 80046e2:	fb03 f202 	mul.w	r2, r3, r2
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80046ec:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80046ee:	4b0a      	ldr	r3, [pc, #40]	; (8004718 <HAL_RCC_GetSysClockFreq+0x108>)
 80046f0:	68db      	ldr	r3, [r3, #12]
 80046f2:	0e5b      	lsrs	r3, r3, #25
 80046f4:	f003 0303 	and.w	r3, r3, #3
 80046f8:	3301      	adds	r3, #1
 80046fa:	005b      	lsls	r3, r3, #1
 80046fc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80046fe:	697a      	ldr	r2, [r7, #20]
 8004700:	683b      	ldr	r3, [r7, #0]
 8004702:	fbb2 f3f3 	udiv	r3, r2, r3
 8004706:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004708:	69bb      	ldr	r3, [r7, #24]
}
 800470a:	4618      	mov	r0, r3
 800470c:	3724      	adds	r7, #36	; 0x24
 800470e:	46bd      	mov	sp, r7
 8004710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004714:	4770      	bx	lr
 8004716:	bf00      	nop
 8004718:	40021000 	.word	0x40021000
 800471c:	0800a9d4 	.word	0x0800a9d4
 8004720:	00f42400 	.word	0x00f42400
 8004724:	007a1200 	.word	0x007a1200

08004728 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004728:	b480      	push	{r7}
 800472a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800472c:	4b03      	ldr	r3, [pc, #12]	; (800473c <HAL_RCC_GetHCLKFreq+0x14>)
 800472e:	681b      	ldr	r3, [r3, #0]
}
 8004730:	4618      	mov	r0, r3
 8004732:	46bd      	mov	sp, r7
 8004734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004738:	4770      	bx	lr
 800473a:	bf00      	nop
 800473c:	20000000 	.word	0x20000000

08004740 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004740:	b580      	push	{r7, lr}
 8004742:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004744:	f7ff fff0 	bl	8004728 <HAL_RCC_GetHCLKFreq>
 8004748:	4602      	mov	r2, r0
 800474a:	4b06      	ldr	r3, [pc, #24]	; (8004764 <HAL_RCC_GetPCLK1Freq+0x24>)
 800474c:	689b      	ldr	r3, [r3, #8]
 800474e:	0a1b      	lsrs	r3, r3, #8
 8004750:	f003 0307 	and.w	r3, r3, #7
 8004754:	4904      	ldr	r1, [pc, #16]	; (8004768 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004756:	5ccb      	ldrb	r3, [r1, r3]
 8004758:	f003 031f 	and.w	r3, r3, #31
 800475c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004760:	4618      	mov	r0, r3
 8004762:	bd80      	pop	{r7, pc}
 8004764:	40021000 	.word	0x40021000
 8004768:	0800a9cc 	.word	0x0800a9cc

0800476c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800476c:	b580      	push	{r7, lr}
 800476e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004770:	f7ff ffda 	bl	8004728 <HAL_RCC_GetHCLKFreq>
 8004774:	4602      	mov	r2, r0
 8004776:	4b06      	ldr	r3, [pc, #24]	; (8004790 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004778:	689b      	ldr	r3, [r3, #8]
 800477a:	0adb      	lsrs	r3, r3, #11
 800477c:	f003 0307 	and.w	r3, r3, #7
 8004780:	4904      	ldr	r1, [pc, #16]	; (8004794 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004782:	5ccb      	ldrb	r3, [r1, r3]
 8004784:	f003 031f 	and.w	r3, r3, #31
 8004788:	fa22 f303 	lsr.w	r3, r2, r3
}
 800478c:	4618      	mov	r0, r3
 800478e:	bd80      	pop	{r7, pc}
 8004790:	40021000 	.word	0x40021000
 8004794:	0800a9cc 	.word	0x0800a9cc

08004798 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004798:	b580      	push	{r7, lr}
 800479a:	b086      	sub	sp, #24
 800479c:	af00      	add	r7, sp, #0
 800479e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80047a0:	2300      	movs	r3, #0
 80047a2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80047a4:	4b2a      	ldr	r3, [pc, #168]	; (8004850 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80047a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d003      	beq.n	80047b8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80047b0:	f7ff f9ee 	bl	8003b90 <HAL_PWREx_GetVoltageRange>
 80047b4:	6178      	str	r0, [r7, #20]
 80047b6:	e014      	b.n	80047e2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80047b8:	4b25      	ldr	r3, [pc, #148]	; (8004850 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80047ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047bc:	4a24      	ldr	r2, [pc, #144]	; (8004850 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80047be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047c2:	6593      	str	r3, [r2, #88]	; 0x58
 80047c4:	4b22      	ldr	r3, [pc, #136]	; (8004850 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80047c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047cc:	60fb      	str	r3, [r7, #12]
 80047ce:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80047d0:	f7ff f9de 	bl	8003b90 <HAL_PWREx_GetVoltageRange>
 80047d4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80047d6:	4b1e      	ldr	r3, [pc, #120]	; (8004850 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80047d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047da:	4a1d      	ldr	r2, [pc, #116]	; (8004850 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80047dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80047e0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80047e2:	697b      	ldr	r3, [r7, #20]
 80047e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80047e8:	d10b      	bne.n	8004802 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	2b80      	cmp	r3, #128	; 0x80
 80047ee:	d919      	bls.n	8004824 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2ba0      	cmp	r3, #160	; 0xa0
 80047f4:	d902      	bls.n	80047fc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80047f6:	2302      	movs	r3, #2
 80047f8:	613b      	str	r3, [r7, #16]
 80047fa:	e013      	b.n	8004824 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80047fc:	2301      	movs	r3, #1
 80047fe:	613b      	str	r3, [r7, #16]
 8004800:	e010      	b.n	8004824 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	2b80      	cmp	r3, #128	; 0x80
 8004806:	d902      	bls.n	800480e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004808:	2303      	movs	r3, #3
 800480a:	613b      	str	r3, [r7, #16]
 800480c:	e00a      	b.n	8004824 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	2b80      	cmp	r3, #128	; 0x80
 8004812:	d102      	bne.n	800481a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004814:	2302      	movs	r3, #2
 8004816:	613b      	str	r3, [r7, #16]
 8004818:	e004      	b.n	8004824 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	2b70      	cmp	r3, #112	; 0x70
 800481e:	d101      	bne.n	8004824 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004820:	2301      	movs	r3, #1
 8004822:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004824:	4b0b      	ldr	r3, [pc, #44]	; (8004854 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f023 0207 	bic.w	r2, r3, #7
 800482c:	4909      	ldr	r1, [pc, #36]	; (8004854 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800482e:	693b      	ldr	r3, [r7, #16]
 8004830:	4313      	orrs	r3, r2
 8004832:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004834:	4b07      	ldr	r3, [pc, #28]	; (8004854 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f003 0307 	and.w	r3, r3, #7
 800483c:	693a      	ldr	r2, [r7, #16]
 800483e:	429a      	cmp	r2, r3
 8004840:	d001      	beq.n	8004846 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004842:	2301      	movs	r3, #1
 8004844:	e000      	b.n	8004848 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004846:	2300      	movs	r3, #0
}
 8004848:	4618      	mov	r0, r3
 800484a:	3718      	adds	r7, #24
 800484c:	46bd      	mov	sp, r7
 800484e:	bd80      	pop	{r7, pc}
 8004850:	40021000 	.word	0x40021000
 8004854:	40022000 	.word	0x40022000

08004858 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004858:	b580      	push	{r7, lr}
 800485a:	b086      	sub	sp, #24
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004860:	2300      	movs	r3, #0
 8004862:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004864:	2300      	movs	r3, #0
 8004866:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004870:	2b00      	cmp	r3, #0
 8004872:	d041      	beq.n	80048f8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004878:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800487c:	d02a      	beq.n	80048d4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800487e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004882:	d824      	bhi.n	80048ce <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004884:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004888:	d008      	beq.n	800489c <HAL_RCCEx_PeriphCLKConfig+0x44>
 800488a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800488e:	d81e      	bhi.n	80048ce <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004890:	2b00      	cmp	r3, #0
 8004892:	d00a      	beq.n	80048aa <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004894:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004898:	d010      	beq.n	80048bc <HAL_RCCEx_PeriphCLKConfig+0x64>
 800489a:	e018      	b.n	80048ce <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800489c:	4b86      	ldr	r3, [pc, #536]	; (8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800489e:	68db      	ldr	r3, [r3, #12]
 80048a0:	4a85      	ldr	r2, [pc, #532]	; (8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80048a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80048a6:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80048a8:	e015      	b.n	80048d6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	3304      	adds	r3, #4
 80048ae:	2100      	movs	r1, #0
 80048b0:	4618      	mov	r0, r3
 80048b2:	f000 fabb 	bl	8004e2c <RCCEx_PLLSAI1_Config>
 80048b6:	4603      	mov	r3, r0
 80048b8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80048ba:	e00c      	b.n	80048d6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	3320      	adds	r3, #32
 80048c0:	2100      	movs	r1, #0
 80048c2:	4618      	mov	r0, r3
 80048c4:	f000 fba6 	bl	8005014 <RCCEx_PLLSAI2_Config>
 80048c8:	4603      	mov	r3, r0
 80048ca:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80048cc:	e003      	b.n	80048d6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80048ce:	2301      	movs	r3, #1
 80048d0:	74fb      	strb	r3, [r7, #19]
      break;
 80048d2:	e000      	b.n	80048d6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80048d4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80048d6:	7cfb      	ldrb	r3, [r7, #19]
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d10b      	bne.n	80048f4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80048dc:	4b76      	ldr	r3, [pc, #472]	; (8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80048de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048e2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80048ea:	4973      	ldr	r1, [pc, #460]	; (8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80048ec:	4313      	orrs	r3, r2
 80048ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80048f2:	e001      	b.n	80048f8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048f4:	7cfb      	ldrb	r3, [r7, #19]
 80048f6:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004900:	2b00      	cmp	r3, #0
 8004902:	d041      	beq.n	8004988 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004908:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800490c:	d02a      	beq.n	8004964 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800490e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004912:	d824      	bhi.n	800495e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004914:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004918:	d008      	beq.n	800492c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800491a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800491e:	d81e      	bhi.n	800495e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004920:	2b00      	cmp	r3, #0
 8004922:	d00a      	beq.n	800493a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8004924:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004928:	d010      	beq.n	800494c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800492a:	e018      	b.n	800495e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800492c:	4b62      	ldr	r3, [pc, #392]	; (8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800492e:	68db      	ldr	r3, [r3, #12]
 8004930:	4a61      	ldr	r2, [pc, #388]	; (8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004932:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004936:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004938:	e015      	b.n	8004966 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	3304      	adds	r3, #4
 800493e:	2100      	movs	r1, #0
 8004940:	4618      	mov	r0, r3
 8004942:	f000 fa73 	bl	8004e2c <RCCEx_PLLSAI1_Config>
 8004946:	4603      	mov	r3, r0
 8004948:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800494a:	e00c      	b.n	8004966 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	3320      	adds	r3, #32
 8004950:	2100      	movs	r1, #0
 8004952:	4618      	mov	r0, r3
 8004954:	f000 fb5e 	bl	8005014 <RCCEx_PLLSAI2_Config>
 8004958:	4603      	mov	r3, r0
 800495a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800495c:	e003      	b.n	8004966 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800495e:	2301      	movs	r3, #1
 8004960:	74fb      	strb	r3, [r7, #19]
      break;
 8004962:	e000      	b.n	8004966 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8004964:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004966:	7cfb      	ldrb	r3, [r7, #19]
 8004968:	2b00      	cmp	r3, #0
 800496a:	d10b      	bne.n	8004984 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800496c:	4b52      	ldr	r3, [pc, #328]	; (8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800496e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004972:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800497a:	494f      	ldr	r1, [pc, #316]	; (8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800497c:	4313      	orrs	r3, r2
 800497e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004982:	e001      	b.n	8004988 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004984:	7cfb      	ldrb	r3, [r7, #19]
 8004986:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004990:	2b00      	cmp	r3, #0
 8004992:	f000 80a0 	beq.w	8004ad6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004996:	2300      	movs	r3, #0
 8004998:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800499a:	4b47      	ldr	r3, [pc, #284]	; (8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800499c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800499e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d101      	bne.n	80049aa <HAL_RCCEx_PeriphCLKConfig+0x152>
 80049a6:	2301      	movs	r3, #1
 80049a8:	e000      	b.n	80049ac <HAL_RCCEx_PeriphCLKConfig+0x154>
 80049aa:	2300      	movs	r3, #0
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d00d      	beq.n	80049cc <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80049b0:	4b41      	ldr	r3, [pc, #260]	; (8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80049b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049b4:	4a40      	ldr	r2, [pc, #256]	; (8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80049b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80049ba:	6593      	str	r3, [r2, #88]	; 0x58
 80049bc:	4b3e      	ldr	r3, [pc, #248]	; (8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80049be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049c4:	60bb      	str	r3, [r7, #8]
 80049c6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80049c8:	2301      	movs	r3, #1
 80049ca:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80049cc:	4b3b      	ldr	r3, [pc, #236]	; (8004abc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	4a3a      	ldr	r2, [pc, #232]	; (8004abc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80049d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80049d6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80049d8:	f7fd f93e 	bl	8001c58 <HAL_GetTick>
 80049dc:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80049de:	e009      	b.n	80049f4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80049e0:	f7fd f93a 	bl	8001c58 <HAL_GetTick>
 80049e4:	4602      	mov	r2, r0
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	1ad3      	subs	r3, r2, r3
 80049ea:	2b02      	cmp	r3, #2
 80049ec:	d902      	bls.n	80049f4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80049ee:	2303      	movs	r3, #3
 80049f0:	74fb      	strb	r3, [r7, #19]
        break;
 80049f2:	e005      	b.n	8004a00 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80049f4:	4b31      	ldr	r3, [pc, #196]	; (8004abc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d0ef      	beq.n	80049e0 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8004a00:	7cfb      	ldrb	r3, [r7, #19]
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d15c      	bne.n	8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004a06:	4b2c      	ldr	r3, [pc, #176]	; (8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a0c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a10:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004a12:	697b      	ldr	r3, [r7, #20]
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d01f      	beq.n	8004a58 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a1e:	697a      	ldr	r2, [r7, #20]
 8004a20:	429a      	cmp	r2, r3
 8004a22:	d019      	beq.n	8004a58 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004a24:	4b24      	ldr	r3, [pc, #144]	; (8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a2a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a2e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004a30:	4b21      	ldr	r3, [pc, #132]	; (8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a36:	4a20      	ldr	r2, [pc, #128]	; (8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a3c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004a40:	4b1d      	ldr	r3, [pc, #116]	; (8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a46:	4a1c      	ldr	r2, [pc, #112]	; (8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a48:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a4c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004a50:	4a19      	ldr	r2, [pc, #100]	; (8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a52:	697b      	ldr	r3, [r7, #20]
 8004a54:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004a58:	697b      	ldr	r3, [r7, #20]
 8004a5a:	f003 0301 	and.w	r3, r3, #1
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d016      	beq.n	8004a90 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a62:	f7fd f8f9 	bl	8001c58 <HAL_GetTick>
 8004a66:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004a68:	e00b      	b.n	8004a82 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a6a:	f7fd f8f5 	bl	8001c58 <HAL_GetTick>
 8004a6e:	4602      	mov	r2, r0
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	1ad3      	subs	r3, r2, r3
 8004a74:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a78:	4293      	cmp	r3, r2
 8004a7a:	d902      	bls.n	8004a82 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8004a7c:	2303      	movs	r3, #3
 8004a7e:	74fb      	strb	r3, [r7, #19]
            break;
 8004a80:	e006      	b.n	8004a90 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004a82:	4b0d      	ldr	r3, [pc, #52]	; (8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a88:	f003 0302 	and.w	r3, r3, #2
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d0ec      	beq.n	8004a6a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8004a90:	7cfb      	ldrb	r3, [r7, #19]
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d10c      	bne.n	8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004a96:	4b08      	ldr	r3, [pc, #32]	; (8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a9c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004aa6:	4904      	ldr	r1, [pc, #16]	; (8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004aa8:	4313      	orrs	r3, r2
 8004aaa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004aae:	e009      	b.n	8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004ab0:	7cfb      	ldrb	r3, [r7, #19]
 8004ab2:	74bb      	strb	r3, [r7, #18]
 8004ab4:	e006      	b.n	8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8004ab6:	bf00      	nop
 8004ab8:	40021000 	.word	0x40021000
 8004abc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ac0:	7cfb      	ldrb	r3, [r7, #19]
 8004ac2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004ac4:	7c7b      	ldrb	r3, [r7, #17]
 8004ac6:	2b01      	cmp	r3, #1
 8004ac8:	d105      	bne.n	8004ad6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004aca:	4b9e      	ldr	r3, [pc, #632]	; (8004d44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004acc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ace:	4a9d      	ldr	r2, [pc, #628]	; (8004d44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ad0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004ad4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f003 0301 	and.w	r3, r3, #1
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d00a      	beq.n	8004af8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004ae2:	4b98      	ldr	r3, [pc, #608]	; (8004d44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ae4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ae8:	f023 0203 	bic.w	r2, r3, #3
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004af0:	4994      	ldr	r1, [pc, #592]	; (8004d44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004af2:	4313      	orrs	r3, r2
 8004af4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f003 0302 	and.w	r3, r3, #2
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d00a      	beq.n	8004b1a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004b04:	4b8f      	ldr	r3, [pc, #572]	; (8004d44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b0a:	f023 020c 	bic.w	r2, r3, #12
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b12:	498c      	ldr	r1, [pc, #560]	; (8004d44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b14:	4313      	orrs	r3, r2
 8004b16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f003 0304 	and.w	r3, r3, #4
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d00a      	beq.n	8004b3c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004b26:	4b87      	ldr	r3, [pc, #540]	; (8004d44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b2c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b34:	4983      	ldr	r1, [pc, #524]	; (8004d44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b36:	4313      	orrs	r3, r2
 8004b38:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f003 0308 	and.w	r3, r3, #8
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d00a      	beq.n	8004b5e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004b48:	4b7e      	ldr	r3, [pc, #504]	; (8004d44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b4e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b56:	497b      	ldr	r1, [pc, #492]	; (8004d44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b58:	4313      	orrs	r3, r2
 8004b5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f003 0310 	and.w	r3, r3, #16
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d00a      	beq.n	8004b80 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004b6a:	4b76      	ldr	r3, [pc, #472]	; (8004d44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b70:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b78:	4972      	ldr	r1, [pc, #456]	; (8004d44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b7a:	4313      	orrs	r3, r2
 8004b7c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f003 0320 	and.w	r3, r3, #32
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d00a      	beq.n	8004ba2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004b8c:	4b6d      	ldr	r3, [pc, #436]	; (8004d44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b92:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b9a:	496a      	ldr	r1, [pc, #424]	; (8004d44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b9c:	4313      	orrs	r3, r2
 8004b9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d00a      	beq.n	8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004bae:	4b65      	ldr	r3, [pc, #404]	; (8004d44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004bb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bb4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bbc:	4961      	ldr	r1, [pc, #388]	; (8004d44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004bbe:	4313      	orrs	r3, r2
 8004bc0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d00a      	beq.n	8004be6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004bd0:	4b5c      	ldr	r3, [pc, #368]	; (8004d44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004bd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bd6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004bde:	4959      	ldr	r1, [pc, #356]	; (8004d44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004be0:	4313      	orrs	r3, r2
 8004be2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d00a      	beq.n	8004c08 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004bf2:	4b54      	ldr	r3, [pc, #336]	; (8004d44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004bf4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bf8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c00:	4950      	ldr	r1, [pc, #320]	; (8004d44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c02:	4313      	orrs	r3, r2
 8004c04:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d00a      	beq.n	8004c2a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004c14:	4b4b      	ldr	r3, [pc, #300]	; (8004d44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c1a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c22:	4948      	ldr	r1, [pc, #288]	; (8004d44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c24:	4313      	orrs	r3, r2
 8004c26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d00a      	beq.n	8004c4c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004c36:	4b43      	ldr	r3, [pc, #268]	; (8004d44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c3c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c44:	493f      	ldr	r1, [pc, #252]	; (8004d44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c46:	4313      	orrs	r3, r2
 8004c48:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d028      	beq.n	8004caa <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004c58:	4b3a      	ldr	r3, [pc, #232]	; (8004d44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c5e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004c66:	4937      	ldr	r1, [pc, #220]	; (8004d44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c68:	4313      	orrs	r3, r2
 8004c6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004c72:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004c76:	d106      	bne.n	8004c86 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004c78:	4b32      	ldr	r3, [pc, #200]	; (8004d44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c7a:	68db      	ldr	r3, [r3, #12]
 8004c7c:	4a31      	ldr	r2, [pc, #196]	; (8004d44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c7e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004c82:	60d3      	str	r3, [r2, #12]
 8004c84:	e011      	b.n	8004caa <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004c8a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004c8e:	d10c      	bne.n	8004caa <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	3304      	adds	r3, #4
 8004c94:	2101      	movs	r1, #1
 8004c96:	4618      	mov	r0, r3
 8004c98:	f000 f8c8 	bl	8004e2c <RCCEx_PLLSAI1_Config>
 8004c9c:	4603      	mov	r3, r0
 8004c9e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004ca0:	7cfb      	ldrb	r3, [r7, #19]
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d001      	beq.n	8004caa <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8004ca6:	7cfb      	ldrb	r3, [r7, #19]
 8004ca8:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d028      	beq.n	8004d08 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004cb6:	4b23      	ldr	r3, [pc, #140]	; (8004d44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004cb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cbc:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cc4:	491f      	ldr	r1, [pc, #124]	; (8004d44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004cc6:	4313      	orrs	r3, r2
 8004cc8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cd0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004cd4:	d106      	bne.n	8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004cd6:	4b1b      	ldr	r3, [pc, #108]	; (8004d44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004cd8:	68db      	ldr	r3, [r3, #12]
 8004cda:	4a1a      	ldr	r2, [pc, #104]	; (8004d44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004cdc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004ce0:	60d3      	str	r3, [r2, #12]
 8004ce2:	e011      	b.n	8004d08 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ce8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004cec:	d10c      	bne.n	8004d08 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	3304      	adds	r3, #4
 8004cf2:	2101      	movs	r1, #1
 8004cf4:	4618      	mov	r0, r3
 8004cf6:	f000 f899 	bl	8004e2c <RCCEx_PLLSAI1_Config>
 8004cfa:	4603      	mov	r3, r0
 8004cfc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004cfe:	7cfb      	ldrb	r3, [r7, #19]
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d001      	beq.n	8004d08 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8004d04:	7cfb      	ldrb	r3, [r7, #19]
 8004d06:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d02b      	beq.n	8004d6c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004d14:	4b0b      	ldr	r3, [pc, #44]	; (8004d44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d1a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d22:	4908      	ldr	r1, [pc, #32]	; (8004d44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d24:	4313      	orrs	r3, r2
 8004d26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d2e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004d32:	d109      	bne.n	8004d48 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004d34:	4b03      	ldr	r3, [pc, #12]	; (8004d44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d36:	68db      	ldr	r3, [r3, #12]
 8004d38:	4a02      	ldr	r2, [pc, #8]	; (8004d44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d3a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004d3e:	60d3      	str	r3, [r2, #12]
 8004d40:	e014      	b.n	8004d6c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8004d42:	bf00      	nop
 8004d44:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d4c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004d50:	d10c      	bne.n	8004d6c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	3304      	adds	r3, #4
 8004d56:	2101      	movs	r1, #1
 8004d58:	4618      	mov	r0, r3
 8004d5a:	f000 f867 	bl	8004e2c <RCCEx_PLLSAI1_Config>
 8004d5e:	4603      	mov	r3, r0
 8004d60:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004d62:	7cfb      	ldrb	r3, [r7, #19]
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d001      	beq.n	8004d6c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004d68:	7cfb      	ldrb	r3, [r7, #19]
 8004d6a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d02f      	beq.n	8004dd8 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004d78:	4b2b      	ldr	r3, [pc, #172]	; (8004e28 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004d7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d7e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004d86:	4928      	ldr	r1, [pc, #160]	; (8004e28 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004d88:	4313      	orrs	r3, r2
 8004d8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004d92:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004d96:	d10d      	bne.n	8004db4 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	3304      	adds	r3, #4
 8004d9c:	2102      	movs	r1, #2
 8004d9e:	4618      	mov	r0, r3
 8004da0:	f000 f844 	bl	8004e2c <RCCEx_PLLSAI1_Config>
 8004da4:	4603      	mov	r3, r0
 8004da6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004da8:	7cfb      	ldrb	r3, [r7, #19]
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d014      	beq.n	8004dd8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004dae:	7cfb      	ldrb	r3, [r7, #19]
 8004db0:	74bb      	strb	r3, [r7, #18]
 8004db2:	e011      	b.n	8004dd8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004db8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004dbc:	d10c      	bne.n	8004dd8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	3320      	adds	r3, #32
 8004dc2:	2102      	movs	r1, #2
 8004dc4:	4618      	mov	r0, r3
 8004dc6:	f000 f925 	bl	8005014 <RCCEx_PLLSAI2_Config>
 8004dca:	4603      	mov	r3, r0
 8004dcc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004dce:	7cfb      	ldrb	r3, [r7, #19]
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d001      	beq.n	8004dd8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004dd4:	7cfb      	ldrb	r3, [r7, #19]
 8004dd6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d00a      	beq.n	8004dfa <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004de4:	4b10      	ldr	r3, [pc, #64]	; (8004e28 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004de6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dea:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004df2:	490d      	ldr	r1, [pc, #52]	; (8004e28 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004df4:	4313      	orrs	r3, r2
 8004df6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d00b      	beq.n	8004e1e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004e06:	4b08      	ldr	r3, [pc, #32]	; (8004e28 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004e08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e0c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004e16:	4904      	ldr	r1, [pc, #16]	; (8004e28 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004e18:	4313      	orrs	r3, r2
 8004e1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004e1e:	7cbb      	ldrb	r3, [r7, #18]
}
 8004e20:	4618      	mov	r0, r3
 8004e22:	3718      	adds	r7, #24
 8004e24:	46bd      	mov	sp, r7
 8004e26:	bd80      	pop	{r7, pc}
 8004e28:	40021000 	.word	0x40021000

08004e2c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004e2c:	b580      	push	{r7, lr}
 8004e2e:	b084      	sub	sp, #16
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	6078      	str	r0, [r7, #4]
 8004e34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004e36:	2300      	movs	r3, #0
 8004e38:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004e3a:	4b75      	ldr	r3, [pc, #468]	; (8005010 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e3c:	68db      	ldr	r3, [r3, #12]
 8004e3e:	f003 0303 	and.w	r3, r3, #3
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d018      	beq.n	8004e78 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004e46:	4b72      	ldr	r3, [pc, #456]	; (8005010 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e48:	68db      	ldr	r3, [r3, #12]
 8004e4a:	f003 0203 	and.w	r2, r3, #3
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	429a      	cmp	r2, r3
 8004e54:	d10d      	bne.n	8004e72 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
       ||
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d009      	beq.n	8004e72 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004e5e:	4b6c      	ldr	r3, [pc, #432]	; (8005010 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e60:	68db      	ldr	r3, [r3, #12]
 8004e62:	091b      	lsrs	r3, r3, #4
 8004e64:	f003 0307 	and.w	r3, r3, #7
 8004e68:	1c5a      	adds	r2, r3, #1
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	685b      	ldr	r3, [r3, #4]
       ||
 8004e6e:	429a      	cmp	r2, r3
 8004e70:	d047      	beq.n	8004f02 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004e72:	2301      	movs	r3, #1
 8004e74:	73fb      	strb	r3, [r7, #15]
 8004e76:	e044      	b.n	8004f02 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	2b03      	cmp	r3, #3
 8004e7e:	d018      	beq.n	8004eb2 <RCCEx_PLLSAI1_Config+0x86>
 8004e80:	2b03      	cmp	r3, #3
 8004e82:	d825      	bhi.n	8004ed0 <RCCEx_PLLSAI1_Config+0xa4>
 8004e84:	2b01      	cmp	r3, #1
 8004e86:	d002      	beq.n	8004e8e <RCCEx_PLLSAI1_Config+0x62>
 8004e88:	2b02      	cmp	r3, #2
 8004e8a:	d009      	beq.n	8004ea0 <RCCEx_PLLSAI1_Config+0x74>
 8004e8c:	e020      	b.n	8004ed0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004e8e:	4b60      	ldr	r3, [pc, #384]	; (8005010 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f003 0302 	and.w	r3, r3, #2
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d11d      	bne.n	8004ed6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004e9a:	2301      	movs	r3, #1
 8004e9c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004e9e:	e01a      	b.n	8004ed6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004ea0:	4b5b      	ldr	r3, [pc, #364]	; (8005010 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d116      	bne.n	8004eda <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004eac:	2301      	movs	r3, #1
 8004eae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004eb0:	e013      	b.n	8004eda <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004eb2:	4b57      	ldr	r3, [pc, #348]	; (8005010 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d10f      	bne.n	8004ede <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004ebe:	4b54      	ldr	r3, [pc, #336]	; (8005010 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d109      	bne.n	8004ede <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004eca:	2301      	movs	r3, #1
 8004ecc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004ece:	e006      	b.n	8004ede <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004ed0:	2301      	movs	r3, #1
 8004ed2:	73fb      	strb	r3, [r7, #15]
      break;
 8004ed4:	e004      	b.n	8004ee0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004ed6:	bf00      	nop
 8004ed8:	e002      	b.n	8004ee0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004eda:	bf00      	nop
 8004edc:	e000      	b.n	8004ee0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004ede:	bf00      	nop
    }

    if(status == HAL_OK)
 8004ee0:	7bfb      	ldrb	r3, [r7, #15]
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d10d      	bne.n	8004f02 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004ee6:	4b4a      	ldr	r3, [pc, #296]	; (8005010 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ee8:	68db      	ldr	r3, [r3, #12]
 8004eea:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	6819      	ldr	r1, [r3, #0]
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	685b      	ldr	r3, [r3, #4]
 8004ef6:	3b01      	subs	r3, #1
 8004ef8:	011b      	lsls	r3, r3, #4
 8004efa:	430b      	orrs	r3, r1
 8004efc:	4944      	ldr	r1, [pc, #272]	; (8005010 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004efe:	4313      	orrs	r3, r2
 8004f00:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004f02:	7bfb      	ldrb	r3, [r7, #15]
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d17d      	bne.n	8005004 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004f08:	4b41      	ldr	r3, [pc, #260]	; (8005010 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	4a40      	ldr	r2, [pc, #256]	; (8005010 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f0e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004f12:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f14:	f7fc fea0 	bl	8001c58 <HAL_GetTick>
 8004f18:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004f1a:	e009      	b.n	8004f30 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004f1c:	f7fc fe9c 	bl	8001c58 <HAL_GetTick>
 8004f20:	4602      	mov	r2, r0
 8004f22:	68bb      	ldr	r3, [r7, #8]
 8004f24:	1ad3      	subs	r3, r2, r3
 8004f26:	2b02      	cmp	r3, #2
 8004f28:	d902      	bls.n	8004f30 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004f2a:	2303      	movs	r3, #3
 8004f2c:	73fb      	strb	r3, [r7, #15]
        break;
 8004f2e:	e005      	b.n	8004f3c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004f30:	4b37      	ldr	r3, [pc, #220]	; (8005010 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d1ef      	bne.n	8004f1c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004f3c:	7bfb      	ldrb	r3, [r7, #15]
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d160      	bne.n	8005004 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004f42:	683b      	ldr	r3, [r7, #0]
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d111      	bne.n	8004f6c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004f48:	4b31      	ldr	r3, [pc, #196]	; (8005010 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f4a:	691b      	ldr	r3, [r3, #16]
 8004f4c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004f50:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f54:	687a      	ldr	r2, [r7, #4]
 8004f56:	6892      	ldr	r2, [r2, #8]
 8004f58:	0211      	lsls	r1, r2, #8
 8004f5a:	687a      	ldr	r2, [r7, #4]
 8004f5c:	68d2      	ldr	r2, [r2, #12]
 8004f5e:	0912      	lsrs	r2, r2, #4
 8004f60:	0452      	lsls	r2, r2, #17
 8004f62:	430a      	orrs	r2, r1
 8004f64:	492a      	ldr	r1, [pc, #168]	; (8005010 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f66:	4313      	orrs	r3, r2
 8004f68:	610b      	str	r3, [r1, #16]
 8004f6a:	e027      	b.n	8004fbc <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004f6c:	683b      	ldr	r3, [r7, #0]
 8004f6e:	2b01      	cmp	r3, #1
 8004f70:	d112      	bne.n	8004f98 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004f72:	4b27      	ldr	r3, [pc, #156]	; (8005010 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f74:	691b      	ldr	r3, [r3, #16]
 8004f76:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004f7a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004f7e:	687a      	ldr	r2, [r7, #4]
 8004f80:	6892      	ldr	r2, [r2, #8]
 8004f82:	0211      	lsls	r1, r2, #8
 8004f84:	687a      	ldr	r2, [r7, #4]
 8004f86:	6912      	ldr	r2, [r2, #16]
 8004f88:	0852      	lsrs	r2, r2, #1
 8004f8a:	3a01      	subs	r2, #1
 8004f8c:	0552      	lsls	r2, r2, #21
 8004f8e:	430a      	orrs	r2, r1
 8004f90:	491f      	ldr	r1, [pc, #124]	; (8005010 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f92:	4313      	orrs	r3, r2
 8004f94:	610b      	str	r3, [r1, #16]
 8004f96:	e011      	b.n	8004fbc <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004f98:	4b1d      	ldr	r3, [pc, #116]	; (8005010 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f9a:	691b      	ldr	r3, [r3, #16]
 8004f9c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004fa0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004fa4:	687a      	ldr	r2, [r7, #4]
 8004fa6:	6892      	ldr	r2, [r2, #8]
 8004fa8:	0211      	lsls	r1, r2, #8
 8004faa:	687a      	ldr	r2, [r7, #4]
 8004fac:	6952      	ldr	r2, [r2, #20]
 8004fae:	0852      	lsrs	r2, r2, #1
 8004fb0:	3a01      	subs	r2, #1
 8004fb2:	0652      	lsls	r2, r2, #25
 8004fb4:	430a      	orrs	r2, r1
 8004fb6:	4916      	ldr	r1, [pc, #88]	; (8005010 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004fb8:	4313      	orrs	r3, r2
 8004fba:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004fbc:	4b14      	ldr	r3, [pc, #80]	; (8005010 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	4a13      	ldr	r2, [pc, #76]	; (8005010 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004fc2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004fc6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fc8:	f7fc fe46 	bl	8001c58 <HAL_GetTick>
 8004fcc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004fce:	e009      	b.n	8004fe4 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004fd0:	f7fc fe42 	bl	8001c58 <HAL_GetTick>
 8004fd4:	4602      	mov	r2, r0
 8004fd6:	68bb      	ldr	r3, [r7, #8]
 8004fd8:	1ad3      	subs	r3, r2, r3
 8004fda:	2b02      	cmp	r3, #2
 8004fdc:	d902      	bls.n	8004fe4 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8004fde:	2303      	movs	r3, #3
 8004fe0:	73fb      	strb	r3, [r7, #15]
          break;
 8004fe2:	e005      	b.n	8004ff0 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004fe4:	4b0a      	ldr	r3, [pc, #40]	; (8005010 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d0ef      	beq.n	8004fd0 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004ff0:	7bfb      	ldrb	r3, [r7, #15]
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d106      	bne.n	8005004 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004ff6:	4b06      	ldr	r3, [pc, #24]	; (8005010 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ff8:	691a      	ldr	r2, [r3, #16]
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	699b      	ldr	r3, [r3, #24]
 8004ffe:	4904      	ldr	r1, [pc, #16]	; (8005010 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005000:	4313      	orrs	r3, r2
 8005002:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005004:	7bfb      	ldrb	r3, [r7, #15]
}
 8005006:	4618      	mov	r0, r3
 8005008:	3710      	adds	r7, #16
 800500a:	46bd      	mov	sp, r7
 800500c:	bd80      	pop	{r7, pc}
 800500e:	bf00      	nop
 8005010:	40021000 	.word	0x40021000

08005014 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005014:	b580      	push	{r7, lr}
 8005016:	b084      	sub	sp, #16
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]
 800501c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800501e:	2300      	movs	r3, #0
 8005020:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005022:	4b6a      	ldr	r3, [pc, #424]	; (80051cc <RCCEx_PLLSAI2_Config+0x1b8>)
 8005024:	68db      	ldr	r3, [r3, #12]
 8005026:	f003 0303 	and.w	r3, r3, #3
 800502a:	2b00      	cmp	r3, #0
 800502c:	d018      	beq.n	8005060 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800502e:	4b67      	ldr	r3, [pc, #412]	; (80051cc <RCCEx_PLLSAI2_Config+0x1b8>)
 8005030:	68db      	ldr	r3, [r3, #12]
 8005032:	f003 0203 	and.w	r2, r3, #3
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	429a      	cmp	r2, r3
 800503c:	d10d      	bne.n	800505a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
       ||
 8005042:	2b00      	cmp	r3, #0
 8005044:	d009      	beq.n	800505a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8005046:	4b61      	ldr	r3, [pc, #388]	; (80051cc <RCCEx_PLLSAI2_Config+0x1b8>)
 8005048:	68db      	ldr	r3, [r3, #12]
 800504a:	091b      	lsrs	r3, r3, #4
 800504c:	f003 0307 	and.w	r3, r3, #7
 8005050:	1c5a      	adds	r2, r3, #1
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	685b      	ldr	r3, [r3, #4]
       ||
 8005056:	429a      	cmp	r2, r3
 8005058:	d047      	beq.n	80050ea <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800505a:	2301      	movs	r3, #1
 800505c:	73fb      	strb	r3, [r7, #15]
 800505e:	e044      	b.n	80050ea <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	2b03      	cmp	r3, #3
 8005066:	d018      	beq.n	800509a <RCCEx_PLLSAI2_Config+0x86>
 8005068:	2b03      	cmp	r3, #3
 800506a:	d825      	bhi.n	80050b8 <RCCEx_PLLSAI2_Config+0xa4>
 800506c:	2b01      	cmp	r3, #1
 800506e:	d002      	beq.n	8005076 <RCCEx_PLLSAI2_Config+0x62>
 8005070:	2b02      	cmp	r3, #2
 8005072:	d009      	beq.n	8005088 <RCCEx_PLLSAI2_Config+0x74>
 8005074:	e020      	b.n	80050b8 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005076:	4b55      	ldr	r3, [pc, #340]	; (80051cc <RCCEx_PLLSAI2_Config+0x1b8>)
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f003 0302 	and.w	r3, r3, #2
 800507e:	2b00      	cmp	r3, #0
 8005080:	d11d      	bne.n	80050be <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8005082:	2301      	movs	r3, #1
 8005084:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005086:	e01a      	b.n	80050be <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005088:	4b50      	ldr	r3, [pc, #320]	; (80051cc <RCCEx_PLLSAI2_Config+0x1b8>)
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005090:	2b00      	cmp	r3, #0
 8005092:	d116      	bne.n	80050c2 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8005094:	2301      	movs	r3, #1
 8005096:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005098:	e013      	b.n	80050c2 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800509a:	4b4c      	ldr	r3, [pc, #304]	; (80051cc <RCCEx_PLLSAI2_Config+0x1b8>)
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d10f      	bne.n	80050c6 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80050a6:	4b49      	ldr	r3, [pc, #292]	; (80051cc <RCCEx_PLLSAI2_Config+0x1b8>)
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d109      	bne.n	80050c6 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80050b2:	2301      	movs	r3, #1
 80050b4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80050b6:	e006      	b.n	80050c6 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80050b8:	2301      	movs	r3, #1
 80050ba:	73fb      	strb	r3, [r7, #15]
      break;
 80050bc:	e004      	b.n	80050c8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80050be:	bf00      	nop
 80050c0:	e002      	b.n	80050c8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80050c2:	bf00      	nop
 80050c4:	e000      	b.n	80050c8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80050c6:	bf00      	nop
    }

    if(status == HAL_OK)
 80050c8:	7bfb      	ldrb	r3, [r7, #15]
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d10d      	bne.n	80050ea <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80050ce:	4b3f      	ldr	r3, [pc, #252]	; (80051cc <RCCEx_PLLSAI2_Config+0x1b8>)
 80050d0:	68db      	ldr	r3, [r3, #12]
 80050d2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	6819      	ldr	r1, [r3, #0]
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	685b      	ldr	r3, [r3, #4]
 80050de:	3b01      	subs	r3, #1
 80050e0:	011b      	lsls	r3, r3, #4
 80050e2:	430b      	orrs	r3, r1
 80050e4:	4939      	ldr	r1, [pc, #228]	; (80051cc <RCCEx_PLLSAI2_Config+0x1b8>)
 80050e6:	4313      	orrs	r3, r2
 80050e8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80050ea:	7bfb      	ldrb	r3, [r7, #15]
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d167      	bne.n	80051c0 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80050f0:	4b36      	ldr	r3, [pc, #216]	; (80051cc <RCCEx_PLLSAI2_Config+0x1b8>)
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	4a35      	ldr	r2, [pc, #212]	; (80051cc <RCCEx_PLLSAI2_Config+0x1b8>)
 80050f6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80050fa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80050fc:	f7fc fdac 	bl	8001c58 <HAL_GetTick>
 8005100:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005102:	e009      	b.n	8005118 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005104:	f7fc fda8 	bl	8001c58 <HAL_GetTick>
 8005108:	4602      	mov	r2, r0
 800510a:	68bb      	ldr	r3, [r7, #8]
 800510c:	1ad3      	subs	r3, r2, r3
 800510e:	2b02      	cmp	r3, #2
 8005110:	d902      	bls.n	8005118 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005112:	2303      	movs	r3, #3
 8005114:	73fb      	strb	r3, [r7, #15]
        break;
 8005116:	e005      	b.n	8005124 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005118:	4b2c      	ldr	r3, [pc, #176]	; (80051cc <RCCEx_PLLSAI2_Config+0x1b8>)
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005120:	2b00      	cmp	r3, #0
 8005122:	d1ef      	bne.n	8005104 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005124:	7bfb      	ldrb	r3, [r7, #15]
 8005126:	2b00      	cmp	r3, #0
 8005128:	d14a      	bne.n	80051c0 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800512a:	683b      	ldr	r3, [r7, #0]
 800512c:	2b00      	cmp	r3, #0
 800512e:	d111      	bne.n	8005154 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005130:	4b26      	ldr	r3, [pc, #152]	; (80051cc <RCCEx_PLLSAI2_Config+0x1b8>)
 8005132:	695b      	ldr	r3, [r3, #20]
 8005134:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8005138:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800513c:	687a      	ldr	r2, [r7, #4]
 800513e:	6892      	ldr	r2, [r2, #8]
 8005140:	0211      	lsls	r1, r2, #8
 8005142:	687a      	ldr	r2, [r7, #4]
 8005144:	68d2      	ldr	r2, [r2, #12]
 8005146:	0912      	lsrs	r2, r2, #4
 8005148:	0452      	lsls	r2, r2, #17
 800514a:	430a      	orrs	r2, r1
 800514c:	491f      	ldr	r1, [pc, #124]	; (80051cc <RCCEx_PLLSAI2_Config+0x1b8>)
 800514e:	4313      	orrs	r3, r2
 8005150:	614b      	str	r3, [r1, #20]
 8005152:	e011      	b.n	8005178 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005154:	4b1d      	ldr	r3, [pc, #116]	; (80051cc <RCCEx_PLLSAI2_Config+0x1b8>)
 8005156:	695b      	ldr	r3, [r3, #20]
 8005158:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800515c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005160:	687a      	ldr	r2, [r7, #4]
 8005162:	6892      	ldr	r2, [r2, #8]
 8005164:	0211      	lsls	r1, r2, #8
 8005166:	687a      	ldr	r2, [r7, #4]
 8005168:	6912      	ldr	r2, [r2, #16]
 800516a:	0852      	lsrs	r2, r2, #1
 800516c:	3a01      	subs	r2, #1
 800516e:	0652      	lsls	r2, r2, #25
 8005170:	430a      	orrs	r2, r1
 8005172:	4916      	ldr	r1, [pc, #88]	; (80051cc <RCCEx_PLLSAI2_Config+0x1b8>)
 8005174:	4313      	orrs	r3, r2
 8005176:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005178:	4b14      	ldr	r3, [pc, #80]	; (80051cc <RCCEx_PLLSAI2_Config+0x1b8>)
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	4a13      	ldr	r2, [pc, #76]	; (80051cc <RCCEx_PLLSAI2_Config+0x1b8>)
 800517e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005182:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005184:	f7fc fd68 	bl	8001c58 <HAL_GetTick>
 8005188:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800518a:	e009      	b.n	80051a0 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800518c:	f7fc fd64 	bl	8001c58 <HAL_GetTick>
 8005190:	4602      	mov	r2, r0
 8005192:	68bb      	ldr	r3, [r7, #8]
 8005194:	1ad3      	subs	r3, r2, r3
 8005196:	2b02      	cmp	r3, #2
 8005198:	d902      	bls.n	80051a0 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800519a:	2303      	movs	r3, #3
 800519c:	73fb      	strb	r3, [r7, #15]
          break;
 800519e:	e005      	b.n	80051ac <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80051a0:	4b0a      	ldr	r3, [pc, #40]	; (80051cc <RCCEx_PLLSAI2_Config+0x1b8>)
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d0ef      	beq.n	800518c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80051ac:	7bfb      	ldrb	r3, [r7, #15]
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d106      	bne.n	80051c0 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80051b2:	4b06      	ldr	r3, [pc, #24]	; (80051cc <RCCEx_PLLSAI2_Config+0x1b8>)
 80051b4:	695a      	ldr	r2, [r3, #20]
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	695b      	ldr	r3, [r3, #20]
 80051ba:	4904      	ldr	r1, [pc, #16]	; (80051cc <RCCEx_PLLSAI2_Config+0x1b8>)
 80051bc:	4313      	orrs	r3, r2
 80051be:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80051c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80051c2:	4618      	mov	r0, r3
 80051c4:	3710      	adds	r7, #16
 80051c6:	46bd      	mov	sp, r7
 80051c8:	bd80      	pop	{r7, pc}
 80051ca:	bf00      	nop
 80051cc:	40021000 	.word	0x40021000

080051d0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80051d0:	b580      	push	{r7, lr}
 80051d2:	b082      	sub	sp, #8
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d101      	bne.n	80051e2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80051de:	2301      	movs	r3, #1
 80051e0:	e049      	b.n	8005276 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051e8:	b2db      	uxtb	r3, r3
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d106      	bne.n	80051fc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	2200      	movs	r2, #0
 80051f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80051f6:	6878      	ldr	r0, [r7, #4]
 80051f8:	f7fc fa8c 	bl	8001714 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2202      	movs	r2, #2
 8005200:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681a      	ldr	r2, [r3, #0]
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	3304      	adds	r3, #4
 800520c:	4619      	mov	r1, r3
 800520e:	4610      	mov	r0, r2
 8005210:	f000 fd16 	bl	8005c40 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2201      	movs	r2, #1
 8005218:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2201      	movs	r2, #1
 8005220:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2201      	movs	r2, #1
 8005228:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2201      	movs	r2, #1
 8005230:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2201      	movs	r2, #1
 8005238:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2201      	movs	r2, #1
 8005240:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2201      	movs	r2, #1
 8005248:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2201      	movs	r2, #1
 8005250:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2201      	movs	r2, #1
 8005258:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2201      	movs	r2, #1
 8005260:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2201      	movs	r2, #1
 8005268:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2201      	movs	r2, #1
 8005270:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005274:	2300      	movs	r3, #0
}
 8005276:	4618      	mov	r0, r3
 8005278:	3708      	adds	r7, #8
 800527a:	46bd      	mov	sp, r7
 800527c:	bd80      	pop	{r7, pc}
	...

08005280 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005280:	b480      	push	{r7}
 8005282:	b085      	sub	sp, #20
 8005284:	af00      	add	r7, sp, #0
 8005286:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800528e:	b2db      	uxtb	r3, r3
 8005290:	2b01      	cmp	r3, #1
 8005292:	d001      	beq.n	8005298 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005294:	2301      	movs	r3, #1
 8005296:	e04f      	b.n	8005338 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	2202      	movs	r2, #2
 800529c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	68da      	ldr	r2, [r3, #12]
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	f042 0201 	orr.w	r2, r2, #1
 80052ae:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	4a23      	ldr	r2, [pc, #140]	; (8005344 <HAL_TIM_Base_Start_IT+0xc4>)
 80052b6:	4293      	cmp	r3, r2
 80052b8:	d01d      	beq.n	80052f6 <HAL_TIM_Base_Start_IT+0x76>
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052c2:	d018      	beq.n	80052f6 <HAL_TIM_Base_Start_IT+0x76>
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	4a1f      	ldr	r2, [pc, #124]	; (8005348 <HAL_TIM_Base_Start_IT+0xc8>)
 80052ca:	4293      	cmp	r3, r2
 80052cc:	d013      	beq.n	80052f6 <HAL_TIM_Base_Start_IT+0x76>
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	4a1e      	ldr	r2, [pc, #120]	; (800534c <HAL_TIM_Base_Start_IT+0xcc>)
 80052d4:	4293      	cmp	r3, r2
 80052d6:	d00e      	beq.n	80052f6 <HAL_TIM_Base_Start_IT+0x76>
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	4a1c      	ldr	r2, [pc, #112]	; (8005350 <HAL_TIM_Base_Start_IT+0xd0>)
 80052de:	4293      	cmp	r3, r2
 80052e0:	d009      	beq.n	80052f6 <HAL_TIM_Base_Start_IT+0x76>
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	4a1b      	ldr	r2, [pc, #108]	; (8005354 <HAL_TIM_Base_Start_IT+0xd4>)
 80052e8:	4293      	cmp	r3, r2
 80052ea:	d004      	beq.n	80052f6 <HAL_TIM_Base_Start_IT+0x76>
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	4a19      	ldr	r2, [pc, #100]	; (8005358 <HAL_TIM_Base_Start_IT+0xd8>)
 80052f2:	4293      	cmp	r3, r2
 80052f4:	d115      	bne.n	8005322 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	689a      	ldr	r2, [r3, #8]
 80052fc:	4b17      	ldr	r3, [pc, #92]	; (800535c <HAL_TIM_Base_Start_IT+0xdc>)
 80052fe:	4013      	ands	r3, r2
 8005300:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	2b06      	cmp	r3, #6
 8005306:	d015      	beq.n	8005334 <HAL_TIM_Base_Start_IT+0xb4>
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800530e:	d011      	beq.n	8005334 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	681a      	ldr	r2, [r3, #0]
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f042 0201 	orr.w	r2, r2, #1
 800531e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005320:	e008      	b.n	8005334 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	681a      	ldr	r2, [r3, #0]
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f042 0201 	orr.w	r2, r2, #1
 8005330:	601a      	str	r2, [r3, #0]
 8005332:	e000      	b.n	8005336 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005334:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005336:	2300      	movs	r3, #0
}
 8005338:	4618      	mov	r0, r3
 800533a:	3714      	adds	r7, #20
 800533c:	46bd      	mov	sp, r7
 800533e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005342:	4770      	bx	lr
 8005344:	40012c00 	.word	0x40012c00
 8005348:	40000400 	.word	0x40000400
 800534c:	40000800 	.word	0x40000800
 8005350:	40000c00 	.word	0x40000c00
 8005354:	40013400 	.word	0x40013400
 8005358:	40014000 	.word	0x40014000
 800535c:	00010007 	.word	0x00010007

08005360 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005360:	b580      	push	{r7, lr}
 8005362:	b082      	sub	sp, #8
 8005364:	af00      	add	r7, sp, #0
 8005366:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2b00      	cmp	r3, #0
 800536c:	d101      	bne.n	8005372 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800536e:	2301      	movs	r3, #1
 8005370:	e049      	b.n	8005406 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005378:	b2db      	uxtb	r3, r3
 800537a:	2b00      	cmp	r3, #0
 800537c:	d106      	bne.n	800538c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	2200      	movs	r2, #0
 8005382:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005386:	6878      	ldr	r0, [r7, #4]
 8005388:	f000 f841 	bl	800540e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	2202      	movs	r2, #2
 8005390:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681a      	ldr	r2, [r3, #0]
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	3304      	adds	r3, #4
 800539c:	4619      	mov	r1, r3
 800539e:	4610      	mov	r0, r2
 80053a0:	f000 fc4e 	bl	8005c40 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2201      	movs	r2, #1
 80053a8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	2201      	movs	r2, #1
 80053b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	2201      	movs	r2, #1
 80053b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	2201      	movs	r2, #1
 80053c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2201      	movs	r2, #1
 80053c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2201      	movs	r2, #1
 80053d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	2201      	movs	r2, #1
 80053d8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	2201      	movs	r2, #1
 80053e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	2201      	movs	r2, #1
 80053e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2201      	movs	r2, #1
 80053f0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	2201      	movs	r2, #1
 80053f8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	2201      	movs	r2, #1
 8005400:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005404:	2300      	movs	r3, #0
}
 8005406:	4618      	mov	r0, r3
 8005408:	3708      	adds	r7, #8
 800540a:	46bd      	mov	sp, r7
 800540c:	bd80      	pop	{r7, pc}

0800540e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800540e:	b480      	push	{r7}
 8005410:	b083      	sub	sp, #12
 8005412:	af00      	add	r7, sp, #0
 8005414:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005416:	bf00      	nop
 8005418:	370c      	adds	r7, #12
 800541a:	46bd      	mov	sp, r7
 800541c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005420:	4770      	bx	lr
	...

08005424 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005424:	b580      	push	{r7, lr}
 8005426:	b084      	sub	sp, #16
 8005428:	af00      	add	r7, sp, #0
 800542a:	6078      	str	r0, [r7, #4]
 800542c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800542e:	683b      	ldr	r3, [r7, #0]
 8005430:	2b00      	cmp	r3, #0
 8005432:	d109      	bne.n	8005448 <HAL_TIM_PWM_Start+0x24>
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800543a:	b2db      	uxtb	r3, r3
 800543c:	2b01      	cmp	r3, #1
 800543e:	bf14      	ite	ne
 8005440:	2301      	movne	r3, #1
 8005442:	2300      	moveq	r3, #0
 8005444:	b2db      	uxtb	r3, r3
 8005446:	e03c      	b.n	80054c2 <HAL_TIM_PWM_Start+0x9e>
 8005448:	683b      	ldr	r3, [r7, #0]
 800544a:	2b04      	cmp	r3, #4
 800544c:	d109      	bne.n	8005462 <HAL_TIM_PWM_Start+0x3e>
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005454:	b2db      	uxtb	r3, r3
 8005456:	2b01      	cmp	r3, #1
 8005458:	bf14      	ite	ne
 800545a:	2301      	movne	r3, #1
 800545c:	2300      	moveq	r3, #0
 800545e:	b2db      	uxtb	r3, r3
 8005460:	e02f      	b.n	80054c2 <HAL_TIM_PWM_Start+0x9e>
 8005462:	683b      	ldr	r3, [r7, #0]
 8005464:	2b08      	cmp	r3, #8
 8005466:	d109      	bne.n	800547c <HAL_TIM_PWM_Start+0x58>
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800546e:	b2db      	uxtb	r3, r3
 8005470:	2b01      	cmp	r3, #1
 8005472:	bf14      	ite	ne
 8005474:	2301      	movne	r3, #1
 8005476:	2300      	moveq	r3, #0
 8005478:	b2db      	uxtb	r3, r3
 800547a:	e022      	b.n	80054c2 <HAL_TIM_PWM_Start+0x9e>
 800547c:	683b      	ldr	r3, [r7, #0]
 800547e:	2b0c      	cmp	r3, #12
 8005480:	d109      	bne.n	8005496 <HAL_TIM_PWM_Start+0x72>
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005488:	b2db      	uxtb	r3, r3
 800548a:	2b01      	cmp	r3, #1
 800548c:	bf14      	ite	ne
 800548e:	2301      	movne	r3, #1
 8005490:	2300      	moveq	r3, #0
 8005492:	b2db      	uxtb	r3, r3
 8005494:	e015      	b.n	80054c2 <HAL_TIM_PWM_Start+0x9e>
 8005496:	683b      	ldr	r3, [r7, #0]
 8005498:	2b10      	cmp	r3, #16
 800549a:	d109      	bne.n	80054b0 <HAL_TIM_PWM_Start+0x8c>
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80054a2:	b2db      	uxtb	r3, r3
 80054a4:	2b01      	cmp	r3, #1
 80054a6:	bf14      	ite	ne
 80054a8:	2301      	movne	r3, #1
 80054aa:	2300      	moveq	r3, #0
 80054ac:	b2db      	uxtb	r3, r3
 80054ae:	e008      	b.n	80054c2 <HAL_TIM_PWM_Start+0x9e>
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80054b6:	b2db      	uxtb	r3, r3
 80054b8:	2b01      	cmp	r3, #1
 80054ba:	bf14      	ite	ne
 80054bc:	2301      	movne	r3, #1
 80054be:	2300      	moveq	r3, #0
 80054c0:	b2db      	uxtb	r3, r3
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d001      	beq.n	80054ca <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80054c6:	2301      	movs	r3, #1
 80054c8:	e09c      	b.n	8005604 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80054ca:	683b      	ldr	r3, [r7, #0]
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d104      	bne.n	80054da <HAL_TIM_PWM_Start+0xb6>
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	2202      	movs	r2, #2
 80054d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80054d8:	e023      	b.n	8005522 <HAL_TIM_PWM_Start+0xfe>
 80054da:	683b      	ldr	r3, [r7, #0]
 80054dc:	2b04      	cmp	r3, #4
 80054de:	d104      	bne.n	80054ea <HAL_TIM_PWM_Start+0xc6>
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	2202      	movs	r2, #2
 80054e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80054e8:	e01b      	b.n	8005522 <HAL_TIM_PWM_Start+0xfe>
 80054ea:	683b      	ldr	r3, [r7, #0]
 80054ec:	2b08      	cmp	r3, #8
 80054ee:	d104      	bne.n	80054fa <HAL_TIM_PWM_Start+0xd6>
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2202      	movs	r2, #2
 80054f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80054f8:	e013      	b.n	8005522 <HAL_TIM_PWM_Start+0xfe>
 80054fa:	683b      	ldr	r3, [r7, #0]
 80054fc:	2b0c      	cmp	r3, #12
 80054fe:	d104      	bne.n	800550a <HAL_TIM_PWM_Start+0xe6>
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	2202      	movs	r2, #2
 8005504:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005508:	e00b      	b.n	8005522 <HAL_TIM_PWM_Start+0xfe>
 800550a:	683b      	ldr	r3, [r7, #0]
 800550c:	2b10      	cmp	r3, #16
 800550e:	d104      	bne.n	800551a <HAL_TIM_PWM_Start+0xf6>
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2202      	movs	r2, #2
 8005514:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005518:	e003      	b.n	8005522 <HAL_TIM_PWM_Start+0xfe>
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	2202      	movs	r2, #2
 800551e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	2201      	movs	r2, #1
 8005528:	6839      	ldr	r1, [r7, #0]
 800552a:	4618      	mov	r0, r3
 800552c:	f000 ff92 	bl	8006454 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	4a35      	ldr	r2, [pc, #212]	; (800560c <HAL_TIM_PWM_Start+0x1e8>)
 8005536:	4293      	cmp	r3, r2
 8005538:	d013      	beq.n	8005562 <HAL_TIM_PWM_Start+0x13e>
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	4a34      	ldr	r2, [pc, #208]	; (8005610 <HAL_TIM_PWM_Start+0x1ec>)
 8005540:	4293      	cmp	r3, r2
 8005542:	d00e      	beq.n	8005562 <HAL_TIM_PWM_Start+0x13e>
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	4a32      	ldr	r2, [pc, #200]	; (8005614 <HAL_TIM_PWM_Start+0x1f0>)
 800554a:	4293      	cmp	r3, r2
 800554c:	d009      	beq.n	8005562 <HAL_TIM_PWM_Start+0x13e>
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	4a31      	ldr	r2, [pc, #196]	; (8005618 <HAL_TIM_PWM_Start+0x1f4>)
 8005554:	4293      	cmp	r3, r2
 8005556:	d004      	beq.n	8005562 <HAL_TIM_PWM_Start+0x13e>
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	4a2f      	ldr	r2, [pc, #188]	; (800561c <HAL_TIM_PWM_Start+0x1f8>)
 800555e:	4293      	cmp	r3, r2
 8005560:	d101      	bne.n	8005566 <HAL_TIM_PWM_Start+0x142>
 8005562:	2301      	movs	r3, #1
 8005564:	e000      	b.n	8005568 <HAL_TIM_PWM_Start+0x144>
 8005566:	2300      	movs	r3, #0
 8005568:	2b00      	cmp	r3, #0
 800556a:	d007      	beq.n	800557c <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800557a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	4a22      	ldr	r2, [pc, #136]	; (800560c <HAL_TIM_PWM_Start+0x1e8>)
 8005582:	4293      	cmp	r3, r2
 8005584:	d01d      	beq.n	80055c2 <HAL_TIM_PWM_Start+0x19e>
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800558e:	d018      	beq.n	80055c2 <HAL_TIM_PWM_Start+0x19e>
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	4a22      	ldr	r2, [pc, #136]	; (8005620 <HAL_TIM_PWM_Start+0x1fc>)
 8005596:	4293      	cmp	r3, r2
 8005598:	d013      	beq.n	80055c2 <HAL_TIM_PWM_Start+0x19e>
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	4a21      	ldr	r2, [pc, #132]	; (8005624 <HAL_TIM_PWM_Start+0x200>)
 80055a0:	4293      	cmp	r3, r2
 80055a2:	d00e      	beq.n	80055c2 <HAL_TIM_PWM_Start+0x19e>
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	4a1f      	ldr	r2, [pc, #124]	; (8005628 <HAL_TIM_PWM_Start+0x204>)
 80055aa:	4293      	cmp	r3, r2
 80055ac:	d009      	beq.n	80055c2 <HAL_TIM_PWM_Start+0x19e>
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	4a17      	ldr	r2, [pc, #92]	; (8005610 <HAL_TIM_PWM_Start+0x1ec>)
 80055b4:	4293      	cmp	r3, r2
 80055b6:	d004      	beq.n	80055c2 <HAL_TIM_PWM_Start+0x19e>
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	4a15      	ldr	r2, [pc, #84]	; (8005614 <HAL_TIM_PWM_Start+0x1f0>)
 80055be:	4293      	cmp	r3, r2
 80055c0:	d115      	bne.n	80055ee <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	689a      	ldr	r2, [r3, #8]
 80055c8:	4b18      	ldr	r3, [pc, #96]	; (800562c <HAL_TIM_PWM_Start+0x208>)
 80055ca:	4013      	ands	r3, r2
 80055cc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	2b06      	cmp	r3, #6
 80055d2:	d015      	beq.n	8005600 <HAL_TIM_PWM_Start+0x1dc>
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80055da:	d011      	beq.n	8005600 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	681a      	ldr	r2, [r3, #0]
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	f042 0201 	orr.w	r2, r2, #1
 80055ea:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055ec:	e008      	b.n	8005600 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	681a      	ldr	r2, [r3, #0]
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	f042 0201 	orr.w	r2, r2, #1
 80055fc:	601a      	str	r2, [r3, #0]
 80055fe:	e000      	b.n	8005602 <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005600:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005602:	2300      	movs	r3, #0
}
 8005604:	4618      	mov	r0, r3
 8005606:	3710      	adds	r7, #16
 8005608:	46bd      	mov	sp, r7
 800560a:	bd80      	pop	{r7, pc}
 800560c:	40012c00 	.word	0x40012c00
 8005610:	40013400 	.word	0x40013400
 8005614:	40014000 	.word	0x40014000
 8005618:	40014400 	.word	0x40014400
 800561c:	40014800 	.word	0x40014800
 8005620:	40000400 	.word	0x40000400
 8005624:	40000800 	.word	0x40000800
 8005628:	40000c00 	.word	0x40000c00
 800562c:	00010007 	.word	0x00010007

08005630 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005630:	b580      	push	{r7, lr}
 8005632:	b084      	sub	sp, #16
 8005634:	af00      	add	r7, sp, #0
 8005636:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	68db      	ldr	r3, [r3, #12]
 800563e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	691b      	ldr	r3, [r3, #16]
 8005646:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005648:	68bb      	ldr	r3, [r7, #8]
 800564a:	f003 0302 	and.w	r3, r3, #2
 800564e:	2b00      	cmp	r3, #0
 8005650:	d020      	beq.n	8005694 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	f003 0302 	and.w	r3, r3, #2
 8005658:	2b00      	cmp	r3, #0
 800565a:	d01b      	beq.n	8005694 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	f06f 0202 	mvn.w	r2, #2
 8005664:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	2201      	movs	r2, #1
 800566a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	699b      	ldr	r3, [r3, #24]
 8005672:	f003 0303 	and.w	r3, r3, #3
 8005676:	2b00      	cmp	r3, #0
 8005678:	d003      	beq.n	8005682 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800567a:	6878      	ldr	r0, [r7, #4]
 800567c:	f000 fac1 	bl	8005c02 <HAL_TIM_IC_CaptureCallback>
 8005680:	e005      	b.n	800568e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005682:	6878      	ldr	r0, [r7, #4]
 8005684:	f000 fab3 	bl	8005bee <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005688:	6878      	ldr	r0, [r7, #4]
 800568a:	f000 fac4 	bl	8005c16 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	2200      	movs	r2, #0
 8005692:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005694:	68bb      	ldr	r3, [r7, #8]
 8005696:	f003 0304 	and.w	r3, r3, #4
 800569a:	2b00      	cmp	r3, #0
 800569c:	d020      	beq.n	80056e0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	f003 0304 	and.w	r3, r3, #4
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d01b      	beq.n	80056e0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	f06f 0204 	mvn.w	r2, #4
 80056b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	2202      	movs	r2, #2
 80056b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	699b      	ldr	r3, [r3, #24]
 80056be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d003      	beq.n	80056ce <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80056c6:	6878      	ldr	r0, [r7, #4]
 80056c8:	f000 fa9b 	bl	8005c02 <HAL_TIM_IC_CaptureCallback>
 80056cc:	e005      	b.n	80056da <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80056ce:	6878      	ldr	r0, [r7, #4]
 80056d0:	f000 fa8d 	bl	8005bee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056d4:	6878      	ldr	r0, [r7, #4]
 80056d6:	f000 fa9e 	bl	8005c16 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	2200      	movs	r2, #0
 80056de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80056e0:	68bb      	ldr	r3, [r7, #8]
 80056e2:	f003 0308 	and.w	r3, r3, #8
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d020      	beq.n	800572c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	f003 0308 	and.w	r3, r3, #8
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d01b      	beq.n	800572c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	f06f 0208 	mvn.w	r2, #8
 80056fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	2204      	movs	r2, #4
 8005702:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	69db      	ldr	r3, [r3, #28]
 800570a:	f003 0303 	and.w	r3, r3, #3
 800570e:	2b00      	cmp	r3, #0
 8005710:	d003      	beq.n	800571a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005712:	6878      	ldr	r0, [r7, #4]
 8005714:	f000 fa75 	bl	8005c02 <HAL_TIM_IC_CaptureCallback>
 8005718:	e005      	b.n	8005726 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800571a:	6878      	ldr	r0, [r7, #4]
 800571c:	f000 fa67 	bl	8005bee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005720:	6878      	ldr	r0, [r7, #4]
 8005722:	f000 fa78 	bl	8005c16 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	2200      	movs	r2, #0
 800572a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800572c:	68bb      	ldr	r3, [r7, #8]
 800572e:	f003 0310 	and.w	r3, r3, #16
 8005732:	2b00      	cmp	r3, #0
 8005734:	d020      	beq.n	8005778 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	f003 0310 	and.w	r3, r3, #16
 800573c:	2b00      	cmp	r3, #0
 800573e:	d01b      	beq.n	8005778 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	f06f 0210 	mvn.w	r2, #16
 8005748:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	2208      	movs	r2, #8
 800574e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	69db      	ldr	r3, [r3, #28]
 8005756:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800575a:	2b00      	cmp	r3, #0
 800575c:	d003      	beq.n	8005766 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800575e:	6878      	ldr	r0, [r7, #4]
 8005760:	f000 fa4f 	bl	8005c02 <HAL_TIM_IC_CaptureCallback>
 8005764:	e005      	b.n	8005772 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005766:	6878      	ldr	r0, [r7, #4]
 8005768:	f000 fa41 	bl	8005bee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800576c:	6878      	ldr	r0, [r7, #4]
 800576e:	f000 fa52 	bl	8005c16 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	2200      	movs	r2, #0
 8005776:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005778:	68bb      	ldr	r3, [r7, #8]
 800577a:	f003 0301 	and.w	r3, r3, #1
 800577e:	2b00      	cmp	r3, #0
 8005780:	d00c      	beq.n	800579c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	f003 0301 	and.w	r3, r3, #1
 8005788:	2b00      	cmp	r3, #0
 800578a:	d007      	beq.n	800579c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	f06f 0201 	mvn.w	r2, #1
 8005794:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005796:	6878      	ldr	r0, [r7, #4]
 8005798:	f7fb fc1a 	bl	8000fd0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800579c:	68bb      	ldr	r3, [r7, #8]
 800579e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d00c      	beq.n	80057c0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d007      	beq.n	80057c0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80057b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80057ba:	6878      	ldr	r0, [r7, #4]
 80057bc:	f000 ff80 	bl	80066c0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80057c0:	68bb      	ldr	r3, [r7, #8]
 80057c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d00c      	beq.n	80057e4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d007      	beq.n	80057e4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80057dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80057de:	6878      	ldr	r0, [r7, #4]
 80057e0:	f000 ff78 	bl	80066d4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80057e4:	68bb      	ldr	r3, [r7, #8]
 80057e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d00c      	beq.n	8005808 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d007      	beq.n	8005808 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005800:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005802:	6878      	ldr	r0, [r7, #4]
 8005804:	f000 fa11 	bl	8005c2a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005808:	68bb      	ldr	r3, [r7, #8]
 800580a:	f003 0320 	and.w	r3, r3, #32
 800580e:	2b00      	cmp	r3, #0
 8005810:	d00c      	beq.n	800582c <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	f003 0320 	and.w	r3, r3, #32
 8005818:	2b00      	cmp	r3, #0
 800581a:	d007      	beq.n	800582c <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	f06f 0220 	mvn.w	r2, #32
 8005824:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005826:	6878      	ldr	r0, [r7, #4]
 8005828:	f000 ff40 	bl	80066ac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800582c:	bf00      	nop
 800582e:	3710      	adds	r7, #16
 8005830:	46bd      	mov	sp, r7
 8005832:	bd80      	pop	{r7, pc}

08005834 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005834:	b580      	push	{r7, lr}
 8005836:	b086      	sub	sp, #24
 8005838:	af00      	add	r7, sp, #0
 800583a:	60f8      	str	r0, [r7, #12]
 800583c:	60b9      	str	r1, [r7, #8]
 800583e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005840:	2300      	movs	r3, #0
 8005842:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800584a:	2b01      	cmp	r3, #1
 800584c:	d101      	bne.n	8005852 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800584e:	2302      	movs	r3, #2
 8005850:	e0ff      	b.n	8005a52 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	2201      	movs	r2, #1
 8005856:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	2b14      	cmp	r3, #20
 800585e:	f200 80f0 	bhi.w	8005a42 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005862:	a201      	add	r2, pc, #4	; (adr r2, 8005868 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005864:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005868:	080058bd 	.word	0x080058bd
 800586c:	08005a43 	.word	0x08005a43
 8005870:	08005a43 	.word	0x08005a43
 8005874:	08005a43 	.word	0x08005a43
 8005878:	080058fd 	.word	0x080058fd
 800587c:	08005a43 	.word	0x08005a43
 8005880:	08005a43 	.word	0x08005a43
 8005884:	08005a43 	.word	0x08005a43
 8005888:	0800593f 	.word	0x0800593f
 800588c:	08005a43 	.word	0x08005a43
 8005890:	08005a43 	.word	0x08005a43
 8005894:	08005a43 	.word	0x08005a43
 8005898:	0800597f 	.word	0x0800597f
 800589c:	08005a43 	.word	0x08005a43
 80058a0:	08005a43 	.word	0x08005a43
 80058a4:	08005a43 	.word	0x08005a43
 80058a8:	080059c1 	.word	0x080059c1
 80058ac:	08005a43 	.word	0x08005a43
 80058b0:	08005a43 	.word	0x08005a43
 80058b4:	08005a43 	.word	0x08005a43
 80058b8:	08005a01 	.word	0x08005a01
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	68b9      	ldr	r1, [r7, #8]
 80058c2:	4618      	mov	r0, r3
 80058c4:	f000 fa56 	bl	8005d74 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	699a      	ldr	r2, [r3, #24]
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f042 0208 	orr.w	r2, r2, #8
 80058d6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	699a      	ldr	r2, [r3, #24]
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	f022 0204 	bic.w	r2, r2, #4
 80058e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	6999      	ldr	r1, [r3, #24]
 80058ee:	68bb      	ldr	r3, [r7, #8]
 80058f0:	691a      	ldr	r2, [r3, #16]
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	430a      	orrs	r2, r1
 80058f8:	619a      	str	r2, [r3, #24]
      break;
 80058fa:	e0a5      	b.n	8005a48 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	68b9      	ldr	r1, [r7, #8]
 8005902:	4618      	mov	r0, r3
 8005904:	f000 fac6 	bl	8005e94 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	699a      	ldr	r2, [r3, #24]
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005916:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	699a      	ldr	r2, [r3, #24]
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005926:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	6999      	ldr	r1, [r3, #24]
 800592e:	68bb      	ldr	r3, [r7, #8]
 8005930:	691b      	ldr	r3, [r3, #16]
 8005932:	021a      	lsls	r2, r3, #8
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	430a      	orrs	r2, r1
 800593a:	619a      	str	r2, [r3, #24]
      break;
 800593c:	e084      	b.n	8005a48 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	68b9      	ldr	r1, [r7, #8]
 8005944:	4618      	mov	r0, r3
 8005946:	f000 fb2f 	bl	8005fa8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	69da      	ldr	r2, [r3, #28]
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	f042 0208 	orr.w	r2, r2, #8
 8005958:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	69da      	ldr	r2, [r3, #28]
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	f022 0204 	bic.w	r2, r2, #4
 8005968:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	69d9      	ldr	r1, [r3, #28]
 8005970:	68bb      	ldr	r3, [r7, #8]
 8005972:	691a      	ldr	r2, [r3, #16]
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	430a      	orrs	r2, r1
 800597a:	61da      	str	r2, [r3, #28]
      break;
 800597c:	e064      	b.n	8005a48 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	68b9      	ldr	r1, [r7, #8]
 8005984:	4618      	mov	r0, r3
 8005986:	f000 fb97 	bl	80060b8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	69da      	ldr	r2, [r3, #28]
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005998:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	69da      	ldr	r2, [r3, #28]
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80059a8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	69d9      	ldr	r1, [r3, #28]
 80059b0:	68bb      	ldr	r3, [r7, #8]
 80059b2:	691b      	ldr	r3, [r3, #16]
 80059b4:	021a      	lsls	r2, r3, #8
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	430a      	orrs	r2, r1
 80059bc:	61da      	str	r2, [r3, #28]
      break;
 80059be:	e043      	b.n	8005a48 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	68b9      	ldr	r1, [r7, #8]
 80059c6:	4618      	mov	r0, r3
 80059c8:	f000 fbe0 	bl	800618c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	f042 0208 	orr.w	r2, r2, #8
 80059da:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	f022 0204 	bic.w	r2, r2, #4
 80059ea:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80059f2:	68bb      	ldr	r3, [r7, #8]
 80059f4:	691a      	ldr	r2, [r3, #16]
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	430a      	orrs	r2, r1
 80059fc:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80059fe:	e023      	b.n	8005a48 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	68b9      	ldr	r1, [r7, #8]
 8005a06:	4618      	mov	r0, r3
 8005a08:	f000 fc24 	bl	8006254 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005a1a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a2a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005a32:	68bb      	ldr	r3, [r7, #8]
 8005a34:	691b      	ldr	r3, [r3, #16]
 8005a36:	021a      	lsls	r2, r3, #8
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	430a      	orrs	r2, r1
 8005a3e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005a40:	e002      	b.n	8005a48 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005a42:	2301      	movs	r3, #1
 8005a44:	75fb      	strb	r3, [r7, #23]
      break;
 8005a46:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	2200      	movs	r2, #0
 8005a4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005a50:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a52:	4618      	mov	r0, r3
 8005a54:	3718      	adds	r7, #24
 8005a56:	46bd      	mov	sp, r7
 8005a58:	bd80      	pop	{r7, pc}
 8005a5a:	bf00      	nop

08005a5c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005a5c:	b580      	push	{r7, lr}
 8005a5e:	b084      	sub	sp, #16
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	6078      	str	r0, [r7, #4]
 8005a64:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005a66:	2300      	movs	r3, #0
 8005a68:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a70:	2b01      	cmp	r3, #1
 8005a72:	d101      	bne.n	8005a78 <HAL_TIM_ConfigClockSource+0x1c>
 8005a74:	2302      	movs	r3, #2
 8005a76:	e0b6      	b.n	8005be6 <HAL_TIM_ConfigClockSource+0x18a>
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	2201      	movs	r2, #1
 8005a7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	2202      	movs	r2, #2
 8005a84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	689b      	ldr	r3, [r3, #8]
 8005a8e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005a90:	68bb      	ldr	r3, [r7, #8]
 8005a92:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005a96:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005a9a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005a9c:	68bb      	ldr	r3, [r7, #8]
 8005a9e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005aa2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	68ba      	ldr	r2, [r7, #8]
 8005aaa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005aac:	683b      	ldr	r3, [r7, #0]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ab4:	d03e      	beq.n	8005b34 <HAL_TIM_ConfigClockSource+0xd8>
 8005ab6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005aba:	f200 8087 	bhi.w	8005bcc <HAL_TIM_ConfigClockSource+0x170>
 8005abe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ac2:	f000 8086 	beq.w	8005bd2 <HAL_TIM_ConfigClockSource+0x176>
 8005ac6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005aca:	d87f      	bhi.n	8005bcc <HAL_TIM_ConfigClockSource+0x170>
 8005acc:	2b70      	cmp	r3, #112	; 0x70
 8005ace:	d01a      	beq.n	8005b06 <HAL_TIM_ConfigClockSource+0xaa>
 8005ad0:	2b70      	cmp	r3, #112	; 0x70
 8005ad2:	d87b      	bhi.n	8005bcc <HAL_TIM_ConfigClockSource+0x170>
 8005ad4:	2b60      	cmp	r3, #96	; 0x60
 8005ad6:	d050      	beq.n	8005b7a <HAL_TIM_ConfigClockSource+0x11e>
 8005ad8:	2b60      	cmp	r3, #96	; 0x60
 8005ada:	d877      	bhi.n	8005bcc <HAL_TIM_ConfigClockSource+0x170>
 8005adc:	2b50      	cmp	r3, #80	; 0x50
 8005ade:	d03c      	beq.n	8005b5a <HAL_TIM_ConfigClockSource+0xfe>
 8005ae0:	2b50      	cmp	r3, #80	; 0x50
 8005ae2:	d873      	bhi.n	8005bcc <HAL_TIM_ConfigClockSource+0x170>
 8005ae4:	2b40      	cmp	r3, #64	; 0x40
 8005ae6:	d058      	beq.n	8005b9a <HAL_TIM_ConfigClockSource+0x13e>
 8005ae8:	2b40      	cmp	r3, #64	; 0x40
 8005aea:	d86f      	bhi.n	8005bcc <HAL_TIM_ConfigClockSource+0x170>
 8005aec:	2b30      	cmp	r3, #48	; 0x30
 8005aee:	d064      	beq.n	8005bba <HAL_TIM_ConfigClockSource+0x15e>
 8005af0:	2b30      	cmp	r3, #48	; 0x30
 8005af2:	d86b      	bhi.n	8005bcc <HAL_TIM_ConfigClockSource+0x170>
 8005af4:	2b20      	cmp	r3, #32
 8005af6:	d060      	beq.n	8005bba <HAL_TIM_ConfigClockSource+0x15e>
 8005af8:	2b20      	cmp	r3, #32
 8005afa:	d867      	bhi.n	8005bcc <HAL_TIM_ConfigClockSource+0x170>
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d05c      	beq.n	8005bba <HAL_TIM_ConfigClockSource+0x15e>
 8005b00:	2b10      	cmp	r3, #16
 8005b02:	d05a      	beq.n	8005bba <HAL_TIM_ConfigClockSource+0x15e>
 8005b04:	e062      	b.n	8005bcc <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005b0a:	683b      	ldr	r3, [r7, #0]
 8005b0c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005b0e:	683b      	ldr	r3, [r7, #0]
 8005b10:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005b12:	683b      	ldr	r3, [r7, #0]
 8005b14:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005b16:	f000 fc7d 	bl	8006414 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	689b      	ldr	r3, [r3, #8]
 8005b20:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005b22:	68bb      	ldr	r3, [r7, #8]
 8005b24:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005b28:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	68ba      	ldr	r2, [r7, #8]
 8005b30:	609a      	str	r2, [r3, #8]
      break;
 8005b32:	e04f      	b.n	8005bd4 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005b38:	683b      	ldr	r3, [r7, #0]
 8005b3a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005b3c:	683b      	ldr	r3, [r7, #0]
 8005b3e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005b40:	683b      	ldr	r3, [r7, #0]
 8005b42:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005b44:	f000 fc66 	bl	8006414 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	689a      	ldr	r2, [r3, #8]
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005b56:	609a      	str	r2, [r3, #8]
      break;
 8005b58:	e03c      	b.n	8005bd4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005b5e:	683b      	ldr	r3, [r7, #0]
 8005b60:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005b62:	683b      	ldr	r3, [r7, #0]
 8005b64:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b66:	461a      	mov	r2, r3
 8005b68:	f000 fbda 	bl	8006320 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	2150      	movs	r1, #80	; 0x50
 8005b72:	4618      	mov	r0, r3
 8005b74:	f000 fc33 	bl	80063de <TIM_ITRx_SetConfig>
      break;
 8005b78:	e02c      	b.n	8005bd4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005b7e:	683b      	ldr	r3, [r7, #0]
 8005b80:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005b82:	683b      	ldr	r3, [r7, #0]
 8005b84:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005b86:	461a      	mov	r2, r3
 8005b88:	f000 fbf9 	bl	800637e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	2160      	movs	r1, #96	; 0x60
 8005b92:	4618      	mov	r0, r3
 8005b94:	f000 fc23 	bl	80063de <TIM_ITRx_SetConfig>
      break;
 8005b98:	e01c      	b.n	8005bd4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005b9e:	683b      	ldr	r3, [r7, #0]
 8005ba0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005ba2:	683b      	ldr	r3, [r7, #0]
 8005ba4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005ba6:	461a      	mov	r2, r3
 8005ba8:	f000 fbba 	bl	8006320 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	2140      	movs	r1, #64	; 0x40
 8005bb2:	4618      	mov	r0, r3
 8005bb4:	f000 fc13 	bl	80063de <TIM_ITRx_SetConfig>
      break;
 8005bb8:	e00c      	b.n	8005bd4 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681a      	ldr	r2, [r3, #0]
 8005bbe:	683b      	ldr	r3, [r7, #0]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	4619      	mov	r1, r3
 8005bc4:	4610      	mov	r0, r2
 8005bc6:	f000 fc0a 	bl	80063de <TIM_ITRx_SetConfig>
      break;
 8005bca:	e003      	b.n	8005bd4 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8005bcc:	2301      	movs	r3, #1
 8005bce:	73fb      	strb	r3, [r7, #15]
      break;
 8005bd0:	e000      	b.n	8005bd4 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8005bd2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	2201      	movs	r2, #1
 8005bd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	2200      	movs	r2, #0
 8005be0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005be4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005be6:	4618      	mov	r0, r3
 8005be8:	3710      	adds	r7, #16
 8005bea:	46bd      	mov	sp, r7
 8005bec:	bd80      	pop	{r7, pc}

08005bee <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005bee:	b480      	push	{r7}
 8005bf0:	b083      	sub	sp, #12
 8005bf2:	af00      	add	r7, sp, #0
 8005bf4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005bf6:	bf00      	nop
 8005bf8:	370c      	adds	r7, #12
 8005bfa:	46bd      	mov	sp, r7
 8005bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c00:	4770      	bx	lr

08005c02 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005c02:	b480      	push	{r7}
 8005c04:	b083      	sub	sp, #12
 8005c06:	af00      	add	r7, sp, #0
 8005c08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005c0a:	bf00      	nop
 8005c0c:	370c      	adds	r7, #12
 8005c0e:	46bd      	mov	sp, r7
 8005c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c14:	4770      	bx	lr

08005c16 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005c16:	b480      	push	{r7}
 8005c18:	b083      	sub	sp, #12
 8005c1a:	af00      	add	r7, sp, #0
 8005c1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005c1e:	bf00      	nop
 8005c20:	370c      	adds	r7, #12
 8005c22:	46bd      	mov	sp, r7
 8005c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c28:	4770      	bx	lr

08005c2a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005c2a:	b480      	push	{r7}
 8005c2c:	b083      	sub	sp, #12
 8005c2e:	af00      	add	r7, sp, #0
 8005c30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005c32:	bf00      	nop
 8005c34:	370c      	adds	r7, #12
 8005c36:	46bd      	mov	sp, r7
 8005c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3c:	4770      	bx	lr
	...

08005c40 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005c40:	b480      	push	{r7}
 8005c42:	b085      	sub	sp, #20
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	6078      	str	r0, [r7, #4]
 8005c48:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	4a40      	ldr	r2, [pc, #256]	; (8005d54 <TIM_Base_SetConfig+0x114>)
 8005c54:	4293      	cmp	r3, r2
 8005c56:	d013      	beq.n	8005c80 <TIM_Base_SetConfig+0x40>
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c5e:	d00f      	beq.n	8005c80 <TIM_Base_SetConfig+0x40>
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	4a3d      	ldr	r2, [pc, #244]	; (8005d58 <TIM_Base_SetConfig+0x118>)
 8005c64:	4293      	cmp	r3, r2
 8005c66:	d00b      	beq.n	8005c80 <TIM_Base_SetConfig+0x40>
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	4a3c      	ldr	r2, [pc, #240]	; (8005d5c <TIM_Base_SetConfig+0x11c>)
 8005c6c:	4293      	cmp	r3, r2
 8005c6e:	d007      	beq.n	8005c80 <TIM_Base_SetConfig+0x40>
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	4a3b      	ldr	r2, [pc, #236]	; (8005d60 <TIM_Base_SetConfig+0x120>)
 8005c74:	4293      	cmp	r3, r2
 8005c76:	d003      	beq.n	8005c80 <TIM_Base_SetConfig+0x40>
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	4a3a      	ldr	r2, [pc, #232]	; (8005d64 <TIM_Base_SetConfig+0x124>)
 8005c7c:	4293      	cmp	r3, r2
 8005c7e:	d108      	bne.n	8005c92 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c86:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005c88:	683b      	ldr	r3, [r7, #0]
 8005c8a:	685b      	ldr	r3, [r3, #4]
 8005c8c:	68fa      	ldr	r2, [r7, #12]
 8005c8e:	4313      	orrs	r3, r2
 8005c90:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	4a2f      	ldr	r2, [pc, #188]	; (8005d54 <TIM_Base_SetConfig+0x114>)
 8005c96:	4293      	cmp	r3, r2
 8005c98:	d01f      	beq.n	8005cda <TIM_Base_SetConfig+0x9a>
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ca0:	d01b      	beq.n	8005cda <TIM_Base_SetConfig+0x9a>
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	4a2c      	ldr	r2, [pc, #176]	; (8005d58 <TIM_Base_SetConfig+0x118>)
 8005ca6:	4293      	cmp	r3, r2
 8005ca8:	d017      	beq.n	8005cda <TIM_Base_SetConfig+0x9a>
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	4a2b      	ldr	r2, [pc, #172]	; (8005d5c <TIM_Base_SetConfig+0x11c>)
 8005cae:	4293      	cmp	r3, r2
 8005cb0:	d013      	beq.n	8005cda <TIM_Base_SetConfig+0x9a>
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	4a2a      	ldr	r2, [pc, #168]	; (8005d60 <TIM_Base_SetConfig+0x120>)
 8005cb6:	4293      	cmp	r3, r2
 8005cb8:	d00f      	beq.n	8005cda <TIM_Base_SetConfig+0x9a>
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	4a29      	ldr	r2, [pc, #164]	; (8005d64 <TIM_Base_SetConfig+0x124>)
 8005cbe:	4293      	cmp	r3, r2
 8005cc0:	d00b      	beq.n	8005cda <TIM_Base_SetConfig+0x9a>
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	4a28      	ldr	r2, [pc, #160]	; (8005d68 <TIM_Base_SetConfig+0x128>)
 8005cc6:	4293      	cmp	r3, r2
 8005cc8:	d007      	beq.n	8005cda <TIM_Base_SetConfig+0x9a>
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	4a27      	ldr	r2, [pc, #156]	; (8005d6c <TIM_Base_SetConfig+0x12c>)
 8005cce:	4293      	cmp	r3, r2
 8005cd0:	d003      	beq.n	8005cda <TIM_Base_SetConfig+0x9a>
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	4a26      	ldr	r2, [pc, #152]	; (8005d70 <TIM_Base_SetConfig+0x130>)
 8005cd6:	4293      	cmp	r3, r2
 8005cd8:	d108      	bne.n	8005cec <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ce0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005ce2:	683b      	ldr	r3, [r7, #0]
 8005ce4:	68db      	ldr	r3, [r3, #12]
 8005ce6:	68fa      	ldr	r2, [r7, #12]
 8005ce8:	4313      	orrs	r3, r2
 8005cea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005cf2:	683b      	ldr	r3, [r7, #0]
 8005cf4:	695b      	ldr	r3, [r3, #20]
 8005cf6:	4313      	orrs	r3, r2
 8005cf8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	68fa      	ldr	r2, [r7, #12]
 8005cfe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005d00:	683b      	ldr	r3, [r7, #0]
 8005d02:	689a      	ldr	r2, [r3, #8]
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005d08:	683b      	ldr	r3, [r7, #0]
 8005d0a:	681a      	ldr	r2, [r3, #0]
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	4a10      	ldr	r2, [pc, #64]	; (8005d54 <TIM_Base_SetConfig+0x114>)
 8005d14:	4293      	cmp	r3, r2
 8005d16:	d00f      	beq.n	8005d38 <TIM_Base_SetConfig+0xf8>
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	4a12      	ldr	r2, [pc, #72]	; (8005d64 <TIM_Base_SetConfig+0x124>)
 8005d1c:	4293      	cmp	r3, r2
 8005d1e:	d00b      	beq.n	8005d38 <TIM_Base_SetConfig+0xf8>
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	4a11      	ldr	r2, [pc, #68]	; (8005d68 <TIM_Base_SetConfig+0x128>)
 8005d24:	4293      	cmp	r3, r2
 8005d26:	d007      	beq.n	8005d38 <TIM_Base_SetConfig+0xf8>
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	4a10      	ldr	r2, [pc, #64]	; (8005d6c <TIM_Base_SetConfig+0x12c>)
 8005d2c:	4293      	cmp	r3, r2
 8005d2e:	d003      	beq.n	8005d38 <TIM_Base_SetConfig+0xf8>
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	4a0f      	ldr	r2, [pc, #60]	; (8005d70 <TIM_Base_SetConfig+0x130>)
 8005d34:	4293      	cmp	r3, r2
 8005d36:	d103      	bne.n	8005d40 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005d38:	683b      	ldr	r3, [r7, #0]
 8005d3a:	691a      	ldr	r2, [r3, #16]
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	2201      	movs	r2, #1
 8005d44:	615a      	str	r2, [r3, #20]
}
 8005d46:	bf00      	nop
 8005d48:	3714      	adds	r7, #20
 8005d4a:	46bd      	mov	sp, r7
 8005d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d50:	4770      	bx	lr
 8005d52:	bf00      	nop
 8005d54:	40012c00 	.word	0x40012c00
 8005d58:	40000400 	.word	0x40000400
 8005d5c:	40000800 	.word	0x40000800
 8005d60:	40000c00 	.word	0x40000c00
 8005d64:	40013400 	.word	0x40013400
 8005d68:	40014000 	.word	0x40014000
 8005d6c:	40014400 	.word	0x40014400
 8005d70:	40014800 	.word	0x40014800

08005d74 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005d74:	b480      	push	{r7}
 8005d76:	b087      	sub	sp, #28
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	6078      	str	r0, [r7, #4]
 8005d7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	6a1b      	ldr	r3, [r3, #32]
 8005d82:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	6a1b      	ldr	r3, [r3, #32]
 8005d88:	f023 0201 	bic.w	r2, r3, #1
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	685b      	ldr	r3, [r3, #4]
 8005d94:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	699b      	ldr	r3, [r3, #24]
 8005d9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005da2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005da6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	f023 0303 	bic.w	r3, r3, #3
 8005dae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005db0:	683b      	ldr	r3, [r7, #0]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	68fa      	ldr	r2, [r7, #12]
 8005db6:	4313      	orrs	r3, r2
 8005db8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005dba:	697b      	ldr	r3, [r7, #20]
 8005dbc:	f023 0302 	bic.w	r3, r3, #2
 8005dc0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005dc2:	683b      	ldr	r3, [r7, #0]
 8005dc4:	689b      	ldr	r3, [r3, #8]
 8005dc6:	697a      	ldr	r2, [r7, #20]
 8005dc8:	4313      	orrs	r3, r2
 8005dca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	4a2c      	ldr	r2, [pc, #176]	; (8005e80 <TIM_OC1_SetConfig+0x10c>)
 8005dd0:	4293      	cmp	r3, r2
 8005dd2:	d00f      	beq.n	8005df4 <TIM_OC1_SetConfig+0x80>
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	4a2b      	ldr	r2, [pc, #172]	; (8005e84 <TIM_OC1_SetConfig+0x110>)
 8005dd8:	4293      	cmp	r3, r2
 8005dda:	d00b      	beq.n	8005df4 <TIM_OC1_SetConfig+0x80>
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	4a2a      	ldr	r2, [pc, #168]	; (8005e88 <TIM_OC1_SetConfig+0x114>)
 8005de0:	4293      	cmp	r3, r2
 8005de2:	d007      	beq.n	8005df4 <TIM_OC1_SetConfig+0x80>
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	4a29      	ldr	r2, [pc, #164]	; (8005e8c <TIM_OC1_SetConfig+0x118>)
 8005de8:	4293      	cmp	r3, r2
 8005dea:	d003      	beq.n	8005df4 <TIM_OC1_SetConfig+0x80>
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	4a28      	ldr	r2, [pc, #160]	; (8005e90 <TIM_OC1_SetConfig+0x11c>)
 8005df0:	4293      	cmp	r3, r2
 8005df2:	d10c      	bne.n	8005e0e <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005df4:	697b      	ldr	r3, [r7, #20]
 8005df6:	f023 0308 	bic.w	r3, r3, #8
 8005dfa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005dfc:	683b      	ldr	r3, [r7, #0]
 8005dfe:	68db      	ldr	r3, [r3, #12]
 8005e00:	697a      	ldr	r2, [r7, #20]
 8005e02:	4313      	orrs	r3, r2
 8005e04:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005e06:	697b      	ldr	r3, [r7, #20]
 8005e08:	f023 0304 	bic.w	r3, r3, #4
 8005e0c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	4a1b      	ldr	r2, [pc, #108]	; (8005e80 <TIM_OC1_SetConfig+0x10c>)
 8005e12:	4293      	cmp	r3, r2
 8005e14:	d00f      	beq.n	8005e36 <TIM_OC1_SetConfig+0xc2>
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	4a1a      	ldr	r2, [pc, #104]	; (8005e84 <TIM_OC1_SetConfig+0x110>)
 8005e1a:	4293      	cmp	r3, r2
 8005e1c:	d00b      	beq.n	8005e36 <TIM_OC1_SetConfig+0xc2>
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	4a19      	ldr	r2, [pc, #100]	; (8005e88 <TIM_OC1_SetConfig+0x114>)
 8005e22:	4293      	cmp	r3, r2
 8005e24:	d007      	beq.n	8005e36 <TIM_OC1_SetConfig+0xc2>
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	4a18      	ldr	r2, [pc, #96]	; (8005e8c <TIM_OC1_SetConfig+0x118>)
 8005e2a:	4293      	cmp	r3, r2
 8005e2c:	d003      	beq.n	8005e36 <TIM_OC1_SetConfig+0xc2>
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	4a17      	ldr	r2, [pc, #92]	; (8005e90 <TIM_OC1_SetConfig+0x11c>)
 8005e32:	4293      	cmp	r3, r2
 8005e34:	d111      	bne.n	8005e5a <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005e36:	693b      	ldr	r3, [r7, #16]
 8005e38:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005e3c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005e3e:	693b      	ldr	r3, [r7, #16]
 8005e40:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005e44:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005e46:	683b      	ldr	r3, [r7, #0]
 8005e48:	695b      	ldr	r3, [r3, #20]
 8005e4a:	693a      	ldr	r2, [r7, #16]
 8005e4c:	4313      	orrs	r3, r2
 8005e4e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005e50:	683b      	ldr	r3, [r7, #0]
 8005e52:	699b      	ldr	r3, [r3, #24]
 8005e54:	693a      	ldr	r2, [r7, #16]
 8005e56:	4313      	orrs	r3, r2
 8005e58:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	693a      	ldr	r2, [r7, #16]
 8005e5e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	68fa      	ldr	r2, [r7, #12]
 8005e64:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005e66:	683b      	ldr	r3, [r7, #0]
 8005e68:	685a      	ldr	r2, [r3, #4]
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	697a      	ldr	r2, [r7, #20]
 8005e72:	621a      	str	r2, [r3, #32]
}
 8005e74:	bf00      	nop
 8005e76:	371c      	adds	r7, #28
 8005e78:	46bd      	mov	sp, r7
 8005e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e7e:	4770      	bx	lr
 8005e80:	40012c00 	.word	0x40012c00
 8005e84:	40013400 	.word	0x40013400
 8005e88:	40014000 	.word	0x40014000
 8005e8c:	40014400 	.word	0x40014400
 8005e90:	40014800 	.word	0x40014800

08005e94 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005e94:	b480      	push	{r7}
 8005e96:	b087      	sub	sp, #28
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	6078      	str	r0, [r7, #4]
 8005e9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	6a1b      	ldr	r3, [r3, #32]
 8005ea2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	6a1b      	ldr	r3, [r3, #32]
 8005ea8:	f023 0210 	bic.w	r2, r3, #16
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	685b      	ldr	r3, [r3, #4]
 8005eb4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	699b      	ldr	r3, [r3, #24]
 8005eba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005ec2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ec6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ece:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005ed0:	683b      	ldr	r3, [r7, #0]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	021b      	lsls	r3, r3, #8
 8005ed6:	68fa      	ldr	r2, [r7, #12]
 8005ed8:	4313      	orrs	r3, r2
 8005eda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005edc:	697b      	ldr	r3, [r7, #20]
 8005ede:	f023 0320 	bic.w	r3, r3, #32
 8005ee2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005ee4:	683b      	ldr	r3, [r7, #0]
 8005ee6:	689b      	ldr	r3, [r3, #8]
 8005ee8:	011b      	lsls	r3, r3, #4
 8005eea:	697a      	ldr	r2, [r7, #20]
 8005eec:	4313      	orrs	r3, r2
 8005eee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	4a28      	ldr	r2, [pc, #160]	; (8005f94 <TIM_OC2_SetConfig+0x100>)
 8005ef4:	4293      	cmp	r3, r2
 8005ef6:	d003      	beq.n	8005f00 <TIM_OC2_SetConfig+0x6c>
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	4a27      	ldr	r2, [pc, #156]	; (8005f98 <TIM_OC2_SetConfig+0x104>)
 8005efc:	4293      	cmp	r3, r2
 8005efe:	d10d      	bne.n	8005f1c <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005f00:	697b      	ldr	r3, [r7, #20]
 8005f02:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005f06:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005f08:	683b      	ldr	r3, [r7, #0]
 8005f0a:	68db      	ldr	r3, [r3, #12]
 8005f0c:	011b      	lsls	r3, r3, #4
 8005f0e:	697a      	ldr	r2, [r7, #20]
 8005f10:	4313      	orrs	r3, r2
 8005f12:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005f14:	697b      	ldr	r3, [r7, #20]
 8005f16:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f1a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	4a1d      	ldr	r2, [pc, #116]	; (8005f94 <TIM_OC2_SetConfig+0x100>)
 8005f20:	4293      	cmp	r3, r2
 8005f22:	d00f      	beq.n	8005f44 <TIM_OC2_SetConfig+0xb0>
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	4a1c      	ldr	r2, [pc, #112]	; (8005f98 <TIM_OC2_SetConfig+0x104>)
 8005f28:	4293      	cmp	r3, r2
 8005f2a:	d00b      	beq.n	8005f44 <TIM_OC2_SetConfig+0xb0>
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	4a1b      	ldr	r2, [pc, #108]	; (8005f9c <TIM_OC2_SetConfig+0x108>)
 8005f30:	4293      	cmp	r3, r2
 8005f32:	d007      	beq.n	8005f44 <TIM_OC2_SetConfig+0xb0>
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	4a1a      	ldr	r2, [pc, #104]	; (8005fa0 <TIM_OC2_SetConfig+0x10c>)
 8005f38:	4293      	cmp	r3, r2
 8005f3a:	d003      	beq.n	8005f44 <TIM_OC2_SetConfig+0xb0>
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	4a19      	ldr	r2, [pc, #100]	; (8005fa4 <TIM_OC2_SetConfig+0x110>)
 8005f40:	4293      	cmp	r3, r2
 8005f42:	d113      	bne.n	8005f6c <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005f44:	693b      	ldr	r3, [r7, #16]
 8005f46:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005f4a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005f4c:	693b      	ldr	r3, [r7, #16]
 8005f4e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005f52:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005f54:	683b      	ldr	r3, [r7, #0]
 8005f56:	695b      	ldr	r3, [r3, #20]
 8005f58:	009b      	lsls	r3, r3, #2
 8005f5a:	693a      	ldr	r2, [r7, #16]
 8005f5c:	4313      	orrs	r3, r2
 8005f5e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005f60:	683b      	ldr	r3, [r7, #0]
 8005f62:	699b      	ldr	r3, [r3, #24]
 8005f64:	009b      	lsls	r3, r3, #2
 8005f66:	693a      	ldr	r2, [r7, #16]
 8005f68:	4313      	orrs	r3, r2
 8005f6a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	693a      	ldr	r2, [r7, #16]
 8005f70:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	68fa      	ldr	r2, [r7, #12]
 8005f76:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005f78:	683b      	ldr	r3, [r7, #0]
 8005f7a:	685a      	ldr	r2, [r3, #4]
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	697a      	ldr	r2, [r7, #20]
 8005f84:	621a      	str	r2, [r3, #32]
}
 8005f86:	bf00      	nop
 8005f88:	371c      	adds	r7, #28
 8005f8a:	46bd      	mov	sp, r7
 8005f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f90:	4770      	bx	lr
 8005f92:	bf00      	nop
 8005f94:	40012c00 	.word	0x40012c00
 8005f98:	40013400 	.word	0x40013400
 8005f9c:	40014000 	.word	0x40014000
 8005fa0:	40014400 	.word	0x40014400
 8005fa4:	40014800 	.word	0x40014800

08005fa8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005fa8:	b480      	push	{r7}
 8005faa:	b087      	sub	sp, #28
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	6078      	str	r0, [r7, #4]
 8005fb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	6a1b      	ldr	r3, [r3, #32]
 8005fb6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	6a1b      	ldr	r3, [r3, #32]
 8005fbc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	685b      	ldr	r3, [r3, #4]
 8005fc8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	69db      	ldr	r3, [r3, #28]
 8005fce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005fd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fda:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	f023 0303 	bic.w	r3, r3, #3
 8005fe2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005fe4:	683b      	ldr	r3, [r7, #0]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	68fa      	ldr	r2, [r7, #12]
 8005fea:	4313      	orrs	r3, r2
 8005fec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005fee:	697b      	ldr	r3, [r7, #20]
 8005ff0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005ff4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005ff6:	683b      	ldr	r3, [r7, #0]
 8005ff8:	689b      	ldr	r3, [r3, #8]
 8005ffa:	021b      	lsls	r3, r3, #8
 8005ffc:	697a      	ldr	r2, [r7, #20]
 8005ffe:	4313      	orrs	r3, r2
 8006000:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	4a27      	ldr	r2, [pc, #156]	; (80060a4 <TIM_OC3_SetConfig+0xfc>)
 8006006:	4293      	cmp	r3, r2
 8006008:	d003      	beq.n	8006012 <TIM_OC3_SetConfig+0x6a>
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	4a26      	ldr	r2, [pc, #152]	; (80060a8 <TIM_OC3_SetConfig+0x100>)
 800600e:	4293      	cmp	r3, r2
 8006010:	d10d      	bne.n	800602e <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006012:	697b      	ldr	r3, [r7, #20]
 8006014:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006018:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800601a:	683b      	ldr	r3, [r7, #0]
 800601c:	68db      	ldr	r3, [r3, #12]
 800601e:	021b      	lsls	r3, r3, #8
 8006020:	697a      	ldr	r2, [r7, #20]
 8006022:	4313      	orrs	r3, r2
 8006024:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006026:	697b      	ldr	r3, [r7, #20]
 8006028:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800602c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	4a1c      	ldr	r2, [pc, #112]	; (80060a4 <TIM_OC3_SetConfig+0xfc>)
 8006032:	4293      	cmp	r3, r2
 8006034:	d00f      	beq.n	8006056 <TIM_OC3_SetConfig+0xae>
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	4a1b      	ldr	r2, [pc, #108]	; (80060a8 <TIM_OC3_SetConfig+0x100>)
 800603a:	4293      	cmp	r3, r2
 800603c:	d00b      	beq.n	8006056 <TIM_OC3_SetConfig+0xae>
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	4a1a      	ldr	r2, [pc, #104]	; (80060ac <TIM_OC3_SetConfig+0x104>)
 8006042:	4293      	cmp	r3, r2
 8006044:	d007      	beq.n	8006056 <TIM_OC3_SetConfig+0xae>
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	4a19      	ldr	r2, [pc, #100]	; (80060b0 <TIM_OC3_SetConfig+0x108>)
 800604a:	4293      	cmp	r3, r2
 800604c:	d003      	beq.n	8006056 <TIM_OC3_SetConfig+0xae>
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	4a18      	ldr	r2, [pc, #96]	; (80060b4 <TIM_OC3_SetConfig+0x10c>)
 8006052:	4293      	cmp	r3, r2
 8006054:	d113      	bne.n	800607e <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006056:	693b      	ldr	r3, [r7, #16]
 8006058:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800605c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800605e:	693b      	ldr	r3, [r7, #16]
 8006060:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006064:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006066:	683b      	ldr	r3, [r7, #0]
 8006068:	695b      	ldr	r3, [r3, #20]
 800606a:	011b      	lsls	r3, r3, #4
 800606c:	693a      	ldr	r2, [r7, #16]
 800606e:	4313      	orrs	r3, r2
 8006070:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006072:	683b      	ldr	r3, [r7, #0]
 8006074:	699b      	ldr	r3, [r3, #24]
 8006076:	011b      	lsls	r3, r3, #4
 8006078:	693a      	ldr	r2, [r7, #16]
 800607a:	4313      	orrs	r3, r2
 800607c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	693a      	ldr	r2, [r7, #16]
 8006082:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	68fa      	ldr	r2, [r7, #12]
 8006088:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800608a:	683b      	ldr	r3, [r7, #0]
 800608c:	685a      	ldr	r2, [r3, #4]
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	697a      	ldr	r2, [r7, #20]
 8006096:	621a      	str	r2, [r3, #32]
}
 8006098:	bf00      	nop
 800609a:	371c      	adds	r7, #28
 800609c:	46bd      	mov	sp, r7
 800609e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a2:	4770      	bx	lr
 80060a4:	40012c00 	.word	0x40012c00
 80060a8:	40013400 	.word	0x40013400
 80060ac:	40014000 	.word	0x40014000
 80060b0:	40014400 	.word	0x40014400
 80060b4:	40014800 	.word	0x40014800

080060b8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80060b8:	b480      	push	{r7}
 80060ba:	b087      	sub	sp, #28
 80060bc:	af00      	add	r7, sp, #0
 80060be:	6078      	str	r0, [r7, #4]
 80060c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	6a1b      	ldr	r3, [r3, #32]
 80060c6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	6a1b      	ldr	r3, [r3, #32]
 80060cc:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	685b      	ldr	r3, [r3, #4]
 80060d8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	69db      	ldr	r3, [r3, #28]
 80060de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80060e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80060ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80060f2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80060f4:	683b      	ldr	r3, [r7, #0]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	021b      	lsls	r3, r3, #8
 80060fa:	68fa      	ldr	r2, [r7, #12]
 80060fc:	4313      	orrs	r3, r2
 80060fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006100:	693b      	ldr	r3, [r7, #16]
 8006102:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006106:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006108:	683b      	ldr	r3, [r7, #0]
 800610a:	689b      	ldr	r3, [r3, #8]
 800610c:	031b      	lsls	r3, r3, #12
 800610e:	693a      	ldr	r2, [r7, #16]
 8006110:	4313      	orrs	r3, r2
 8006112:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	4a18      	ldr	r2, [pc, #96]	; (8006178 <TIM_OC4_SetConfig+0xc0>)
 8006118:	4293      	cmp	r3, r2
 800611a:	d00f      	beq.n	800613c <TIM_OC4_SetConfig+0x84>
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	4a17      	ldr	r2, [pc, #92]	; (800617c <TIM_OC4_SetConfig+0xc4>)
 8006120:	4293      	cmp	r3, r2
 8006122:	d00b      	beq.n	800613c <TIM_OC4_SetConfig+0x84>
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	4a16      	ldr	r2, [pc, #88]	; (8006180 <TIM_OC4_SetConfig+0xc8>)
 8006128:	4293      	cmp	r3, r2
 800612a:	d007      	beq.n	800613c <TIM_OC4_SetConfig+0x84>
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	4a15      	ldr	r2, [pc, #84]	; (8006184 <TIM_OC4_SetConfig+0xcc>)
 8006130:	4293      	cmp	r3, r2
 8006132:	d003      	beq.n	800613c <TIM_OC4_SetConfig+0x84>
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	4a14      	ldr	r2, [pc, #80]	; (8006188 <TIM_OC4_SetConfig+0xd0>)
 8006138:	4293      	cmp	r3, r2
 800613a:	d109      	bne.n	8006150 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800613c:	697b      	ldr	r3, [r7, #20]
 800613e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006142:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006144:	683b      	ldr	r3, [r7, #0]
 8006146:	695b      	ldr	r3, [r3, #20]
 8006148:	019b      	lsls	r3, r3, #6
 800614a:	697a      	ldr	r2, [r7, #20]
 800614c:	4313      	orrs	r3, r2
 800614e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	697a      	ldr	r2, [r7, #20]
 8006154:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	68fa      	ldr	r2, [r7, #12]
 800615a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800615c:	683b      	ldr	r3, [r7, #0]
 800615e:	685a      	ldr	r2, [r3, #4]
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	693a      	ldr	r2, [r7, #16]
 8006168:	621a      	str	r2, [r3, #32]
}
 800616a:	bf00      	nop
 800616c:	371c      	adds	r7, #28
 800616e:	46bd      	mov	sp, r7
 8006170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006174:	4770      	bx	lr
 8006176:	bf00      	nop
 8006178:	40012c00 	.word	0x40012c00
 800617c:	40013400 	.word	0x40013400
 8006180:	40014000 	.word	0x40014000
 8006184:	40014400 	.word	0x40014400
 8006188:	40014800 	.word	0x40014800

0800618c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800618c:	b480      	push	{r7}
 800618e:	b087      	sub	sp, #28
 8006190:	af00      	add	r7, sp, #0
 8006192:	6078      	str	r0, [r7, #4]
 8006194:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	6a1b      	ldr	r3, [r3, #32]
 800619a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	6a1b      	ldr	r3, [r3, #32]
 80061a0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	685b      	ldr	r3, [r3, #4]
 80061ac:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80061ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80061c0:	683b      	ldr	r3, [r7, #0]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	68fa      	ldr	r2, [r7, #12]
 80061c6:	4313      	orrs	r3, r2
 80061c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80061ca:	693b      	ldr	r3, [r7, #16]
 80061cc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80061d0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80061d2:	683b      	ldr	r3, [r7, #0]
 80061d4:	689b      	ldr	r3, [r3, #8]
 80061d6:	041b      	lsls	r3, r3, #16
 80061d8:	693a      	ldr	r2, [r7, #16]
 80061da:	4313      	orrs	r3, r2
 80061dc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	4a17      	ldr	r2, [pc, #92]	; (8006240 <TIM_OC5_SetConfig+0xb4>)
 80061e2:	4293      	cmp	r3, r2
 80061e4:	d00f      	beq.n	8006206 <TIM_OC5_SetConfig+0x7a>
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	4a16      	ldr	r2, [pc, #88]	; (8006244 <TIM_OC5_SetConfig+0xb8>)
 80061ea:	4293      	cmp	r3, r2
 80061ec:	d00b      	beq.n	8006206 <TIM_OC5_SetConfig+0x7a>
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	4a15      	ldr	r2, [pc, #84]	; (8006248 <TIM_OC5_SetConfig+0xbc>)
 80061f2:	4293      	cmp	r3, r2
 80061f4:	d007      	beq.n	8006206 <TIM_OC5_SetConfig+0x7a>
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	4a14      	ldr	r2, [pc, #80]	; (800624c <TIM_OC5_SetConfig+0xc0>)
 80061fa:	4293      	cmp	r3, r2
 80061fc:	d003      	beq.n	8006206 <TIM_OC5_SetConfig+0x7a>
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	4a13      	ldr	r2, [pc, #76]	; (8006250 <TIM_OC5_SetConfig+0xc4>)
 8006202:	4293      	cmp	r3, r2
 8006204:	d109      	bne.n	800621a <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006206:	697b      	ldr	r3, [r7, #20]
 8006208:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800620c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800620e:	683b      	ldr	r3, [r7, #0]
 8006210:	695b      	ldr	r3, [r3, #20]
 8006212:	021b      	lsls	r3, r3, #8
 8006214:	697a      	ldr	r2, [r7, #20]
 8006216:	4313      	orrs	r3, r2
 8006218:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	697a      	ldr	r2, [r7, #20]
 800621e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	68fa      	ldr	r2, [r7, #12]
 8006224:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006226:	683b      	ldr	r3, [r7, #0]
 8006228:	685a      	ldr	r2, [r3, #4]
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	693a      	ldr	r2, [r7, #16]
 8006232:	621a      	str	r2, [r3, #32]
}
 8006234:	bf00      	nop
 8006236:	371c      	adds	r7, #28
 8006238:	46bd      	mov	sp, r7
 800623a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800623e:	4770      	bx	lr
 8006240:	40012c00 	.word	0x40012c00
 8006244:	40013400 	.word	0x40013400
 8006248:	40014000 	.word	0x40014000
 800624c:	40014400 	.word	0x40014400
 8006250:	40014800 	.word	0x40014800

08006254 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006254:	b480      	push	{r7}
 8006256:	b087      	sub	sp, #28
 8006258:	af00      	add	r7, sp, #0
 800625a:	6078      	str	r0, [r7, #4]
 800625c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	6a1b      	ldr	r3, [r3, #32]
 8006262:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	6a1b      	ldr	r3, [r3, #32]
 8006268:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	685b      	ldr	r3, [r3, #4]
 8006274:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800627a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006282:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006286:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006288:	683b      	ldr	r3, [r7, #0]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	021b      	lsls	r3, r3, #8
 800628e:	68fa      	ldr	r2, [r7, #12]
 8006290:	4313      	orrs	r3, r2
 8006292:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006294:	693b      	ldr	r3, [r7, #16]
 8006296:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800629a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800629c:	683b      	ldr	r3, [r7, #0]
 800629e:	689b      	ldr	r3, [r3, #8]
 80062a0:	051b      	lsls	r3, r3, #20
 80062a2:	693a      	ldr	r2, [r7, #16]
 80062a4:	4313      	orrs	r3, r2
 80062a6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	4a18      	ldr	r2, [pc, #96]	; (800630c <TIM_OC6_SetConfig+0xb8>)
 80062ac:	4293      	cmp	r3, r2
 80062ae:	d00f      	beq.n	80062d0 <TIM_OC6_SetConfig+0x7c>
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	4a17      	ldr	r2, [pc, #92]	; (8006310 <TIM_OC6_SetConfig+0xbc>)
 80062b4:	4293      	cmp	r3, r2
 80062b6:	d00b      	beq.n	80062d0 <TIM_OC6_SetConfig+0x7c>
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	4a16      	ldr	r2, [pc, #88]	; (8006314 <TIM_OC6_SetConfig+0xc0>)
 80062bc:	4293      	cmp	r3, r2
 80062be:	d007      	beq.n	80062d0 <TIM_OC6_SetConfig+0x7c>
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	4a15      	ldr	r2, [pc, #84]	; (8006318 <TIM_OC6_SetConfig+0xc4>)
 80062c4:	4293      	cmp	r3, r2
 80062c6:	d003      	beq.n	80062d0 <TIM_OC6_SetConfig+0x7c>
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	4a14      	ldr	r2, [pc, #80]	; (800631c <TIM_OC6_SetConfig+0xc8>)
 80062cc:	4293      	cmp	r3, r2
 80062ce:	d109      	bne.n	80062e4 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80062d0:	697b      	ldr	r3, [r7, #20]
 80062d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80062d6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80062d8:	683b      	ldr	r3, [r7, #0]
 80062da:	695b      	ldr	r3, [r3, #20]
 80062dc:	029b      	lsls	r3, r3, #10
 80062de:	697a      	ldr	r2, [r7, #20]
 80062e0:	4313      	orrs	r3, r2
 80062e2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	697a      	ldr	r2, [r7, #20]
 80062e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	68fa      	ldr	r2, [r7, #12]
 80062ee:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80062f0:	683b      	ldr	r3, [r7, #0]
 80062f2:	685a      	ldr	r2, [r3, #4]
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	693a      	ldr	r2, [r7, #16]
 80062fc:	621a      	str	r2, [r3, #32]
}
 80062fe:	bf00      	nop
 8006300:	371c      	adds	r7, #28
 8006302:	46bd      	mov	sp, r7
 8006304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006308:	4770      	bx	lr
 800630a:	bf00      	nop
 800630c:	40012c00 	.word	0x40012c00
 8006310:	40013400 	.word	0x40013400
 8006314:	40014000 	.word	0x40014000
 8006318:	40014400 	.word	0x40014400
 800631c:	40014800 	.word	0x40014800

08006320 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006320:	b480      	push	{r7}
 8006322:	b087      	sub	sp, #28
 8006324:	af00      	add	r7, sp, #0
 8006326:	60f8      	str	r0, [r7, #12]
 8006328:	60b9      	str	r1, [r7, #8]
 800632a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	6a1b      	ldr	r3, [r3, #32]
 8006330:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	6a1b      	ldr	r3, [r3, #32]
 8006336:	f023 0201 	bic.w	r2, r3, #1
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	699b      	ldr	r3, [r3, #24]
 8006342:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006344:	693b      	ldr	r3, [r7, #16]
 8006346:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800634a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	011b      	lsls	r3, r3, #4
 8006350:	693a      	ldr	r2, [r7, #16]
 8006352:	4313      	orrs	r3, r2
 8006354:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006356:	697b      	ldr	r3, [r7, #20]
 8006358:	f023 030a 	bic.w	r3, r3, #10
 800635c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800635e:	697a      	ldr	r2, [r7, #20]
 8006360:	68bb      	ldr	r3, [r7, #8]
 8006362:	4313      	orrs	r3, r2
 8006364:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	693a      	ldr	r2, [r7, #16]
 800636a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	697a      	ldr	r2, [r7, #20]
 8006370:	621a      	str	r2, [r3, #32]
}
 8006372:	bf00      	nop
 8006374:	371c      	adds	r7, #28
 8006376:	46bd      	mov	sp, r7
 8006378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800637c:	4770      	bx	lr

0800637e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800637e:	b480      	push	{r7}
 8006380:	b087      	sub	sp, #28
 8006382:	af00      	add	r7, sp, #0
 8006384:	60f8      	str	r0, [r7, #12]
 8006386:	60b9      	str	r1, [r7, #8]
 8006388:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	6a1b      	ldr	r3, [r3, #32]
 800638e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	6a1b      	ldr	r3, [r3, #32]
 8006394:	f023 0210 	bic.w	r2, r3, #16
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	699b      	ldr	r3, [r3, #24]
 80063a0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80063a2:	693b      	ldr	r3, [r7, #16]
 80063a4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80063a8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	031b      	lsls	r3, r3, #12
 80063ae:	693a      	ldr	r2, [r7, #16]
 80063b0:	4313      	orrs	r3, r2
 80063b2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80063b4:	697b      	ldr	r3, [r7, #20]
 80063b6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80063ba:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80063bc:	68bb      	ldr	r3, [r7, #8]
 80063be:	011b      	lsls	r3, r3, #4
 80063c0:	697a      	ldr	r2, [r7, #20]
 80063c2:	4313      	orrs	r3, r2
 80063c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	693a      	ldr	r2, [r7, #16]
 80063ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	697a      	ldr	r2, [r7, #20]
 80063d0:	621a      	str	r2, [r3, #32]
}
 80063d2:	bf00      	nop
 80063d4:	371c      	adds	r7, #28
 80063d6:	46bd      	mov	sp, r7
 80063d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063dc:	4770      	bx	lr

080063de <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80063de:	b480      	push	{r7}
 80063e0:	b085      	sub	sp, #20
 80063e2:	af00      	add	r7, sp, #0
 80063e4:	6078      	str	r0, [r7, #4]
 80063e6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	689b      	ldr	r3, [r3, #8]
 80063ec:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063f4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80063f6:	683a      	ldr	r2, [r7, #0]
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	4313      	orrs	r3, r2
 80063fc:	f043 0307 	orr.w	r3, r3, #7
 8006400:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	68fa      	ldr	r2, [r7, #12]
 8006406:	609a      	str	r2, [r3, #8]
}
 8006408:	bf00      	nop
 800640a:	3714      	adds	r7, #20
 800640c:	46bd      	mov	sp, r7
 800640e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006412:	4770      	bx	lr

08006414 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006414:	b480      	push	{r7}
 8006416:	b087      	sub	sp, #28
 8006418:	af00      	add	r7, sp, #0
 800641a:	60f8      	str	r0, [r7, #12]
 800641c:	60b9      	str	r1, [r7, #8]
 800641e:	607a      	str	r2, [r7, #4]
 8006420:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	689b      	ldr	r3, [r3, #8]
 8006426:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006428:	697b      	ldr	r3, [r7, #20]
 800642a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800642e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006430:	683b      	ldr	r3, [r7, #0]
 8006432:	021a      	lsls	r2, r3, #8
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	431a      	orrs	r2, r3
 8006438:	68bb      	ldr	r3, [r7, #8]
 800643a:	4313      	orrs	r3, r2
 800643c:	697a      	ldr	r2, [r7, #20]
 800643e:	4313      	orrs	r3, r2
 8006440:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	697a      	ldr	r2, [r7, #20]
 8006446:	609a      	str	r2, [r3, #8]
}
 8006448:	bf00      	nop
 800644a:	371c      	adds	r7, #28
 800644c:	46bd      	mov	sp, r7
 800644e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006452:	4770      	bx	lr

08006454 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006454:	b480      	push	{r7}
 8006456:	b087      	sub	sp, #28
 8006458:	af00      	add	r7, sp, #0
 800645a:	60f8      	str	r0, [r7, #12]
 800645c:	60b9      	str	r1, [r7, #8]
 800645e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006460:	68bb      	ldr	r3, [r7, #8]
 8006462:	f003 031f 	and.w	r3, r3, #31
 8006466:	2201      	movs	r2, #1
 8006468:	fa02 f303 	lsl.w	r3, r2, r3
 800646c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	6a1a      	ldr	r2, [r3, #32]
 8006472:	697b      	ldr	r3, [r7, #20]
 8006474:	43db      	mvns	r3, r3
 8006476:	401a      	ands	r2, r3
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	6a1a      	ldr	r2, [r3, #32]
 8006480:	68bb      	ldr	r3, [r7, #8]
 8006482:	f003 031f 	and.w	r3, r3, #31
 8006486:	6879      	ldr	r1, [r7, #4]
 8006488:	fa01 f303 	lsl.w	r3, r1, r3
 800648c:	431a      	orrs	r2, r3
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	621a      	str	r2, [r3, #32]
}
 8006492:	bf00      	nop
 8006494:	371c      	adds	r7, #28
 8006496:	46bd      	mov	sp, r7
 8006498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800649c:	4770      	bx	lr
	...

080064a0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80064a0:	b480      	push	{r7}
 80064a2:	b085      	sub	sp, #20
 80064a4:	af00      	add	r7, sp, #0
 80064a6:	6078      	str	r0, [r7, #4]
 80064a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80064b0:	2b01      	cmp	r3, #1
 80064b2:	d101      	bne.n	80064b8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80064b4:	2302      	movs	r3, #2
 80064b6:	e068      	b.n	800658a <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	2201      	movs	r2, #1
 80064bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	2202      	movs	r2, #2
 80064c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	685b      	ldr	r3, [r3, #4]
 80064ce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	689b      	ldr	r3, [r3, #8]
 80064d6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	4a2e      	ldr	r2, [pc, #184]	; (8006598 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80064de:	4293      	cmp	r3, r2
 80064e0:	d004      	beq.n	80064ec <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	4a2d      	ldr	r2, [pc, #180]	; (800659c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80064e8:	4293      	cmp	r3, r2
 80064ea:	d108      	bne.n	80064fe <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80064f2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80064f4:	683b      	ldr	r3, [r7, #0]
 80064f6:	685b      	ldr	r3, [r3, #4]
 80064f8:	68fa      	ldr	r2, [r7, #12]
 80064fa:	4313      	orrs	r3, r2
 80064fc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006504:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006506:	683b      	ldr	r3, [r7, #0]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	68fa      	ldr	r2, [r7, #12]
 800650c:	4313      	orrs	r3, r2
 800650e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	68fa      	ldr	r2, [r7, #12]
 8006516:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	4a1e      	ldr	r2, [pc, #120]	; (8006598 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800651e:	4293      	cmp	r3, r2
 8006520:	d01d      	beq.n	800655e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800652a:	d018      	beq.n	800655e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	4a1b      	ldr	r2, [pc, #108]	; (80065a0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006532:	4293      	cmp	r3, r2
 8006534:	d013      	beq.n	800655e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	4a1a      	ldr	r2, [pc, #104]	; (80065a4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800653c:	4293      	cmp	r3, r2
 800653e:	d00e      	beq.n	800655e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	4a18      	ldr	r2, [pc, #96]	; (80065a8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006546:	4293      	cmp	r3, r2
 8006548:	d009      	beq.n	800655e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	4a13      	ldr	r2, [pc, #76]	; (800659c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006550:	4293      	cmp	r3, r2
 8006552:	d004      	beq.n	800655e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	4a14      	ldr	r2, [pc, #80]	; (80065ac <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800655a:	4293      	cmp	r3, r2
 800655c:	d10c      	bne.n	8006578 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800655e:	68bb      	ldr	r3, [r7, #8]
 8006560:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006564:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006566:	683b      	ldr	r3, [r7, #0]
 8006568:	689b      	ldr	r3, [r3, #8]
 800656a:	68ba      	ldr	r2, [r7, #8]
 800656c:	4313      	orrs	r3, r2
 800656e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	68ba      	ldr	r2, [r7, #8]
 8006576:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	2201      	movs	r2, #1
 800657c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	2200      	movs	r2, #0
 8006584:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006588:	2300      	movs	r3, #0
}
 800658a:	4618      	mov	r0, r3
 800658c:	3714      	adds	r7, #20
 800658e:	46bd      	mov	sp, r7
 8006590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006594:	4770      	bx	lr
 8006596:	bf00      	nop
 8006598:	40012c00 	.word	0x40012c00
 800659c:	40013400 	.word	0x40013400
 80065a0:	40000400 	.word	0x40000400
 80065a4:	40000800 	.word	0x40000800
 80065a8:	40000c00 	.word	0x40000c00
 80065ac:	40014000 	.word	0x40014000

080065b0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80065b0:	b480      	push	{r7}
 80065b2:	b085      	sub	sp, #20
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	6078      	str	r0, [r7, #4]
 80065b8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80065ba:	2300      	movs	r3, #0
 80065bc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80065c4:	2b01      	cmp	r3, #1
 80065c6:	d101      	bne.n	80065cc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80065c8:	2302      	movs	r3, #2
 80065ca:	e065      	b.n	8006698 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	2201      	movs	r2, #1
 80065d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80065da:	683b      	ldr	r3, [r7, #0]
 80065dc:	68db      	ldr	r3, [r3, #12]
 80065de:	4313      	orrs	r3, r2
 80065e0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80065e8:	683b      	ldr	r3, [r7, #0]
 80065ea:	689b      	ldr	r3, [r3, #8]
 80065ec:	4313      	orrs	r3, r2
 80065ee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80065f6:	683b      	ldr	r3, [r7, #0]
 80065f8:	685b      	ldr	r3, [r3, #4]
 80065fa:	4313      	orrs	r3, r2
 80065fc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006604:	683b      	ldr	r3, [r7, #0]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	4313      	orrs	r3, r2
 800660a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006612:	683b      	ldr	r3, [r7, #0]
 8006614:	691b      	ldr	r3, [r3, #16]
 8006616:	4313      	orrs	r3, r2
 8006618:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006620:	683b      	ldr	r3, [r7, #0]
 8006622:	695b      	ldr	r3, [r3, #20]
 8006624:	4313      	orrs	r3, r2
 8006626:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800662e:	683b      	ldr	r3, [r7, #0]
 8006630:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006632:	4313      	orrs	r3, r2
 8006634:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800663c:	683b      	ldr	r3, [r7, #0]
 800663e:	699b      	ldr	r3, [r3, #24]
 8006640:	041b      	lsls	r3, r3, #16
 8006642:	4313      	orrs	r3, r2
 8006644:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	4a16      	ldr	r2, [pc, #88]	; (80066a4 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800664c:	4293      	cmp	r3, r2
 800664e:	d004      	beq.n	800665a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	4a14      	ldr	r2, [pc, #80]	; (80066a8 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8006656:	4293      	cmp	r3, r2
 8006658:	d115      	bne.n	8006686 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8006660:	683b      	ldr	r3, [r7, #0]
 8006662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006664:	051b      	lsls	r3, r3, #20
 8006666:	4313      	orrs	r3, r2
 8006668:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006670:	683b      	ldr	r3, [r7, #0]
 8006672:	69db      	ldr	r3, [r3, #28]
 8006674:	4313      	orrs	r3, r2
 8006676:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800667e:	683b      	ldr	r3, [r7, #0]
 8006680:	6a1b      	ldr	r3, [r3, #32]
 8006682:	4313      	orrs	r3, r2
 8006684:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	68fa      	ldr	r2, [r7, #12]
 800668c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	2200      	movs	r2, #0
 8006692:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006696:	2300      	movs	r3, #0
}
 8006698:	4618      	mov	r0, r3
 800669a:	3714      	adds	r7, #20
 800669c:	46bd      	mov	sp, r7
 800669e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a2:	4770      	bx	lr
 80066a4:	40012c00 	.word	0x40012c00
 80066a8:	40013400 	.word	0x40013400

080066ac <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80066ac:	b480      	push	{r7}
 80066ae:	b083      	sub	sp, #12
 80066b0:	af00      	add	r7, sp, #0
 80066b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80066b4:	bf00      	nop
 80066b6:	370c      	adds	r7, #12
 80066b8:	46bd      	mov	sp, r7
 80066ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066be:	4770      	bx	lr

080066c0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80066c0:	b480      	push	{r7}
 80066c2:	b083      	sub	sp, #12
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80066c8:	bf00      	nop
 80066ca:	370c      	adds	r7, #12
 80066cc:	46bd      	mov	sp, r7
 80066ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d2:	4770      	bx	lr

080066d4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80066d4:	b480      	push	{r7}
 80066d6:	b083      	sub	sp, #12
 80066d8:	af00      	add	r7, sp, #0
 80066da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80066dc:	bf00      	nop
 80066de:	370c      	adds	r7, #12
 80066e0:	46bd      	mov	sp, r7
 80066e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e6:	4770      	bx	lr

080066e8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80066e8:	b580      	push	{r7, lr}
 80066ea:	b082      	sub	sp, #8
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d101      	bne.n	80066fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80066f6:	2301      	movs	r3, #1
 80066f8:	e040      	b.n	800677c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d106      	bne.n	8006710 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	2200      	movs	r2, #0
 8006706:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800670a:	6878      	ldr	r0, [r7, #4]
 800670c:	f7fb f874 	bl	80017f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	2224      	movs	r2, #36	; 0x24
 8006714:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	681a      	ldr	r2, [r3, #0]
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	f022 0201 	bic.w	r2, r2, #1
 8006724:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800672a:	2b00      	cmp	r3, #0
 800672c:	d002      	beq.n	8006734 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800672e:	6878      	ldr	r0, [r7, #4]
 8006730:	f000 feb2 	bl	8007498 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006734:	6878      	ldr	r0, [r7, #4]
 8006736:	f000 fbf7 	bl	8006f28 <UART_SetConfig>
 800673a:	4603      	mov	r3, r0
 800673c:	2b01      	cmp	r3, #1
 800673e:	d101      	bne.n	8006744 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8006740:	2301      	movs	r3, #1
 8006742:	e01b      	b.n	800677c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	685a      	ldr	r2, [r3, #4]
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006752:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	689a      	ldr	r2, [r3, #8]
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006762:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	681a      	ldr	r2, [r3, #0]
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	f042 0201 	orr.w	r2, r2, #1
 8006772:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006774:	6878      	ldr	r0, [r7, #4]
 8006776:	f000 ff31 	bl	80075dc <UART_CheckIdleState>
 800677a:	4603      	mov	r3, r0
}
 800677c:	4618      	mov	r0, r3
 800677e:	3708      	adds	r7, #8
 8006780:	46bd      	mov	sp, r7
 8006782:	bd80      	pop	{r7, pc}

08006784 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006784:	b580      	push	{r7, lr}
 8006786:	b08a      	sub	sp, #40	; 0x28
 8006788:	af00      	add	r7, sp, #0
 800678a:	60f8      	str	r0, [r7, #12]
 800678c:	60b9      	str	r1, [r7, #8]
 800678e:	4613      	mov	r3, r2
 8006790:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006798:	2b20      	cmp	r3, #32
 800679a:	d137      	bne.n	800680c <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800679c:	68bb      	ldr	r3, [r7, #8]
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d002      	beq.n	80067a8 <HAL_UART_Receive_IT+0x24>
 80067a2:	88fb      	ldrh	r3, [r7, #6]
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d101      	bne.n	80067ac <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80067a8:	2301      	movs	r3, #1
 80067aa:	e030      	b.n	800680e <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	2200      	movs	r2, #0
 80067b0:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	4a18      	ldr	r2, [pc, #96]	; (8006818 <HAL_UART_Receive_IT+0x94>)
 80067b8:	4293      	cmp	r3, r2
 80067ba:	d01f      	beq.n	80067fc <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	685b      	ldr	r3, [r3, #4]
 80067c2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d018      	beq.n	80067fc <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067d0:	697b      	ldr	r3, [r7, #20]
 80067d2:	e853 3f00 	ldrex	r3, [r3]
 80067d6:	613b      	str	r3, [r7, #16]
   return(result);
 80067d8:	693b      	ldr	r3, [r7, #16]
 80067da:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80067de:	627b      	str	r3, [r7, #36]	; 0x24
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	461a      	mov	r2, r3
 80067e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067e8:	623b      	str	r3, [r7, #32]
 80067ea:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067ec:	69f9      	ldr	r1, [r7, #28]
 80067ee:	6a3a      	ldr	r2, [r7, #32]
 80067f0:	e841 2300 	strex	r3, r2, [r1]
 80067f4:	61bb      	str	r3, [r7, #24]
   return(result);
 80067f6:	69bb      	ldr	r3, [r7, #24]
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d1e6      	bne.n	80067ca <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80067fc:	88fb      	ldrh	r3, [r7, #6]
 80067fe:	461a      	mov	r2, r3
 8006800:	68b9      	ldr	r1, [r7, #8]
 8006802:	68f8      	ldr	r0, [r7, #12]
 8006804:	f000 fffa 	bl	80077fc <UART_Start_Receive_IT>
 8006808:	4603      	mov	r3, r0
 800680a:	e000      	b.n	800680e <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800680c:	2302      	movs	r3, #2
  }
}
 800680e:	4618      	mov	r0, r3
 8006810:	3728      	adds	r7, #40	; 0x28
 8006812:	46bd      	mov	sp, r7
 8006814:	bd80      	pop	{r7, pc}
 8006816:	bf00      	nop
 8006818:	40008000 	.word	0x40008000

0800681c <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800681c:	b580      	push	{r7, lr}
 800681e:	b08a      	sub	sp, #40	; 0x28
 8006820:	af00      	add	r7, sp, #0
 8006822:	60f8      	str	r0, [r7, #12]
 8006824:	60b9      	str	r1, [r7, #8]
 8006826:	4613      	mov	r3, r2
 8006828:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800682e:	2b20      	cmp	r3, #32
 8006830:	d165      	bne.n	80068fe <HAL_UART_Transmit_DMA+0xe2>
  {
    if ((pData == NULL) || (Size == 0U))
 8006832:	68bb      	ldr	r3, [r7, #8]
 8006834:	2b00      	cmp	r3, #0
 8006836:	d002      	beq.n	800683e <HAL_UART_Transmit_DMA+0x22>
 8006838:	88fb      	ldrh	r3, [r7, #6]
 800683a:	2b00      	cmp	r3, #0
 800683c:	d101      	bne.n	8006842 <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 800683e:	2301      	movs	r3, #1
 8006840:	e05e      	b.n	8006900 <HAL_UART_Transmit_DMA+0xe4>
    }

    huart->pTxBuffPtr  = pData;
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	68ba      	ldr	r2, [r7, #8]
 8006846:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	88fa      	ldrh	r2, [r7, #6]
 800684c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	88fa      	ldrh	r2, [r7, #6]
 8006854:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	2200      	movs	r2, #0
 800685c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	2221      	movs	r2, #33	; 0x21
 8006864:	67da      	str	r2, [r3, #124]	; 0x7c

    if (huart->hdmatx != NULL)
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800686a:	2b00      	cmp	r3, #0
 800686c:	d027      	beq.n	80068be <HAL_UART_Transmit_DMA+0xa2>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006872:	4a25      	ldr	r2, [pc, #148]	; (8006908 <HAL_UART_Transmit_DMA+0xec>)
 8006874:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800687a:	4a24      	ldr	r2, [pc, #144]	; (800690c <HAL_UART_Transmit_DMA+0xf0>)
 800687c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006882:	4a23      	ldr	r2, [pc, #140]	; (8006910 <HAL_UART_Transmit_DMA+0xf4>)
 8006884:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800688a:	2200      	movs	r2, #0
 800688c:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	6f18      	ldr	r0, [r3, #112]	; 0x70
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006896:	4619      	mov	r1, r3
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	3328      	adds	r3, #40	; 0x28
 800689e:	461a      	mov	r2, r3
 80068a0:	88fb      	ldrh	r3, [r7, #6]
 80068a2:	f7fc fdf5 	bl	8003490 <HAL_DMA_Start_IT>
 80068a6:	4603      	mov	r3, r0
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d008      	beq.n	80068be <HAL_UART_Transmit_DMA+0xa2>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	2210      	movs	r2, #16
 80068b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	2220      	movs	r2, #32
 80068b8:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_ERROR;
 80068ba:	2301      	movs	r3, #1
 80068bc:	e020      	b.n	8006900 <HAL_UART_Transmit_DMA+0xe4>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	2240      	movs	r2, #64	; 0x40
 80068c4:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	3308      	adds	r3, #8
 80068cc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068ce:	697b      	ldr	r3, [r7, #20]
 80068d0:	e853 3f00 	ldrex	r3, [r3]
 80068d4:	613b      	str	r3, [r7, #16]
   return(result);
 80068d6:	693b      	ldr	r3, [r7, #16]
 80068d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80068dc:	627b      	str	r3, [r7, #36]	; 0x24
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	3308      	adds	r3, #8
 80068e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80068e6:	623a      	str	r2, [r7, #32]
 80068e8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068ea:	69f9      	ldr	r1, [r7, #28]
 80068ec:	6a3a      	ldr	r2, [r7, #32]
 80068ee:	e841 2300 	strex	r3, r2, [r1]
 80068f2:	61bb      	str	r3, [r7, #24]
   return(result);
 80068f4:	69bb      	ldr	r3, [r7, #24]
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d1e5      	bne.n	80068c6 <HAL_UART_Transmit_DMA+0xaa>

    return HAL_OK;
 80068fa:	2300      	movs	r3, #0
 80068fc:	e000      	b.n	8006900 <HAL_UART_Transmit_DMA+0xe4>
  }
  else
  {
    return HAL_BUSY;
 80068fe:	2302      	movs	r3, #2
  }
}
 8006900:	4618      	mov	r0, r3
 8006902:	3728      	adds	r7, #40	; 0x28
 8006904:	46bd      	mov	sp, r7
 8006906:	bd80      	pop	{r7, pc}
 8006908:	08007a9d 	.word	0x08007a9d
 800690c:	08007b37 	.word	0x08007b37
 8006910:	08007b53 	.word	0x08007b53

08006914 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006914:	b580      	push	{r7, lr}
 8006916:	b0ba      	sub	sp, #232	; 0xe8
 8006918:	af00      	add	r7, sp, #0
 800691a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	69db      	ldr	r3, [r3, #28]
 8006922:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	689b      	ldr	r3, [r3, #8]
 8006936:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800693a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800693e:	f640 030f 	movw	r3, #2063	; 0x80f
 8006942:	4013      	ands	r3, r2
 8006944:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8006948:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800694c:	2b00      	cmp	r3, #0
 800694e:	d115      	bne.n	800697c <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006950:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006954:	f003 0320 	and.w	r3, r3, #32
 8006958:	2b00      	cmp	r3, #0
 800695a:	d00f      	beq.n	800697c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800695c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006960:	f003 0320 	and.w	r3, r3, #32
 8006964:	2b00      	cmp	r3, #0
 8006966:	d009      	beq.n	800697c <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800696c:	2b00      	cmp	r3, #0
 800696e:	f000 82ae 	beq.w	8006ece <HAL_UART_IRQHandler+0x5ba>
      {
        huart->RxISR(huart);
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006976:	6878      	ldr	r0, [r7, #4]
 8006978:	4798      	blx	r3
      }
      return;
 800697a:	e2a8      	b.n	8006ece <HAL_UART_IRQHandler+0x5ba>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 800697c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006980:	2b00      	cmp	r3, #0
 8006982:	f000 8117 	beq.w	8006bb4 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8006986:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800698a:	f003 0301 	and.w	r3, r3, #1
 800698e:	2b00      	cmp	r3, #0
 8006990:	d106      	bne.n	80069a0 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8006992:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8006996:	4b85      	ldr	r3, [pc, #532]	; (8006bac <HAL_UART_IRQHandler+0x298>)
 8006998:	4013      	ands	r3, r2
 800699a:	2b00      	cmp	r3, #0
 800699c:	f000 810a 	beq.w	8006bb4 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80069a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80069a4:	f003 0301 	and.w	r3, r3, #1
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d011      	beq.n	80069d0 <HAL_UART_IRQHandler+0xbc>
 80069ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80069b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d00b      	beq.n	80069d0 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	2201      	movs	r2, #1
 80069be:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80069c6:	f043 0201 	orr.w	r2, r3, #1
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80069d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80069d4:	f003 0302 	and.w	r3, r3, #2
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d011      	beq.n	8006a00 <HAL_UART_IRQHandler+0xec>
 80069dc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80069e0:	f003 0301 	and.w	r3, r3, #1
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d00b      	beq.n	8006a00 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	2202      	movs	r2, #2
 80069ee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80069f6:	f043 0204 	orr.w	r2, r3, #4
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006a00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a04:	f003 0304 	and.w	r3, r3, #4
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d011      	beq.n	8006a30 <HAL_UART_IRQHandler+0x11c>
 8006a0c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006a10:	f003 0301 	and.w	r3, r3, #1
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d00b      	beq.n	8006a30 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	2204      	movs	r2, #4
 8006a1e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006a26:	f043 0202 	orr.w	r2, r3, #2
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006a30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a34:	f003 0308 	and.w	r3, r3, #8
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d017      	beq.n	8006a6c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006a3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a40:	f003 0320 	and.w	r3, r3, #32
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d105      	bne.n	8006a54 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8006a48:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006a4c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d00b      	beq.n	8006a6c <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	2208      	movs	r2, #8
 8006a5a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006a62:	f043 0208 	orr.w	r2, r3, #8
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006a6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a70:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d012      	beq.n	8006a9e <HAL_UART_IRQHandler+0x18a>
 8006a78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a7c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d00c      	beq.n	8006a9e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006a8c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006a94:	f043 0220 	orr.w	r2, r3, #32
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	f000 8214 	beq.w	8006ed2 <HAL_UART_IRQHandler+0x5be>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8006aaa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006aae:	f003 0320 	and.w	r3, r3, #32
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d00d      	beq.n	8006ad2 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006ab6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006aba:	f003 0320 	and.w	r3, r3, #32
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d007      	beq.n	8006ad2 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d003      	beq.n	8006ad2 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006ace:	6878      	ldr	r0, [r7, #4]
 8006ad0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006ad8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	689b      	ldr	r3, [r3, #8]
 8006ae2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ae6:	2b40      	cmp	r3, #64	; 0x40
 8006ae8:	d005      	beq.n	8006af6 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006aea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006aee:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d04f      	beq.n	8006b96 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006af6:	6878      	ldr	r0, [r7, #4]
 8006af8:	f000 ff6c 	bl	80079d4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	689b      	ldr	r3, [r3, #8]
 8006b02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b06:	2b40      	cmp	r3, #64	; 0x40
 8006b08:	d141      	bne.n	8006b8e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	3308      	adds	r3, #8
 8006b10:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b14:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006b18:	e853 3f00 	ldrex	r3, [r3]
 8006b1c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006b20:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006b24:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006b28:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	3308      	adds	r3, #8
 8006b32:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006b36:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006b3a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b3e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006b42:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006b46:	e841 2300 	strex	r3, r2, [r1]
 8006b4a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006b4e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d1d9      	bne.n	8006b0a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d013      	beq.n	8006b86 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006b62:	4a13      	ldr	r2, [pc, #76]	; (8006bb0 <HAL_UART_IRQHandler+0x29c>)
 8006b64:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006b6a:	4618      	mov	r0, r3
 8006b6c:	f7fc fd2e 	bl	80035cc <HAL_DMA_Abort_IT>
 8006b70:	4603      	mov	r3, r0
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d017      	beq.n	8006ba6 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006b7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b7c:	687a      	ldr	r2, [r7, #4]
 8006b7e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006b80:	4610      	mov	r0, r2
 8006b82:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b84:	e00f      	b.n	8006ba6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006b86:	6878      	ldr	r0, [r7, #4]
 8006b88:	f000 f9b8 	bl	8006efc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b8c:	e00b      	b.n	8006ba6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006b8e:	6878      	ldr	r0, [r7, #4]
 8006b90:	f000 f9b4 	bl	8006efc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b94:	e007      	b.n	8006ba6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006b96:	6878      	ldr	r0, [r7, #4]
 8006b98:	f000 f9b0 	bl	8006efc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	2200      	movs	r2, #0
 8006ba0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8006ba4:	e195      	b.n	8006ed2 <HAL_UART_IRQHandler+0x5be>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ba6:	bf00      	nop
    return;
 8006ba8:	e193      	b.n	8006ed2 <HAL_UART_IRQHandler+0x5be>
 8006baa:	bf00      	nop
 8006bac:	04000120 	.word	0x04000120
 8006bb0:	08007bd1 	.word	0x08007bd1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006bb8:	2b01      	cmp	r3, #1
 8006bba:	f040 814e 	bne.w	8006e5a <HAL_UART_IRQHandler+0x546>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006bbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006bc2:	f003 0310 	and.w	r3, r3, #16
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	f000 8147 	beq.w	8006e5a <HAL_UART_IRQHandler+0x546>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006bcc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006bd0:	f003 0310 	and.w	r3, r3, #16
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	f000 8140 	beq.w	8006e5a <HAL_UART_IRQHandler+0x546>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	2210      	movs	r2, #16
 8006be0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	689b      	ldr	r3, [r3, #8]
 8006be8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bec:	2b40      	cmp	r3, #64	; 0x40
 8006bee:	f040 80b8 	bne.w	8006d62 <HAL_UART_IRQHandler+0x44e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	685b      	ldr	r3, [r3, #4]
 8006bfa:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006bfe:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	f000 8167 	beq.w	8006ed6 <HAL_UART_IRQHandler+0x5c2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006c0e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006c12:	429a      	cmp	r2, r3
 8006c14:	f080 815f 	bcs.w	8006ed6 <HAL_UART_IRQHandler+0x5c2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006c1e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	f003 0320 	and.w	r3, r3, #32
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	f040 8086 	bne.w	8006d40 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c3c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006c40:	e853 3f00 	ldrex	r3, [r3]
 8006c44:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006c48:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006c4c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006c50:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	461a      	mov	r2, r3
 8006c5a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006c5e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006c62:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c66:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006c6a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006c6e:	e841 2300 	strex	r3, r2, [r1]
 8006c72:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006c76:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d1da      	bne.n	8006c34 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	3308      	adds	r3, #8
 8006c84:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c86:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006c88:	e853 3f00 	ldrex	r3, [r3]
 8006c8c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006c8e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006c90:	f023 0301 	bic.w	r3, r3, #1
 8006c94:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	3308      	adds	r3, #8
 8006c9e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006ca2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006ca6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ca8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006caa:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006cae:	e841 2300 	strex	r3, r2, [r1]
 8006cb2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006cb4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d1e1      	bne.n	8006c7e <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	3308      	adds	r3, #8
 8006cc0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cc2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006cc4:	e853 3f00 	ldrex	r3, [r3]
 8006cc8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006cca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006ccc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006cd0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	3308      	adds	r3, #8
 8006cda:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006cde:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006ce0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ce2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006ce4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006ce6:	e841 2300 	strex	r3, r2, [r1]
 8006cea:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006cec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d1e3      	bne.n	8006cba <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	2220      	movs	r2, #32
 8006cf6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	2200      	movs	r2, #0
 8006cfe:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d08:	e853 3f00 	ldrex	r3, [r3]
 8006d0c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006d0e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006d10:	f023 0310 	bic.w	r3, r3, #16
 8006d14:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	461a      	mov	r2, r3
 8006d1e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006d22:	65bb      	str	r3, [r7, #88]	; 0x58
 8006d24:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d26:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006d28:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006d2a:	e841 2300 	strex	r3, r2, [r1]
 8006d2e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006d30:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d1e4      	bne.n	8006d00 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006d3a:	4618      	mov	r0, r3
 8006d3c:	f7fc fc08 	bl	8003550 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	2202      	movs	r2, #2
 8006d44:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006d52:	b29b      	uxth	r3, r3
 8006d54:	1ad3      	subs	r3, r2, r3
 8006d56:	b29b      	uxth	r3, r3
 8006d58:	4619      	mov	r1, r3
 8006d5a:	6878      	ldr	r0, [r7, #4]
 8006d5c:	f000 f8d8 	bl	8006f10 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006d60:	e0b9      	b.n	8006ed6 <HAL_UART_IRQHandler+0x5c2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006d6e:	b29b      	uxth	r3, r3
 8006d70:	1ad3      	subs	r3, r2, r3
 8006d72:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006d7c:	b29b      	uxth	r3, r3
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	f000 80ab 	beq.w	8006eda <HAL_UART_IRQHandler+0x5c6>
          && (nb_rx_data > 0U))
 8006d84:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	f000 80a6 	beq.w	8006eda <HAL_UART_IRQHandler+0x5c6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d96:	e853 3f00 	ldrex	r3, [r3]
 8006d9a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006d9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d9e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006da2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	461a      	mov	r2, r3
 8006dac:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006db0:	647b      	str	r3, [r7, #68]	; 0x44
 8006db2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006db4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006db6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006db8:	e841 2300 	strex	r3, r2, [r1]
 8006dbc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006dbe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d1e4      	bne.n	8006d8e <HAL_UART_IRQHandler+0x47a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	3308      	adds	r3, #8
 8006dca:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dce:	e853 3f00 	ldrex	r3, [r3]
 8006dd2:	623b      	str	r3, [r7, #32]
   return(result);
 8006dd4:	6a3b      	ldr	r3, [r7, #32]
 8006dd6:	f023 0301 	bic.w	r3, r3, #1
 8006dda:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	3308      	adds	r3, #8
 8006de4:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006de8:	633a      	str	r2, [r7, #48]	; 0x30
 8006dea:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dec:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006dee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006df0:	e841 2300 	strex	r3, r2, [r1]
 8006df4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006df6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d1e3      	bne.n	8006dc4 <HAL_UART_IRQHandler+0x4b0>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	2220      	movs	r2, #32
 8006e00:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	2200      	movs	r2, #0
 8006e08:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	2200      	movs	r2, #0
 8006e0e:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e16:	693b      	ldr	r3, [r7, #16]
 8006e18:	e853 3f00 	ldrex	r3, [r3]
 8006e1c:	60fb      	str	r3, [r7, #12]
   return(result);
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	f023 0310 	bic.w	r3, r3, #16
 8006e24:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	461a      	mov	r2, r3
 8006e2e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006e32:	61fb      	str	r3, [r7, #28]
 8006e34:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e36:	69b9      	ldr	r1, [r7, #24]
 8006e38:	69fa      	ldr	r2, [r7, #28]
 8006e3a:	e841 2300 	strex	r3, r2, [r1]
 8006e3e:	617b      	str	r3, [r7, #20]
   return(result);
 8006e40:	697b      	ldr	r3, [r7, #20]
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d1e4      	bne.n	8006e10 <HAL_UART_IRQHandler+0x4fc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	2202      	movs	r2, #2
 8006e4a:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006e4c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006e50:	4619      	mov	r1, r3
 8006e52:	6878      	ldr	r0, [r7, #4]
 8006e54:	f000 f85c 	bl	8006f10 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006e58:	e03f      	b.n	8006eda <HAL_UART_IRQHandler+0x5c6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006e5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e5e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d00e      	beq.n	8006e84 <HAL_UART_IRQHandler+0x570>
 8006e66:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006e6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d008      	beq.n	8006e84 <HAL_UART_IRQHandler+0x570>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006e7a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006e7c:	6878      	ldr	r0, [r7, #4]
 8006e7e:	f001 f8a3 	bl	8007fc8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006e82:	e02d      	b.n	8006ee0 <HAL_UART_IRQHandler+0x5cc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006e84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d00e      	beq.n	8006eae <HAL_UART_IRQHandler+0x59a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006e90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006e94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d008      	beq.n	8006eae <HAL_UART_IRQHandler+0x59a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d01c      	beq.n	8006ede <HAL_UART_IRQHandler+0x5ca>
    {
      huart->TxISR(huart);
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006ea8:	6878      	ldr	r0, [r7, #4]
 8006eaa:	4798      	blx	r3
    }
    return;
 8006eac:	e017      	b.n	8006ede <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006eae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006eb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d012      	beq.n	8006ee0 <HAL_UART_IRQHandler+0x5cc>
 8006eba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006ebe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d00c      	beq.n	8006ee0 <HAL_UART_IRQHandler+0x5cc>
  {
    UART_EndTransmit_IT(huart);
 8006ec6:	6878      	ldr	r0, [r7, #4]
 8006ec8:	f000 fe98 	bl	8007bfc <UART_EndTransmit_IT>
    return;
 8006ecc:	e008      	b.n	8006ee0 <HAL_UART_IRQHandler+0x5cc>
      return;
 8006ece:	bf00      	nop
 8006ed0:	e006      	b.n	8006ee0 <HAL_UART_IRQHandler+0x5cc>
    return;
 8006ed2:	bf00      	nop
 8006ed4:	e004      	b.n	8006ee0 <HAL_UART_IRQHandler+0x5cc>
      return;
 8006ed6:	bf00      	nop
 8006ed8:	e002      	b.n	8006ee0 <HAL_UART_IRQHandler+0x5cc>
      return;
 8006eda:	bf00      	nop
 8006edc:	e000      	b.n	8006ee0 <HAL_UART_IRQHandler+0x5cc>
    return;
 8006ede:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8006ee0:	37e8      	adds	r7, #232	; 0xe8
 8006ee2:	46bd      	mov	sp, r7
 8006ee4:	bd80      	pop	{r7, pc}
 8006ee6:	bf00      	nop

08006ee8 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006ee8:	b480      	push	{r7}
 8006eea:	b083      	sub	sp, #12
 8006eec:	af00      	add	r7, sp, #0
 8006eee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8006ef0:	bf00      	nop
 8006ef2:	370c      	adds	r7, #12
 8006ef4:	46bd      	mov	sp, r7
 8006ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006efa:	4770      	bx	lr

08006efc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006efc:	b480      	push	{r7}
 8006efe:	b083      	sub	sp, #12
 8006f00:	af00      	add	r7, sp, #0
 8006f02:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006f04:	bf00      	nop
 8006f06:	370c      	adds	r7, #12
 8006f08:	46bd      	mov	sp, r7
 8006f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f0e:	4770      	bx	lr

08006f10 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006f10:	b480      	push	{r7}
 8006f12:	b083      	sub	sp, #12
 8006f14:	af00      	add	r7, sp, #0
 8006f16:	6078      	str	r0, [r7, #4]
 8006f18:	460b      	mov	r3, r1
 8006f1a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006f1c:	bf00      	nop
 8006f1e:	370c      	adds	r7, #12
 8006f20:	46bd      	mov	sp, r7
 8006f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f26:	4770      	bx	lr

08006f28 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006f28:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006f2c:	b08a      	sub	sp, #40	; 0x28
 8006f2e:	af00      	add	r7, sp, #0
 8006f30:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006f32:	2300      	movs	r3, #0
 8006f34:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	689a      	ldr	r2, [r3, #8]
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	691b      	ldr	r3, [r3, #16]
 8006f40:	431a      	orrs	r2, r3
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	695b      	ldr	r3, [r3, #20]
 8006f46:	431a      	orrs	r2, r3
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	69db      	ldr	r3, [r3, #28]
 8006f4c:	4313      	orrs	r3, r2
 8006f4e:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	681a      	ldr	r2, [r3, #0]
 8006f56:	4ba4      	ldr	r3, [pc, #656]	; (80071e8 <UART_SetConfig+0x2c0>)
 8006f58:	4013      	ands	r3, r2
 8006f5a:	68fa      	ldr	r2, [r7, #12]
 8006f5c:	6812      	ldr	r2, [r2, #0]
 8006f5e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006f60:	430b      	orrs	r3, r1
 8006f62:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	685b      	ldr	r3, [r3, #4]
 8006f6a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	68da      	ldr	r2, [r3, #12]
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	430a      	orrs	r2, r1
 8006f78:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	699b      	ldr	r3, [r3, #24]
 8006f7e:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	4a99      	ldr	r2, [pc, #612]	; (80071ec <UART_SetConfig+0x2c4>)
 8006f86:	4293      	cmp	r3, r2
 8006f88:	d004      	beq.n	8006f94 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	6a1b      	ldr	r3, [r3, #32]
 8006f8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006f90:	4313      	orrs	r3, r2
 8006f92:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	689b      	ldr	r3, [r3, #8]
 8006f9a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006fa4:	430a      	orrs	r2, r1
 8006fa6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	4a90      	ldr	r2, [pc, #576]	; (80071f0 <UART_SetConfig+0x2c8>)
 8006fae:	4293      	cmp	r3, r2
 8006fb0:	d126      	bne.n	8007000 <UART_SetConfig+0xd8>
 8006fb2:	4b90      	ldr	r3, [pc, #576]	; (80071f4 <UART_SetConfig+0x2cc>)
 8006fb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006fb8:	f003 0303 	and.w	r3, r3, #3
 8006fbc:	2b03      	cmp	r3, #3
 8006fbe:	d81b      	bhi.n	8006ff8 <UART_SetConfig+0xd0>
 8006fc0:	a201      	add	r2, pc, #4	; (adr r2, 8006fc8 <UART_SetConfig+0xa0>)
 8006fc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fc6:	bf00      	nop
 8006fc8:	08006fd9 	.word	0x08006fd9
 8006fcc:	08006fe9 	.word	0x08006fe9
 8006fd0:	08006fe1 	.word	0x08006fe1
 8006fd4:	08006ff1 	.word	0x08006ff1
 8006fd8:	2301      	movs	r3, #1
 8006fda:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006fde:	e116      	b.n	800720e <UART_SetConfig+0x2e6>
 8006fe0:	2302      	movs	r3, #2
 8006fe2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006fe6:	e112      	b.n	800720e <UART_SetConfig+0x2e6>
 8006fe8:	2304      	movs	r3, #4
 8006fea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006fee:	e10e      	b.n	800720e <UART_SetConfig+0x2e6>
 8006ff0:	2308      	movs	r3, #8
 8006ff2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006ff6:	e10a      	b.n	800720e <UART_SetConfig+0x2e6>
 8006ff8:	2310      	movs	r3, #16
 8006ffa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006ffe:	e106      	b.n	800720e <UART_SetConfig+0x2e6>
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	4a7c      	ldr	r2, [pc, #496]	; (80071f8 <UART_SetConfig+0x2d0>)
 8007006:	4293      	cmp	r3, r2
 8007008:	d138      	bne.n	800707c <UART_SetConfig+0x154>
 800700a:	4b7a      	ldr	r3, [pc, #488]	; (80071f4 <UART_SetConfig+0x2cc>)
 800700c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007010:	f003 030c 	and.w	r3, r3, #12
 8007014:	2b0c      	cmp	r3, #12
 8007016:	d82d      	bhi.n	8007074 <UART_SetConfig+0x14c>
 8007018:	a201      	add	r2, pc, #4	; (adr r2, 8007020 <UART_SetConfig+0xf8>)
 800701a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800701e:	bf00      	nop
 8007020:	08007055 	.word	0x08007055
 8007024:	08007075 	.word	0x08007075
 8007028:	08007075 	.word	0x08007075
 800702c:	08007075 	.word	0x08007075
 8007030:	08007065 	.word	0x08007065
 8007034:	08007075 	.word	0x08007075
 8007038:	08007075 	.word	0x08007075
 800703c:	08007075 	.word	0x08007075
 8007040:	0800705d 	.word	0x0800705d
 8007044:	08007075 	.word	0x08007075
 8007048:	08007075 	.word	0x08007075
 800704c:	08007075 	.word	0x08007075
 8007050:	0800706d 	.word	0x0800706d
 8007054:	2300      	movs	r3, #0
 8007056:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800705a:	e0d8      	b.n	800720e <UART_SetConfig+0x2e6>
 800705c:	2302      	movs	r3, #2
 800705e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007062:	e0d4      	b.n	800720e <UART_SetConfig+0x2e6>
 8007064:	2304      	movs	r3, #4
 8007066:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800706a:	e0d0      	b.n	800720e <UART_SetConfig+0x2e6>
 800706c:	2308      	movs	r3, #8
 800706e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007072:	e0cc      	b.n	800720e <UART_SetConfig+0x2e6>
 8007074:	2310      	movs	r3, #16
 8007076:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800707a:	e0c8      	b.n	800720e <UART_SetConfig+0x2e6>
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	4a5e      	ldr	r2, [pc, #376]	; (80071fc <UART_SetConfig+0x2d4>)
 8007082:	4293      	cmp	r3, r2
 8007084:	d125      	bne.n	80070d2 <UART_SetConfig+0x1aa>
 8007086:	4b5b      	ldr	r3, [pc, #364]	; (80071f4 <UART_SetConfig+0x2cc>)
 8007088:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800708c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007090:	2b30      	cmp	r3, #48	; 0x30
 8007092:	d016      	beq.n	80070c2 <UART_SetConfig+0x19a>
 8007094:	2b30      	cmp	r3, #48	; 0x30
 8007096:	d818      	bhi.n	80070ca <UART_SetConfig+0x1a2>
 8007098:	2b20      	cmp	r3, #32
 800709a:	d00a      	beq.n	80070b2 <UART_SetConfig+0x18a>
 800709c:	2b20      	cmp	r3, #32
 800709e:	d814      	bhi.n	80070ca <UART_SetConfig+0x1a2>
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d002      	beq.n	80070aa <UART_SetConfig+0x182>
 80070a4:	2b10      	cmp	r3, #16
 80070a6:	d008      	beq.n	80070ba <UART_SetConfig+0x192>
 80070a8:	e00f      	b.n	80070ca <UART_SetConfig+0x1a2>
 80070aa:	2300      	movs	r3, #0
 80070ac:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80070b0:	e0ad      	b.n	800720e <UART_SetConfig+0x2e6>
 80070b2:	2302      	movs	r3, #2
 80070b4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80070b8:	e0a9      	b.n	800720e <UART_SetConfig+0x2e6>
 80070ba:	2304      	movs	r3, #4
 80070bc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80070c0:	e0a5      	b.n	800720e <UART_SetConfig+0x2e6>
 80070c2:	2308      	movs	r3, #8
 80070c4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80070c8:	e0a1      	b.n	800720e <UART_SetConfig+0x2e6>
 80070ca:	2310      	movs	r3, #16
 80070cc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80070d0:	e09d      	b.n	800720e <UART_SetConfig+0x2e6>
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	4a4a      	ldr	r2, [pc, #296]	; (8007200 <UART_SetConfig+0x2d8>)
 80070d8:	4293      	cmp	r3, r2
 80070da:	d125      	bne.n	8007128 <UART_SetConfig+0x200>
 80070dc:	4b45      	ldr	r3, [pc, #276]	; (80071f4 <UART_SetConfig+0x2cc>)
 80070de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80070e2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80070e6:	2bc0      	cmp	r3, #192	; 0xc0
 80070e8:	d016      	beq.n	8007118 <UART_SetConfig+0x1f0>
 80070ea:	2bc0      	cmp	r3, #192	; 0xc0
 80070ec:	d818      	bhi.n	8007120 <UART_SetConfig+0x1f8>
 80070ee:	2b80      	cmp	r3, #128	; 0x80
 80070f0:	d00a      	beq.n	8007108 <UART_SetConfig+0x1e0>
 80070f2:	2b80      	cmp	r3, #128	; 0x80
 80070f4:	d814      	bhi.n	8007120 <UART_SetConfig+0x1f8>
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d002      	beq.n	8007100 <UART_SetConfig+0x1d8>
 80070fa:	2b40      	cmp	r3, #64	; 0x40
 80070fc:	d008      	beq.n	8007110 <UART_SetConfig+0x1e8>
 80070fe:	e00f      	b.n	8007120 <UART_SetConfig+0x1f8>
 8007100:	2300      	movs	r3, #0
 8007102:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007106:	e082      	b.n	800720e <UART_SetConfig+0x2e6>
 8007108:	2302      	movs	r3, #2
 800710a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800710e:	e07e      	b.n	800720e <UART_SetConfig+0x2e6>
 8007110:	2304      	movs	r3, #4
 8007112:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007116:	e07a      	b.n	800720e <UART_SetConfig+0x2e6>
 8007118:	2308      	movs	r3, #8
 800711a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800711e:	e076      	b.n	800720e <UART_SetConfig+0x2e6>
 8007120:	2310      	movs	r3, #16
 8007122:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007126:	e072      	b.n	800720e <UART_SetConfig+0x2e6>
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	4a35      	ldr	r2, [pc, #212]	; (8007204 <UART_SetConfig+0x2dc>)
 800712e:	4293      	cmp	r3, r2
 8007130:	d12a      	bne.n	8007188 <UART_SetConfig+0x260>
 8007132:	4b30      	ldr	r3, [pc, #192]	; (80071f4 <UART_SetConfig+0x2cc>)
 8007134:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007138:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800713c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007140:	d01a      	beq.n	8007178 <UART_SetConfig+0x250>
 8007142:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007146:	d81b      	bhi.n	8007180 <UART_SetConfig+0x258>
 8007148:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800714c:	d00c      	beq.n	8007168 <UART_SetConfig+0x240>
 800714e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007152:	d815      	bhi.n	8007180 <UART_SetConfig+0x258>
 8007154:	2b00      	cmp	r3, #0
 8007156:	d003      	beq.n	8007160 <UART_SetConfig+0x238>
 8007158:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800715c:	d008      	beq.n	8007170 <UART_SetConfig+0x248>
 800715e:	e00f      	b.n	8007180 <UART_SetConfig+0x258>
 8007160:	2300      	movs	r3, #0
 8007162:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007166:	e052      	b.n	800720e <UART_SetConfig+0x2e6>
 8007168:	2302      	movs	r3, #2
 800716a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800716e:	e04e      	b.n	800720e <UART_SetConfig+0x2e6>
 8007170:	2304      	movs	r3, #4
 8007172:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007176:	e04a      	b.n	800720e <UART_SetConfig+0x2e6>
 8007178:	2308      	movs	r3, #8
 800717a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800717e:	e046      	b.n	800720e <UART_SetConfig+0x2e6>
 8007180:	2310      	movs	r3, #16
 8007182:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007186:	e042      	b.n	800720e <UART_SetConfig+0x2e6>
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	4a17      	ldr	r2, [pc, #92]	; (80071ec <UART_SetConfig+0x2c4>)
 800718e:	4293      	cmp	r3, r2
 8007190:	d13a      	bne.n	8007208 <UART_SetConfig+0x2e0>
 8007192:	4b18      	ldr	r3, [pc, #96]	; (80071f4 <UART_SetConfig+0x2cc>)
 8007194:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007198:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800719c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80071a0:	d01a      	beq.n	80071d8 <UART_SetConfig+0x2b0>
 80071a2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80071a6:	d81b      	bhi.n	80071e0 <UART_SetConfig+0x2b8>
 80071a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80071ac:	d00c      	beq.n	80071c8 <UART_SetConfig+0x2a0>
 80071ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80071b2:	d815      	bhi.n	80071e0 <UART_SetConfig+0x2b8>
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d003      	beq.n	80071c0 <UART_SetConfig+0x298>
 80071b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80071bc:	d008      	beq.n	80071d0 <UART_SetConfig+0x2a8>
 80071be:	e00f      	b.n	80071e0 <UART_SetConfig+0x2b8>
 80071c0:	2300      	movs	r3, #0
 80071c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80071c6:	e022      	b.n	800720e <UART_SetConfig+0x2e6>
 80071c8:	2302      	movs	r3, #2
 80071ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80071ce:	e01e      	b.n	800720e <UART_SetConfig+0x2e6>
 80071d0:	2304      	movs	r3, #4
 80071d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80071d6:	e01a      	b.n	800720e <UART_SetConfig+0x2e6>
 80071d8:	2308      	movs	r3, #8
 80071da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80071de:	e016      	b.n	800720e <UART_SetConfig+0x2e6>
 80071e0:	2310      	movs	r3, #16
 80071e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80071e6:	e012      	b.n	800720e <UART_SetConfig+0x2e6>
 80071e8:	efff69f3 	.word	0xefff69f3
 80071ec:	40008000 	.word	0x40008000
 80071f0:	40013800 	.word	0x40013800
 80071f4:	40021000 	.word	0x40021000
 80071f8:	40004400 	.word	0x40004400
 80071fc:	40004800 	.word	0x40004800
 8007200:	40004c00 	.word	0x40004c00
 8007204:	40005000 	.word	0x40005000
 8007208:	2310      	movs	r3, #16
 800720a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	4a9f      	ldr	r2, [pc, #636]	; (8007490 <UART_SetConfig+0x568>)
 8007214:	4293      	cmp	r3, r2
 8007216:	d17a      	bne.n	800730e <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007218:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800721c:	2b08      	cmp	r3, #8
 800721e:	d824      	bhi.n	800726a <UART_SetConfig+0x342>
 8007220:	a201      	add	r2, pc, #4	; (adr r2, 8007228 <UART_SetConfig+0x300>)
 8007222:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007226:	bf00      	nop
 8007228:	0800724d 	.word	0x0800724d
 800722c:	0800726b 	.word	0x0800726b
 8007230:	08007255 	.word	0x08007255
 8007234:	0800726b 	.word	0x0800726b
 8007238:	0800725b 	.word	0x0800725b
 800723c:	0800726b 	.word	0x0800726b
 8007240:	0800726b 	.word	0x0800726b
 8007244:	0800726b 	.word	0x0800726b
 8007248:	08007263 	.word	0x08007263
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800724c:	f7fd fa78 	bl	8004740 <HAL_RCC_GetPCLK1Freq>
 8007250:	61f8      	str	r0, [r7, #28]
        break;
 8007252:	e010      	b.n	8007276 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007254:	4b8f      	ldr	r3, [pc, #572]	; (8007494 <UART_SetConfig+0x56c>)
 8007256:	61fb      	str	r3, [r7, #28]
        break;
 8007258:	e00d      	b.n	8007276 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800725a:	f7fd f9d9 	bl	8004610 <HAL_RCC_GetSysClockFreq>
 800725e:	61f8      	str	r0, [r7, #28]
        break;
 8007260:	e009      	b.n	8007276 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007262:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007266:	61fb      	str	r3, [r7, #28]
        break;
 8007268:	e005      	b.n	8007276 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800726a:	2300      	movs	r3, #0
 800726c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800726e:	2301      	movs	r3, #1
 8007270:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8007274:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007276:	69fb      	ldr	r3, [r7, #28]
 8007278:	2b00      	cmp	r3, #0
 800727a:	f000 80fb 	beq.w	8007474 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	685a      	ldr	r2, [r3, #4]
 8007282:	4613      	mov	r3, r2
 8007284:	005b      	lsls	r3, r3, #1
 8007286:	4413      	add	r3, r2
 8007288:	69fa      	ldr	r2, [r7, #28]
 800728a:	429a      	cmp	r2, r3
 800728c:	d305      	bcc.n	800729a <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	685b      	ldr	r3, [r3, #4]
 8007292:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007294:	69fa      	ldr	r2, [r7, #28]
 8007296:	429a      	cmp	r2, r3
 8007298:	d903      	bls.n	80072a2 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800729a:	2301      	movs	r3, #1
 800729c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80072a0:	e0e8      	b.n	8007474 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80072a2:	69fb      	ldr	r3, [r7, #28]
 80072a4:	2200      	movs	r2, #0
 80072a6:	461c      	mov	r4, r3
 80072a8:	4615      	mov	r5, r2
 80072aa:	f04f 0200 	mov.w	r2, #0
 80072ae:	f04f 0300 	mov.w	r3, #0
 80072b2:	022b      	lsls	r3, r5, #8
 80072b4:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80072b8:	0222      	lsls	r2, r4, #8
 80072ba:	68f9      	ldr	r1, [r7, #12]
 80072bc:	6849      	ldr	r1, [r1, #4]
 80072be:	0849      	lsrs	r1, r1, #1
 80072c0:	2000      	movs	r0, #0
 80072c2:	4688      	mov	r8, r1
 80072c4:	4681      	mov	r9, r0
 80072c6:	eb12 0a08 	adds.w	sl, r2, r8
 80072ca:	eb43 0b09 	adc.w	fp, r3, r9
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	685b      	ldr	r3, [r3, #4]
 80072d2:	2200      	movs	r2, #0
 80072d4:	603b      	str	r3, [r7, #0]
 80072d6:	607a      	str	r2, [r7, #4]
 80072d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80072dc:	4650      	mov	r0, sl
 80072de:	4659      	mov	r1, fp
 80072e0:	f7f9 fcb2 	bl	8000c48 <__aeabi_uldivmod>
 80072e4:	4602      	mov	r2, r0
 80072e6:	460b      	mov	r3, r1
 80072e8:	4613      	mov	r3, r2
 80072ea:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80072ec:	69bb      	ldr	r3, [r7, #24]
 80072ee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80072f2:	d308      	bcc.n	8007306 <UART_SetConfig+0x3de>
 80072f4:	69bb      	ldr	r3, [r7, #24]
 80072f6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80072fa:	d204      	bcs.n	8007306 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	69ba      	ldr	r2, [r7, #24]
 8007302:	60da      	str	r2, [r3, #12]
 8007304:	e0b6      	b.n	8007474 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8007306:	2301      	movs	r3, #1
 8007308:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800730c:	e0b2      	b.n	8007474 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	69db      	ldr	r3, [r3, #28]
 8007312:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007316:	d15e      	bne.n	80073d6 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8007318:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800731c:	2b08      	cmp	r3, #8
 800731e:	d828      	bhi.n	8007372 <UART_SetConfig+0x44a>
 8007320:	a201      	add	r2, pc, #4	; (adr r2, 8007328 <UART_SetConfig+0x400>)
 8007322:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007326:	bf00      	nop
 8007328:	0800734d 	.word	0x0800734d
 800732c:	08007355 	.word	0x08007355
 8007330:	0800735d 	.word	0x0800735d
 8007334:	08007373 	.word	0x08007373
 8007338:	08007363 	.word	0x08007363
 800733c:	08007373 	.word	0x08007373
 8007340:	08007373 	.word	0x08007373
 8007344:	08007373 	.word	0x08007373
 8007348:	0800736b 	.word	0x0800736b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800734c:	f7fd f9f8 	bl	8004740 <HAL_RCC_GetPCLK1Freq>
 8007350:	61f8      	str	r0, [r7, #28]
        break;
 8007352:	e014      	b.n	800737e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007354:	f7fd fa0a 	bl	800476c <HAL_RCC_GetPCLK2Freq>
 8007358:	61f8      	str	r0, [r7, #28]
        break;
 800735a:	e010      	b.n	800737e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800735c:	4b4d      	ldr	r3, [pc, #308]	; (8007494 <UART_SetConfig+0x56c>)
 800735e:	61fb      	str	r3, [r7, #28]
        break;
 8007360:	e00d      	b.n	800737e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007362:	f7fd f955 	bl	8004610 <HAL_RCC_GetSysClockFreq>
 8007366:	61f8      	str	r0, [r7, #28]
        break;
 8007368:	e009      	b.n	800737e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800736a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800736e:	61fb      	str	r3, [r7, #28]
        break;
 8007370:	e005      	b.n	800737e <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8007372:	2300      	movs	r3, #0
 8007374:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007376:	2301      	movs	r3, #1
 8007378:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800737c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800737e:	69fb      	ldr	r3, [r7, #28]
 8007380:	2b00      	cmp	r3, #0
 8007382:	d077      	beq.n	8007474 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007384:	69fb      	ldr	r3, [r7, #28]
 8007386:	005a      	lsls	r2, r3, #1
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	685b      	ldr	r3, [r3, #4]
 800738c:	085b      	lsrs	r3, r3, #1
 800738e:	441a      	add	r2, r3
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	685b      	ldr	r3, [r3, #4]
 8007394:	fbb2 f3f3 	udiv	r3, r2, r3
 8007398:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800739a:	69bb      	ldr	r3, [r7, #24]
 800739c:	2b0f      	cmp	r3, #15
 800739e:	d916      	bls.n	80073ce <UART_SetConfig+0x4a6>
 80073a0:	69bb      	ldr	r3, [r7, #24]
 80073a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80073a6:	d212      	bcs.n	80073ce <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80073a8:	69bb      	ldr	r3, [r7, #24]
 80073aa:	b29b      	uxth	r3, r3
 80073ac:	f023 030f 	bic.w	r3, r3, #15
 80073b0:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80073b2:	69bb      	ldr	r3, [r7, #24]
 80073b4:	085b      	lsrs	r3, r3, #1
 80073b6:	b29b      	uxth	r3, r3
 80073b8:	f003 0307 	and.w	r3, r3, #7
 80073bc:	b29a      	uxth	r2, r3
 80073be:	8afb      	ldrh	r3, [r7, #22]
 80073c0:	4313      	orrs	r3, r2
 80073c2:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	8afa      	ldrh	r2, [r7, #22]
 80073ca:	60da      	str	r2, [r3, #12]
 80073cc:	e052      	b.n	8007474 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80073ce:	2301      	movs	r3, #1
 80073d0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80073d4:	e04e      	b.n	8007474 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80073d6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80073da:	2b08      	cmp	r3, #8
 80073dc:	d827      	bhi.n	800742e <UART_SetConfig+0x506>
 80073de:	a201      	add	r2, pc, #4	; (adr r2, 80073e4 <UART_SetConfig+0x4bc>)
 80073e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073e4:	08007409 	.word	0x08007409
 80073e8:	08007411 	.word	0x08007411
 80073ec:	08007419 	.word	0x08007419
 80073f0:	0800742f 	.word	0x0800742f
 80073f4:	0800741f 	.word	0x0800741f
 80073f8:	0800742f 	.word	0x0800742f
 80073fc:	0800742f 	.word	0x0800742f
 8007400:	0800742f 	.word	0x0800742f
 8007404:	08007427 	.word	0x08007427
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007408:	f7fd f99a 	bl	8004740 <HAL_RCC_GetPCLK1Freq>
 800740c:	61f8      	str	r0, [r7, #28]
        break;
 800740e:	e014      	b.n	800743a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007410:	f7fd f9ac 	bl	800476c <HAL_RCC_GetPCLK2Freq>
 8007414:	61f8      	str	r0, [r7, #28]
        break;
 8007416:	e010      	b.n	800743a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007418:	4b1e      	ldr	r3, [pc, #120]	; (8007494 <UART_SetConfig+0x56c>)
 800741a:	61fb      	str	r3, [r7, #28]
        break;
 800741c:	e00d      	b.n	800743a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800741e:	f7fd f8f7 	bl	8004610 <HAL_RCC_GetSysClockFreq>
 8007422:	61f8      	str	r0, [r7, #28]
        break;
 8007424:	e009      	b.n	800743a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007426:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800742a:	61fb      	str	r3, [r7, #28]
        break;
 800742c:	e005      	b.n	800743a <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800742e:	2300      	movs	r3, #0
 8007430:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007432:	2301      	movs	r3, #1
 8007434:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8007438:	bf00      	nop
    }

    if (pclk != 0U)
 800743a:	69fb      	ldr	r3, [r7, #28]
 800743c:	2b00      	cmp	r3, #0
 800743e:	d019      	beq.n	8007474 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	685b      	ldr	r3, [r3, #4]
 8007444:	085a      	lsrs	r2, r3, #1
 8007446:	69fb      	ldr	r3, [r7, #28]
 8007448:	441a      	add	r2, r3
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	685b      	ldr	r3, [r3, #4]
 800744e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007452:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007454:	69bb      	ldr	r3, [r7, #24]
 8007456:	2b0f      	cmp	r3, #15
 8007458:	d909      	bls.n	800746e <UART_SetConfig+0x546>
 800745a:	69bb      	ldr	r3, [r7, #24]
 800745c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007460:	d205      	bcs.n	800746e <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007462:	69bb      	ldr	r3, [r7, #24]
 8007464:	b29a      	uxth	r2, r3
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	60da      	str	r2, [r3, #12]
 800746c:	e002      	b.n	8007474 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800746e:	2301      	movs	r3, #1
 8007470:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	2200      	movs	r2, #0
 8007478:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	2200      	movs	r2, #0
 800747e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8007480:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8007484:	4618      	mov	r0, r3
 8007486:	3728      	adds	r7, #40	; 0x28
 8007488:	46bd      	mov	sp, r7
 800748a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800748e:	bf00      	nop
 8007490:	40008000 	.word	0x40008000
 8007494:	00f42400 	.word	0x00f42400

08007498 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007498:	b480      	push	{r7}
 800749a:	b083      	sub	sp, #12
 800749c:	af00      	add	r7, sp, #0
 800749e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074a4:	f003 0308 	and.w	r3, r3, #8
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d00a      	beq.n	80074c2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	685b      	ldr	r3, [r3, #4]
 80074b2:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	430a      	orrs	r2, r1
 80074c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074c6:	f003 0301 	and.w	r3, r3, #1
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d00a      	beq.n	80074e4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	685b      	ldr	r3, [r3, #4]
 80074d4:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	430a      	orrs	r2, r1
 80074e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074e8:	f003 0302 	and.w	r3, r3, #2
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d00a      	beq.n	8007506 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	685b      	ldr	r3, [r3, #4]
 80074f6:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	430a      	orrs	r2, r1
 8007504:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800750a:	f003 0304 	and.w	r3, r3, #4
 800750e:	2b00      	cmp	r3, #0
 8007510:	d00a      	beq.n	8007528 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	685b      	ldr	r3, [r3, #4]
 8007518:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	430a      	orrs	r2, r1
 8007526:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800752c:	f003 0310 	and.w	r3, r3, #16
 8007530:	2b00      	cmp	r3, #0
 8007532:	d00a      	beq.n	800754a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	689b      	ldr	r3, [r3, #8]
 800753a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	430a      	orrs	r2, r1
 8007548:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800754e:	f003 0320 	and.w	r3, r3, #32
 8007552:	2b00      	cmp	r3, #0
 8007554:	d00a      	beq.n	800756c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	689b      	ldr	r3, [r3, #8]
 800755c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	430a      	orrs	r2, r1
 800756a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007570:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007574:	2b00      	cmp	r3, #0
 8007576:	d01a      	beq.n	80075ae <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	685b      	ldr	r3, [r3, #4]
 800757e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	430a      	orrs	r2, r1
 800758c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007592:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007596:	d10a      	bne.n	80075ae <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	685b      	ldr	r3, [r3, #4]
 800759e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	430a      	orrs	r2, r1
 80075ac:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d00a      	beq.n	80075d0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	685b      	ldr	r3, [r3, #4]
 80075c0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	430a      	orrs	r2, r1
 80075ce:	605a      	str	r2, [r3, #4]
  }
}
 80075d0:	bf00      	nop
 80075d2:	370c      	adds	r7, #12
 80075d4:	46bd      	mov	sp, r7
 80075d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075da:	4770      	bx	lr

080075dc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80075dc:	b580      	push	{r7, lr}
 80075de:	b098      	sub	sp, #96	; 0x60
 80075e0:	af02      	add	r7, sp, #8
 80075e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	2200      	movs	r2, #0
 80075e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80075ec:	f7fa fb34 	bl	8001c58 <HAL_GetTick>
 80075f0:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	f003 0308 	and.w	r3, r3, #8
 80075fc:	2b08      	cmp	r3, #8
 80075fe:	d12e      	bne.n	800765e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007600:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007604:	9300      	str	r3, [sp, #0]
 8007606:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007608:	2200      	movs	r2, #0
 800760a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800760e:	6878      	ldr	r0, [r7, #4]
 8007610:	f000 f88c 	bl	800772c <UART_WaitOnFlagUntilTimeout>
 8007614:	4603      	mov	r3, r0
 8007616:	2b00      	cmp	r3, #0
 8007618:	d021      	beq.n	800765e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007620:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007622:	e853 3f00 	ldrex	r3, [r3]
 8007626:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007628:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800762a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800762e:	653b      	str	r3, [r7, #80]	; 0x50
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	461a      	mov	r2, r3
 8007636:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007638:	647b      	str	r3, [r7, #68]	; 0x44
 800763a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800763c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800763e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007640:	e841 2300 	strex	r3, r2, [r1]
 8007644:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007646:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007648:	2b00      	cmp	r3, #0
 800764a:	d1e6      	bne.n	800761a <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	2220      	movs	r2, #32
 8007650:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	2200      	movs	r2, #0
 8007656:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800765a:	2303      	movs	r3, #3
 800765c:	e062      	b.n	8007724 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	f003 0304 	and.w	r3, r3, #4
 8007668:	2b04      	cmp	r3, #4
 800766a:	d149      	bne.n	8007700 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800766c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007670:	9300      	str	r3, [sp, #0]
 8007672:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007674:	2200      	movs	r2, #0
 8007676:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800767a:	6878      	ldr	r0, [r7, #4]
 800767c:	f000 f856 	bl	800772c <UART_WaitOnFlagUntilTimeout>
 8007680:	4603      	mov	r3, r0
 8007682:	2b00      	cmp	r3, #0
 8007684:	d03c      	beq.n	8007700 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800768c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800768e:	e853 3f00 	ldrex	r3, [r3]
 8007692:	623b      	str	r3, [r7, #32]
   return(result);
 8007694:	6a3b      	ldr	r3, [r7, #32]
 8007696:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800769a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	461a      	mov	r2, r3
 80076a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80076a4:	633b      	str	r3, [r7, #48]	; 0x30
 80076a6:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076a8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80076aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80076ac:	e841 2300 	strex	r3, r2, [r1]
 80076b0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80076b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d1e6      	bne.n	8007686 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	3308      	adds	r3, #8
 80076be:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076c0:	693b      	ldr	r3, [r7, #16]
 80076c2:	e853 3f00 	ldrex	r3, [r3]
 80076c6:	60fb      	str	r3, [r7, #12]
   return(result);
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	f023 0301 	bic.w	r3, r3, #1
 80076ce:	64bb      	str	r3, [r7, #72]	; 0x48
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	3308      	adds	r3, #8
 80076d6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80076d8:	61fa      	str	r2, [r7, #28]
 80076da:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076dc:	69b9      	ldr	r1, [r7, #24]
 80076de:	69fa      	ldr	r2, [r7, #28]
 80076e0:	e841 2300 	strex	r3, r2, [r1]
 80076e4:	617b      	str	r3, [r7, #20]
   return(result);
 80076e6:	697b      	ldr	r3, [r7, #20]
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d1e5      	bne.n	80076b8 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	2220      	movs	r2, #32
 80076f0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	2200      	movs	r2, #0
 80076f8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80076fc:	2303      	movs	r3, #3
 80076fe:	e011      	b.n	8007724 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	2220      	movs	r2, #32
 8007704:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	2220      	movs	r2, #32
 800770a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	2200      	movs	r2, #0
 8007712:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	2200      	movs	r2, #0
 8007718:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	2200      	movs	r2, #0
 800771e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8007722:	2300      	movs	r3, #0
}
 8007724:	4618      	mov	r0, r3
 8007726:	3758      	adds	r7, #88	; 0x58
 8007728:	46bd      	mov	sp, r7
 800772a:	bd80      	pop	{r7, pc}

0800772c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800772c:	b580      	push	{r7, lr}
 800772e:	b084      	sub	sp, #16
 8007730:	af00      	add	r7, sp, #0
 8007732:	60f8      	str	r0, [r7, #12]
 8007734:	60b9      	str	r1, [r7, #8]
 8007736:	603b      	str	r3, [r7, #0]
 8007738:	4613      	mov	r3, r2
 800773a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800773c:	e049      	b.n	80077d2 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800773e:	69bb      	ldr	r3, [r7, #24]
 8007740:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007744:	d045      	beq.n	80077d2 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007746:	f7fa fa87 	bl	8001c58 <HAL_GetTick>
 800774a:	4602      	mov	r2, r0
 800774c:	683b      	ldr	r3, [r7, #0]
 800774e:	1ad3      	subs	r3, r2, r3
 8007750:	69ba      	ldr	r2, [r7, #24]
 8007752:	429a      	cmp	r2, r3
 8007754:	d302      	bcc.n	800775c <UART_WaitOnFlagUntilTimeout+0x30>
 8007756:	69bb      	ldr	r3, [r7, #24]
 8007758:	2b00      	cmp	r3, #0
 800775a:	d101      	bne.n	8007760 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800775c:	2303      	movs	r3, #3
 800775e:	e048      	b.n	80077f2 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	f003 0304 	and.w	r3, r3, #4
 800776a:	2b00      	cmp	r3, #0
 800776c:	d031      	beq.n	80077d2 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	69db      	ldr	r3, [r3, #28]
 8007774:	f003 0308 	and.w	r3, r3, #8
 8007778:	2b08      	cmp	r3, #8
 800777a:	d110      	bne.n	800779e <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	2208      	movs	r2, #8
 8007782:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007784:	68f8      	ldr	r0, [r7, #12]
 8007786:	f000 f925 	bl	80079d4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	2208      	movs	r2, #8
 800778e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	2200      	movs	r2, #0
 8007796:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 800779a:	2301      	movs	r3, #1
 800779c:	e029      	b.n	80077f2 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	69db      	ldr	r3, [r3, #28]
 80077a4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80077a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80077ac:	d111      	bne.n	80077d2 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80077b6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80077b8:	68f8      	ldr	r0, [r7, #12]
 80077ba:	f000 f90b 	bl	80079d4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	2220      	movs	r2, #32
 80077c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	2200      	movs	r2, #0
 80077ca:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80077ce:	2303      	movs	r3, #3
 80077d0:	e00f      	b.n	80077f2 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	69da      	ldr	r2, [r3, #28]
 80077d8:	68bb      	ldr	r3, [r7, #8]
 80077da:	4013      	ands	r3, r2
 80077dc:	68ba      	ldr	r2, [r7, #8]
 80077de:	429a      	cmp	r2, r3
 80077e0:	bf0c      	ite	eq
 80077e2:	2301      	moveq	r3, #1
 80077e4:	2300      	movne	r3, #0
 80077e6:	b2db      	uxtb	r3, r3
 80077e8:	461a      	mov	r2, r3
 80077ea:	79fb      	ldrb	r3, [r7, #7]
 80077ec:	429a      	cmp	r2, r3
 80077ee:	d0a6      	beq.n	800773e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80077f0:	2300      	movs	r3, #0
}
 80077f2:	4618      	mov	r0, r3
 80077f4:	3710      	adds	r7, #16
 80077f6:	46bd      	mov	sp, r7
 80077f8:	bd80      	pop	{r7, pc}
	...

080077fc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80077fc:	b480      	push	{r7}
 80077fe:	b097      	sub	sp, #92	; 0x5c
 8007800:	af00      	add	r7, sp, #0
 8007802:	60f8      	str	r0, [r7, #12]
 8007804:	60b9      	str	r1, [r7, #8]
 8007806:	4613      	mov	r3, r2
 8007808:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	68ba      	ldr	r2, [r7, #8]
 800780e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	88fa      	ldrh	r2, [r7, #6]
 8007814:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	88fa      	ldrh	r2, [r7, #6]
 800781c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	2200      	movs	r2, #0
 8007824:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	689b      	ldr	r3, [r3, #8]
 800782a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800782e:	d10e      	bne.n	800784e <UART_Start_Receive_IT+0x52>
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	691b      	ldr	r3, [r3, #16]
 8007834:	2b00      	cmp	r3, #0
 8007836:	d105      	bne.n	8007844 <UART_Start_Receive_IT+0x48>
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800783e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007842:	e02d      	b.n	80078a0 <UART_Start_Receive_IT+0xa4>
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	22ff      	movs	r2, #255	; 0xff
 8007848:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800784c:	e028      	b.n	80078a0 <UART_Start_Receive_IT+0xa4>
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	689b      	ldr	r3, [r3, #8]
 8007852:	2b00      	cmp	r3, #0
 8007854:	d10d      	bne.n	8007872 <UART_Start_Receive_IT+0x76>
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	691b      	ldr	r3, [r3, #16]
 800785a:	2b00      	cmp	r3, #0
 800785c:	d104      	bne.n	8007868 <UART_Start_Receive_IT+0x6c>
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	22ff      	movs	r2, #255	; 0xff
 8007862:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007866:	e01b      	b.n	80078a0 <UART_Start_Receive_IT+0xa4>
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	227f      	movs	r2, #127	; 0x7f
 800786c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007870:	e016      	b.n	80078a0 <UART_Start_Receive_IT+0xa4>
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	689b      	ldr	r3, [r3, #8]
 8007876:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800787a:	d10d      	bne.n	8007898 <UART_Start_Receive_IT+0x9c>
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	691b      	ldr	r3, [r3, #16]
 8007880:	2b00      	cmp	r3, #0
 8007882:	d104      	bne.n	800788e <UART_Start_Receive_IT+0x92>
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	227f      	movs	r2, #127	; 0x7f
 8007888:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800788c:	e008      	b.n	80078a0 <UART_Start_Receive_IT+0xa4>
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	223f      	movs	r2, #63	; 0x3f
 8007892:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007896:	e003      	b.n	80078a0 <UART_Start_Receive_IT+0xa4>
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	2200      	movs	r2, #0
 800789c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	2200      	movs	r2, #0
 80078a4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	2222      	movs	r2, #34	; 0x22
 80078ac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	3308      	adds	r3, #8
 80078b6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80078ba:	e853 3f00 	ldrex	r3, [r3]
 80078be:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80078c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078c2:	f043 0301 	orr.w	r3, r3, #1
 80078c6:	657b      	str	r3, [r7, #84]	; 0x54
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	3308      	adds	r3, #8
 80078ce:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80078d0:	64ba      	str	r2, [r7, #72]	; 0x48
 80078d2:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078d4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80078d6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80078d8:	e841 2300 	strex	r3, r2, [r1]
 80078dc:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80078de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d1e5      	bne.n	80078b0 <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	689b      	ldr	r3, [r3, #8]
 80078e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80078ec:	d107      	bne.n	80078fe <UART_Start_Receive_IT+0x102>
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	691b      	ldr	r3, [r3, #16]
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d103      	bne.n	80078fe <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	4a21      	ldr	r2, [pc, #132]	; (8007980 <UART_Start_Receive_IT+0x184>)
 80078fa:	669a      	str	r2, [r3, #104]	; 0x68
 80078fc:	e002      	b.n	8007904 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	4a20      	ldr	r2, [pc, #128]	; (8007984 <UART_Start_Receive_IT+0x188>)
 8007902:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	691b      	ldr	r3, [r3, #16]
 8007908:	2b00      	cmp	r3, #0
 800790a:	d019      	beq.n	8007940 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007912:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007914:	e853 3f00 	ldrex	r3, [r3]
 8007918:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800791a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800791c:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8007920:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	461a      	mov	r2, r3
 8007928:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800792a:	637b      	str	r3, [r7, #52]	; 0x34
 800792c:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800792e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007930:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007932:	e841 2300 	strex	r3, r2, [r1]
 8007936:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007938:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800793a:	2b00      	cmp	r3, #0
 800793c:	d1e6      	bne.n	800790c <UART_Start_Receive_IT+0x110>
 800793e:	e018      	b.n	8007972 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007946:	697b      	ldr	r3, [r7, #20]
 8007948:	e853 3f00 	ldrex	r3, [r3]
 800794c:	613b      	str	r3, [r7, #16]
   return(result);
 800794e:	693b      	ldr	r3, [r7, #16]
 8007950:	f043 0320 	orr.w	r3, r3, #32
 8007954:	653b      	str	r3, [r7, #80]	; 0x50
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	461a      	mov	r2, r3
 800795c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800795e:	623b      	str	r3, [r7, #32]
 8007960:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007962:	69f9      	ldr	r1, [r7, #28]
 8007964:	6a3a      	ldr	r2, [r7, #32]
 8007966:	e841 2300 	strex	r3, r2, [r1]
 800796a:	61bb      	str	r3, [r7, #24]
   return(result);
 800796c:	69bb      	ldr	r3, [r7, #24]
 800796e:	2b00      	cmp	r3, #0
 8007970:	d1e6      	bne.n	8007940 <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8007972:	2300      	movs	r3, #0
}
 8007974:	4618      	mov	r0, r3
 8007976:	375c      	adds	r7, #92	; 0x5c
 8007978:	46bd      	mov	sp, r7
 800797a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800797e:	4770      	bx	lr
 8007980:	08007e0d 	.word	0x08007e0d
 8007984:	08007c51 	.word	0x08007c51

08007988 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007988:	b480      	push	{r7}
 800798a:	b089      	sub	sp, #36	; 0x24
 800798c:	af00      	add	r7, sp, #0
 800798e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	e853 3f00 	ldrex	r3, [r3]
 800799c:	60bb      	str	r3, [r7, #8]
   return(result);
 800799e:	68bb      	ldr	r3, [r7, #8]
 80079a0:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80079a4:	61fb      	str	r3, [r7, #28]
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	461a      	mov	r2, r3
 80079ac:	69fb      	ldr	r3, [r7, #28]
 80079ae:	61bb      	str	r3, [r7, #24]
 80079b0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079b2:	6979      	ldr	r1, [r7, #20]
 80079b4:	69ba      	ldr	r2, [r7, #24]
 80079b6:	e841 2300 	strex	r3, r2, [r1]
 80079ba:	613b      	str	r3, [r7, #16]
   return(result);
 80079bc:	693b      	ldr	r3, [r7, #16]
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d1e6      	bne.n	8007990 <UART_EndTxTransfer+0x8>
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	2220      	movs	r2, #32
 80079c6:	67da      	str	r2, [r3, #124]	; 0x7c
}
 80079c8:	bf00      	nop
 80079ca:	3724      	adds	r7, #36	; 0x24
 80079cc:	46bd      	mov	sp, r7
 80079ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d2:	4770      	bx	lr

080079d4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80079d4:	b480      	push	{r7}
 80079d6:	b095      	sub	sp, #84	; 0x54
 80079d8:	af00      	add	r7, sp, #0
 80079da:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80079e4:	e853 3f00 	ldrex	r3, [r3]
 80079e8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80079ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079ec:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80079f0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	461a      	mov	r2, r3
 80079f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80079fa:	643b      	str	r3, [r7, #64]	; 0x40
 80079fc:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079fe:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007a00:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007a02:	e841 2300 	strex	r3, r2, [r1]
 8007a06:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007a08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d1e6      	bne.n	80079dc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	3308      	adds	r3, #8
 8007a14:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a16:	6a3b      	ldr	r3, [r7, #32]
 8007a18:	e853 3f00 	ldrex	r3, [r3]
 8007a1c:	61fb      	str	r3, [r7, #28]
   return(result);
 8007a1e:	69fb      	ldr	r3, [r7, #28]
 8007a20:	f023 0301 	bic.w	r3, r3, #1
 8007a24:	64bb      	str	r3, [r7, #72]	; 0x48
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	3308      	adds	r3, #8
 8007a2c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007a2e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007a30:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a32:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007a34:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007a36:	e841 2300 	strex	r3, r2, [r1]
 8007a3a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d1e5      	bne.n	8007a0e <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007a46:	2b01      	cmp	r3, #1
 8007a48:	d118      	bne.n	8007a7c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	e853 3f00 	ldrex	r3, [r3]
 8007a56:	60bb      	str	r3, [r7, #8]
   return(result);
 8007a58:	68bb      	ldr	r3, [r7, #8]
 8007a5a:	f023 0310 	bic.w	r3, r3, #16
 8007a5e:	647b      	str	r3, [r7, #68]	; 0x44
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	461a      	mov	r2, r3
 8007a66:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007a68:	61bb      	str	r3, [r7, #24]
 8007a6a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a6c:	6979      	ldr	r1, [r7, #20]
 8007a6e:	69ba      	ldr	r2, [r7, #24]
 8007a70:	e841 2300 	strex	r3, r2, [r1]
 8007a74:	613b      	str	r3, [r7, #16]
   return(result);
 8007a76:	693b      	ldr	r3, [r7, #16]
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d1e6      	bne.n	8007a4a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	2220      	movs	r2, #32
 8007a80:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	2200      	movs	r2, #0
 8007a88:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	2200      	movs	r2, #0
 8007a8e:	669a      	str	r2, [r3, #104]	; 0x68
}
 8007a90:	bf00      	nop
 8007a92:	3754      	adds	r7, #84	; 0x54
 8007a94:	46bd      	mov	sp, r7
 8007a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a9a:	4770      	bx	lr

08007a9c <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007a9c:	b580      	push	{r7, lr}
 8007a9e:	b090      	sub	sp, #64	; 0x40
 8007aa0:	af00      	add	r7, sp, #0
 8007aa2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007aa8:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	f003 0320 	and.w	r3, r3, #32
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d137      	bne.n	8007b28 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 8007ab8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007aba:	2200      	movs	r2, #0
 8007abc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007ac0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	3308      	adds	r3, #8
 8007ac6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007aca:	e853 3f00 	ldrex	r3, [r3]
 8007ace:	623b      	str	r3, [r7, #32]
   return(result);
 8007ad0:	6a3b      	ldr	r3, [r7, #32]
 8007ad2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007ad6:	63bb      	str	r3, [r7, #56]	; 0x38
 8007ad8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	3308      	adds	r3, #8
 8007ade:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007ae0:	633a      	str	r2, [r7, #48]	; 0x30
 8007ae2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ae4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007ae6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007ae8:	e841 2300 	strex	r3, r2, [r1]
 8007aec:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007aee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d1e5      	bne.n	8007ac0 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007af4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007afa:	693b      	ldr	r3, [r7, #16]
 8007afc:	e853 3f00 	ldrex	r3, [r3]
 8007b00:	60fb      	str	r3, [r7, #12]
   return(result);
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007b08:	637b      	str	r3, [r7, #52]	; 0x34
 8007b0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	461a      	mov	r2, r3
 8007b10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b12:	61fb      	str	r3, [r7, #28]
 8007b14:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b16:	69b9      	ldr	r1, [r7, #24]
 8007b18:	69fa      	ldr	r2, [r7, #28]
 8007b1a:	e841 2300 	strex	r3, r2, [r1]
 8007b1e:	617b      	str	r3, [r7, #20]
   return(result);
 8007b20:	697b      	ldr	r3, [r7, #20]
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d1e6      	bne.n	8007af4 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007b26:	e002      	b.n	8007b2e <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8007b28:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8007b2a:	f7f9 fa41 	bl	8000fb0 <HAL_UART_TxCpltCallback>
}
 8007b2e:	bf00      	nop
 8007b30:	3740      	adds	r7, #64	; 0x40
 8007b32:	46bd      	mov	sp, r7
 8007b34:	bd80      	pop	{r7, pc}

08007b36 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007b36:	b580      	push	{r7, lr}
 8007b38:	b084      	sub	sp, #16
 8007b3a:	af00      	add	r7, sp, #0
 8007b3c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b42:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8007b44:	68f8      	ldr	r0, [r7, #12]
 8007b46:	f7ff f9cf 	bl	8006ee8 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007b4a:	bf00      	nop
 8007b4c:	3710      	adds	r7, #16
 8007b4e:	46bd      	mov	sp, r7
 8007b50:	bd80      	pop	{r7, pc}

08007b52 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8007b52:	b580      	push	{r7, lr}
 8007b54:	b086      	sub	sp, #24
 8007b56:	af00      	add	r7, sp, #0
 8007b58:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b5e:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8007b60:	697b      	ldr	r3, [r7, #20]
 8007b62:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007b64:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8007b66:	697b      	ldr	r3, [r7, #20]
 8007b68:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007b6c:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8007b6e:	697b      	ldr	r3, [r7, #20]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	689b      	ldr	r3, [r3, #8]
 8007b74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b78:	2b80      	cmp	r3, #128	; 0x80
 8007b7a:	d109      	bne.n	8007b90 <UART_DMAError+0x3e>
 8007b7c:	693b      	ldr	r3, [r7, #16]
 8007b7e:	2b21      	cmp	r3, #33	; 0x21
 8007b80:	d106      	bne.n	8007b90 <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8007b82:	697b      	ldr	r3, [r7, #20]
 8007b84:	2200      	movs	r2, #0
 8007b86:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 8007b8a:	6978      	ldr	r0, [r7, #20]
 8007b8c:	f7ff fefc 	bl	8007988 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8007b90:	697b      	ldr	r3, [r7, #20]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	689b      	ldr	r3, [r3, #8]
 8007b96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b9a:	2b40      	cmp	r3, #64	; 0x40
 8007b9c:	d109      	bne.n	8007bb2 <UART_DMAError+0x60>
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	2b22      	cmp	r3, #34	; 0x22
 8007ba2:	d106      	bne.n	8007bb2 <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8007ba4:	697b      	ldr	r3, [r7, #20]
 8007ba6:	2200      	movs	r2, #0
 8007ba8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 8007bac:	6978      	ldr	r0, [r7, #20]
 8007bae:	f7ff ff11 	bl	80079d4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007bb2:	697b      	ldr	r3, [r7, #20]
 8007bb4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007bb8:	f043 0210 	orr.w	r2, r3, #16
 8007bbc:	697b      	ldr	r3, [r7, #20]
 8007bbe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007bc2:	6978      	ldr	r0, [r7, #20]
 8007bc4:	f7ff f99a 	bl	8006efc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007bc8:	bf00      	nop
 8007bca:	3718      	adds	r7, #24
 8007bcc:	46bd      	mov	sp, r7
 8007bce:	bd80      	pop	{r7, pc}

08007bd0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007bd0:	b580      	push	{r7, lr}
 8007bd2:	b084      	sub	sp, #16
 8007bd4:	af00      	add	r7, sp, #0
 8007bd6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bdc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	2200      	movs	r2, #0
 8007be2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	2200      	movs	r2, #0
 8007bea:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007bee:	68f8      	ldr	r0, [r7, #12]
 8007bf0:	f7ff f984 	bl	8006efc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007bf4:	bf00      	nop
 8007bf6:	3710      	adds	r7, #16
 8007bf8:	46bd      	mov	sp, r7
 8007bfa:	bd80      	pop	{r7, pc}

08007bfc <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007bfc:	b580      	push	{r7, lr}
 8007bfe:	b088      	sub	sp, #32
 8007c00:	af00      	add	r7, sp, #0
 8007c02:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	e853 3f00 	ldrex	r3, [r3]
 8007c10:	60bb      	str	r3, [r7, #8]
   return(result);
 8007c12:	68bb      	ldr	r3, [r7, #8]
 8007c14:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007c18:	61fb      	str	r3, [r7, #28]
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	461a      	mov	r2, r3
 8007c20:	69fb      	ldr	r3, [r7, #28]
 8007c22:	61bb      	str	r3, [r7, #24]
 8007c24:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c26:	6979      	ldr	r1, [r7, #20]
 8007c28:	69ba      	ldr	r2, [r7, #24]
 8007c2a:	e841 2300 	strex	r3, r2, [r1]
 8007c2e:	613b      	str	r3, [r7, #16]
   return(result);
 8007c30:	693b      	ldr	r3, [r7, #16]
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d1e6      	bne.n	8007c04 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	2220      	movs	r2, #32
 8007c3a:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	2200      	movs	r2, #0
 8007c40:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007c42:	6878      	ldr	r0, [r7, #4]
 8007c44:	f7f9 f9b4 	bl	8000fb0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007c48:	bf00      	nop
 8007c4a:	3720      	adds	r7, #32
 8007c4c:	46bd      	mov	sp, r7
 8007c4e:	bd80      	pop	{r7, pc}

08007c50 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007c50:	b580      	push	{r7, lr}
 8007c52:	b09c      	sub	sp, #112	; 0x70
 8007c54:	af00      	add	r7, sp, #0
 8007c56:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007c5e:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007c68:	2b22      	cmp	r3, #34	; 0x22
 8007c6a:	f040 80be 	bne.w	8007dea <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8007c74:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007c78:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8007c7c:	b2d9      	uxtb	r1, r3
 8007c7e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8007c82:	b2da      	uxtb	r2, r3
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c88:	400a      	ands	r2, r1
 8007c8a:	b2d2      	uxtb	r2, r2
 8007c8c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c92:	1c5a      	adds	r2, r3, #1
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007c9e:	b29b      	uxth	r3, r3
 8007ca0:	3b01      	subs	r3, #1
 8007ca2:	b29a      	uxth	r2, r3
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007cb0:	b29b      	uxth	r3, r3
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	f040 80a3 	bne.w	8007dfe <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cbe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007cc0:	e853 3f00 	ldrex	r3, [r3]
 8007cc4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007cc6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007cc8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007ccc:	66bb      	str	r3, [r7, #104]	; 0x68
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	461a      	mov	r2, r3
 8007cd4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007cd6:	65bb      	str	r3, [r7, #88]	; 0x58
 8007cd8:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cda:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007cdc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007cde:	e841 2300 	strex	r3, r2, [r1]
 8007ce2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007ce4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d1e6      	bne.n	8007cb8 <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	3308      	adds	r3, #8
 8007cf0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cf4:	e853 3f00 	ldrex	r3, [r3]
 8007cf8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007cfa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007cfc:	f023 0301 	bic.w	r3, r3, #1
 8007d00:	667b      	str	r3, [r7, #100]	; 0x64
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	3308      	adds	r3, #8
 8007d08:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007d0a:	647a      	str	r2, [r7, #68]	; 0x44
 8007d0c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d0e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007d10:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007d12:	e841 2300 	strex	r3, r2, [r1]
 8007d16:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007d18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d1e5      	bne.n	8007cea <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	2220      	movs	r2, #32
 8007d22:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	2200      	movs	r2, #0
 8007d2a:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	2200      	movs	r2, #0
 8007d30:	665a      	str	r2, [r3, #100]	; 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	4a34      	ldr	r2, [pc, #208]	; (8007e08 <UART_RxISR_8BIT+0x1b8>)
 8007d38:	4293      	cmp	r3, r2
 8007d3a:	d01f      	beq.n	8007d7c <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	685b      	ldr	r3, [r3, #4]
 8007d42:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d018      	beq.n	8007d7c <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d52:	e853 3f00 	ldrex	r3, [r3]
 8007d56:	623b      	str	r3, [r7, #32]
   return(result);
 8007d58:	6a3b      	ldr	r3, [r7, #32]
 8007d5a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007d5e:	663b      	str	r3, [r7, #96]	; 0x60
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	461a      	mov	r2, r3
 8007d66:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007d68:	633b      	str	r3, [r7, #48]	; 0x30
 8007d6a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d6c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007d6e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007d70:	e841 2300 	strex	r3, r2, [r1]
 8007d74:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007d76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d1e6      	bne.n	8007d4a <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007d80:	2b01      	cmp	r3, #1
 8007d82:	d12e      	bne.n	8007de2 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	2200      	movs	r2, #0
 8007d88:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d90:	693b      	ldr	r3, [r7, #16]
 8007d92:	e853 3f00 	ldrex	r3, [r3]
 8007d96:	60fb      	str	r3, [r7, #12]
   return(result);
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	f023 0310 	bic.w	r3, r3, #16
 8007d9e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	461a      	mov	r2, r3
 8007da6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007da8:	61fb      	str	r3, [r7, #28]
 8007daa:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dac:	69b9      	ldr	r1, [r7, #24]
 8007dae:	69fa      	ldr	r2, [r7, #28]
 8007db0:	e841 2300 	strex	r3, r2, [r1]
 8007db4:	617b      	str	r3, [r7, #20]
   return(result);
 8007db6:	697b      	ldr	r3, [r7, #20]
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d1e6      	bne.n	8007d8a <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	69db      	ldr	r3, [r3, #28]
 8007dc2:	f003 0310 	and.w	r3, r3, #16
 8007dc6:	2b10      	cmp	r3, #16
 8007dc8:	d103      	bne.n	8007dd2 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	2210      	movs	r2, #16
 8007dd0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007dd8:	4619      	mov	r1, r3
 8007dda:	6878      	ldr	r0, [r7, #4]
 8007ddc:	f7ff f898 	bl	8006f10 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007de0:	e00d      	b.n	8007dfe <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8007de2:	6878      	ldr	r0, [r7, #4]
 8007de4:	f7f9 f8cc 	bl	8000f80 <HAL_UART_RxCpltCallback>
}
 8007de8:	e009      	b.n	8007dfe <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	8b1b      	ldrh	r3, [r3, #24]
 8007df0:	b29a      	uxth	r2, r3
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	f042 0208 	orr.w	r2, r2, #8
 8007dfa:	b292      	uxth	r2, r2
 8007dfc:	831a      	strh	r2, [r3, #24]
}
 8007dfe:	bf00      	nop
 8007e00:	3770      	adds	r7, #112	; 0x70
 8007e02:	46bd      	mov	sp, r7
 8007e04:	bd80      	pop	{r7, pc}
 8007e06:	bf00      	nop
 8007e08:	40008000 	.word	0x40008000

08007e0c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007e0c:	b580      	push	{r7, lr}
 8007e0e:	b09c      	sub	sp, #112	; 0x70
 8007e10:	af00      	add	r7, sp, #0
 8007e12:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007e1a:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007e24:	2b22      	cmp	r3, #34	; 0x22
 8007e26:	f040 80be 	bne.w	8007fa6 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8007e30:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e38:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8007e3a:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8007e3e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8007e42:	4013      	ands	r3, r2
 8007e44:	b29a      	uxth	r2, r3
 8007e46:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007e48:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e4e:	1c9a      	adds	r2, r3, #2
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007e5a:	b29b      	uxth	r3, r3
 8007e5c:	3b01      	subs	r3, #1
 8007e5e:	b29a      	uxth	r2, r3
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007e6c:	b29b      	uxth	r3, r3
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	f040 80a3 	bne.w	8007fba <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e7a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007e7c:	e853 3f00 	ldrex	r3, [r3]
 8007e80:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8007e82:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007e84:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007e88:	667b      	str	r3, [r7, #100]	; 0x64
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	461a      	mov	r2, r3
 8007e90:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007e92:	657b      	str	r3, [r7, #84]	; 0x54
 8007e94:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e96:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007e98:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007e9a:	e841 2300 	strex	r3, r2, [r1]
 8007e9e:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007ea0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d1e6      	bne.n	8007e74 <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	3308      	adds	r3, #8
 8007eac:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007eae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007eb0:	e853 3f00 	ldrex	r3, [r3]
 8007eb4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007eb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007eb8:	f023 0301 	bic.w	r3, r3, #1
 8007ebc:	663b      	str	r3, [r7, #96]	; 0x60
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	3308      	adds	r3, #8
 8007ec4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007ec6:	643a      	str	r2, [r7, #64]	; 0x40
 8007ec8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007eca:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007ecc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007ece:	e841 2300 	strex	r3, r2, [r1]
 8007ed2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007ed4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d1e5      	bne.n	8007ea6 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	2220      	movs	r2, #32
 8007ede:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	2200      	movs	r2, #0
 8007ee6:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	2200      	movs	r2, #0
 8007eec:	665a      	str	r2, [r3, #100]	; 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	4a34      	ldr	r2, [pc, #208]	; (8007fc4 <UART_RxISR_16BIT+0x1b8>)
 8007ef4:	4293      	cmp	r3, r2
 8007ef6:	d01f      	beq.n	8007f38 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	685b      	ldr	r3, [r3, #4]
 8007efe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d018      	beq.n	8007f38 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f0c:	6a3b      	ldr	r3, [r7, #32]
 8007f0e:	e853 3f00 	ldrex	r3, [r3]
 8007f12:	61fb      	str	r3, [r7, #28]
   return(result);
 8007f14:	69fb      	ldr	r3, [r7, #28]
 8007f16:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007f1a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	461a      	mov	r2, r3
 8007f22:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007f24:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007f26:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f28:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007f2a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007f2c:	e841 2300 	strex	r3, r2, [r1]
 8007f30:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d1e6      	bne.n	8007f06 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007f3c:	2b01      	cmp	r3, #1
 8007f3e:	d12e      	bne.n	8007f9e <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	2200      	movs	r2, #0
 8007f44:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	e853 3f00 	ldrex	r3, [r3]
 8007f52:	60bb      	str	r3, [r7, #8]
   return(result);
 8007f54:	68bb      	ldr	r3, [r7, #8]
 8007f56:	f023 0310 	bic.w	r3, r3, #16
 8007f5a:	65bb      	str	r3, [r7, #88]	; 0x58
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	461a      	mov	r2, r3
 8007f62:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007f64:	61bb      	str	r3, [r7, #24]
 8007f66:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f68:	6979      	ldr	r1, [r7, #20]
 8007f6a:	69ba      	ldr	r2, [r7, #24]
 8007f6c:	e841 2300 	strex	r3, r2, [r1]
 8007f70:	613b      	str	r3, [r7, #16]
   return(result);
 8007f72:	693b      	ldr	r3, [r7, #16]
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d1e6      	bne.n	8007f46 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	69db      	ldr	r3, [r3, #28]
 8007f7e:	f003 0310 	and.w	r3, r3, #16
 8007f82:	2b10      	cmp	r3, #16
 8007f84:	d103      	bne.n	8007f8e <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	2210      	movs	r2, #16
 8007f8c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007f94:	4619      	mov	r1, r3
 8007f96:	6878      	ldr	r0, [r7, #4]
 8007f98:	f7fe ffba 	bl	8006f10 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007f9c:	e00d      	b.n	8007fba <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8007f9e:	6878      	ldr	r0, [r7, #4]
 8007fa0:	f7f8 ffee 	bl	8000f80 <HAL_UART_RxCpltCallback>
}
 8007fa4:	e009      	b.n	8007fba <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	8b1b      	ldrh	r3, [r3, #24]
 8007fac:	b29a      	uxth	r2, r3
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	f042 0208 	orr.w	r2, r2, #8
 8007fb6:	b292      	uxth	r2, r2
 8007fb8:	831a      	strh	r2, [r3, #24]
}
 8007fba:	bf00      	nop
 8007fbc:	3770      	adds	r7, #112	; 0x70
 8007fbe:	46bd      	mov	sp, r7
 8007fc0:	bd80      	pop	{r7, pc}
 8007fc2:	bf00      	nop
 8007fc4:	40008000 	.word	0x40008000

08007fc8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007fc8:	b480      	push	{r7}
 8007fca:	b083      	sub	sp, #12
 8007fcc:	af00      	add	r7, sp, #0
 8007fce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007fd0:	bf00      	nop
 8007fd2:	370c      	adds	r7, #12
 8007fd4:	46bd      	mov	sp, r7
 8007fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fda:	4770      	bx	lr

08007fdc <__cvt>:
 8007fdc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007fe0:	ec55 4b10 	vmov	r4, r5, d0
 8007fe4:	2d00      	cmp	r5, #0
 8007fe6:	460e      	mov	r6, r1
 8007fe8:	4619      	mov	r1, r3
 8007fea:	462b      	mov	r3, r5
 8007fec:	bfbb      	ittet	lt
 8007fee:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8007ff2:	461d      	movlt	r5, r3
 8007ff4:	2300      	movge	r3, #0
 8007ff6:	232d      	movlt	r3, #45	; 0x2d
 8007ff8:	700b      	strb	r3, [r1, #0]
 8007ffa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007ffc:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8008000:	4691      	mov	r9, r2
 8008002:	f023 0820 	bic.w	r8, r3, #32
 8008006:	bfbc      	itt	lt
 8008008:	4622      	movlt	r2, r4
 800800a:	4614      	movlt	r4, r2
 800800c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008010:	d005      	beq.n	800801e <__cvt+0x42>
 8008012:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8008016:	d100      	bne.n	800801a <__cvt+0x3e>
 8008018:	3601      	adds	r6, #1
 800801a:	2102      	movs	r1, #2
 800801c:	e000      	b.n	8008020 <__cvt+0x44>
 800801e:	2103      	movs	r1, #3
 8008020:	ab03      	add	r3, sp, #12
 8008022:	9301      	str	r3, [sp, #4]
 8008024:	ab02      	add	r3, sp, #8
 8008026:	9300      	str	r3, [sp, #0]
 8008028:	ec45 4b10 	vmov	d0, r4, r5
 800802c:	4653      	mov	r3, sl
 800802e:	4632      	mov	r2, r6
 8008030:	f000 fe46 	bl	8008cc0 <_dtoa_r>
 8008034:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008038:	4607      	mov	r7, r0
 800803a:	d102      	bne.n	8008042 <__cvt+0x66>
 800803c:	f019 0f01 	tst.w	r9, #1
 8008040:	d022      	beq.n	8008088 <__cvt+0xac>
 8008042:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008046:	eb07 0906 	add.w	r9, r7, r6
 800804a:	d110      	bne.n	800806e <__cvt+0x92>
 800804c:	783b      	ldrb	r3, [r7, #0]
 800804e:	2b30      	cmp	r3, #48	; 0x30
 8008050:	d10a      	bne.n	8008068 <__cvt+0x8c>
 8008052:	2200      	movs	r2, #0
 8008054:	2300      	movs	r3, #0
 8008056:	4620      	mov	r0, r4
 8008058:	4629      	mov	r1, r5
 800805a:	f7f8 fd35 	bl	8000ac8 <__aeabi_dcmpeq>
 800805e:	b918      	cbnz	r0, 8008068 <__cvt+0x8c>
 8008060:	f1c6 0601 	rsb	r6, r6, #1
 8008064:	f8ca 6000 	str.w	r6, [sl]
 8008068:	f8da 3000 	ldr.w	r3, [sl]
 800806c:	4499      	add	r9, r3
 800806e:	2200      	movs	r2, #0
 8008070:	2300      	movs	r3, #0
 8008072:	4620      	mov	r0, r4
 8008074:	4629      	mov	r1, r5
 8008076:	f7f8 fd27 	bl	8000ac8 <__aeabi_dcmpeq>
 800807a:	b108      	cbz	r0, 8008080 <__cvt+0xa4>
 800807c:	f8cd 900c 	str.w	r9, [sp, #12]
 8008080:	2230      	movs	r2, #48	; 0x30
 8008082:	9b03      	ldr	r3, [sp, #12]
 8008084:	454b      	cmp	r3, r9
 8008086:	d307      	bcc.n	8008098 <__cvt+0xbc>
 8008088:	9b03      	ldr	r3, [sp, #12]
 800808a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800808c:	1bdb      	subs	r3, r3, r7
 800808e:	4638      	mov	r0, r7
 8008090:	6013      	str	r3, [r2, #0]
 8008092:	b004      	add	sp, #16
 8008094:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008098:	1c59      	adds	r1, r3, #1
 800809a:	9103      	str	r1, [sp, #12]
 800809c:	701a      	strb	r2, [r3, #0]
 800809e:	e7f0      	b.n	8008082 <__cvt+0xa6>

080080a0 <__exponent>:
 80080a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80080a2:	4603      	mov	r3, r0
 80080a4:	2900      	cmp	r1, #0
 80080a6:	bfb8      	it	lt
 80080a8:	4249      	neglt	r1, r1
 80080aa:	f803 2b02 	strb.w	r2, [r3], #2
 80080ae:	bfb4      	ite	lt
 80080b0:	222d      	movlt	r2, #45	; 0x2d
 80080b2:	222b      	movge	r2, #43	; 0x2b
 80080b4:	2909      	cmp	r1, #9
 80080b6:	7042      	strb	r2, [r0, #1]
 80080b8:	dd2a      	ble.n	8008110 <__exponent+0x70>
 80080ba:	f10d 0207 	add.w	r2, sp, #7
 80080be:	4617      	mov	r7, r2
 80080c0:	260a      	movs	r6, #10
 80080c2:	4694      	mov	ip, r2
 80080c4:	fb91 f5f6 	sdiv	r5, r1, r6
 80080c8:	fb06 1415 	mls	r4, r6, r5, r1
 80080cc:	3430      	adds	r4, #48	; 0x30
 80080ce:	f80c 4c01 	strb.w	r4, [ip, #-1]
 80080d2:	460c      	mov	r4, r1
 80080d4:	2c63      	cmp	r4, #99	; 0x63
 80080d6:	f102 32ff 	add.w	r2, r2, #4294967295
 80080da:	4629      	mov	r1, r5
 80080dc:	dcf1      	bgt.n	80080c2 <__exponent+0x22>
 80080de:	3130      	adds	r1, #48	; 0x30
 80080e0:	f1ac 0402 	sub.w	r4, ip, #2
 80080e4:	f802 1c01 	strb.w	r1, [r2, #-1]
 80080e8:	1c41      	adds	r1, r0, #1
 80080ea:	4622      	mov	r2, r4
 80080ec:	42ba      	cmp	r2, r7
 80080ee:	d30a      	bcc.n	8008106 <__exponent+0x66>
 80080f0:	f10d 0209 	add.w	r2, sp, #9
 80080f4:	eba2 020c 	sub.w	r2, r2, ip
 80080f8:	42bc      	cmp	r4, r7
 80080fa:	bf88      	it	hi
 80080fc:	2200      	movhi	r2, #0
 80080fe:	4413      	add	r3, r2
 8008100:	1a18      	subs	r0, r3, r0
 8008102:	b003      	add	sp, #12
 8008104:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008106:	f812 5b01 	ldrb.w	r5, [r2], #1
 800810a:	f801 5f01 	strb.w	r5, [r1, #1]!
 800810e:	e7ed      	b.n	80080ec <__exponent+0x4c>
 8008110:	2330      	movs	r3, #48	; 0x30
 8008112:	3130      	adds	r1, #48	; 0x30
 8008114:	7083      	strb	r3, [r0, #2]
 8008116:	70c1      	strb	r1, [r0, #3]
 8008118:	1d03      	adds	r3, r0, #4
 800811a:	e7f1      	b.n	8008100 <__exponent+0x60>

0800811c <_printf_float>:
 800811c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008120:	ed2d 8b02 	vpush	{d8}
 8008124:	b08d      	sub	sp, #52	; 0x34
 8008126:	460c      	mov	r4, r1
 8008128:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800812c:	4616      	mov	r6, r2
 800812e:	461f      	mov	r7, r3
 8008130:	4605      	mov	r5, r0
 8008132:	f000 fcc7 	bl	8008ac4 <_localeconv_r>
 8008136:	f8d0 a000 	ldr.w	sl, [r0]
 800813a:	4650      	mov	r0, sl
 800813c:	f7f8 f898 	bl	8000270 <strlen>
 8008140:	2300      	movs	r3, #0
 8008142:	930a      	str	r3, [sp, #40]	; 0x28
 8008144:	6823      	ldr	r3, [r4, #0]
 8008146:	9305      	str	r3, [sp, #20]
 8008148:	f8d8 3000 	ldr.w	r3, [r8]
 800814c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8008150:	3307      	adds	r3, #7
 8008152:	f023 0307 	bic.w	r3, r3, #7
 8008156:	f103 0208 	add.w	r2, r3, #8
 800815a:	f8c8 2000 	str.w	r2, [r8]
 800815e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008162:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008166:	9307      	str	r3, [sp, #28]
 8008168:	f8cd 8018 	str.w	r8, [sp, #24]
 800816c:	ee08 0a10 	vmov	s16, r0
 8008170:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8008174:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008178:	4b9e      	ldr	r3, [pc, #632]	; (80083f4 <_printf_float+0x2d8>)
 800817a:	f04f 32ff 	mov.w	r2, #4294967295
 800817e:	f7f8 fcd5 	bl	8000b2c <__aeabi_dcmpun>
 8008182:	bb88      	cbnz	r0, 80081e8 <_printf_float+0xcc>
 8008184:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008188:	4b9a      	ldr	r3, [pc, #616]	; (80083f4 <_printf_float+0x2d8>)
 800818a:	f04f 32ff 	mov.w	r2, #4294967295
 800818e:	f7f8 fcaf 	bl	8000af0 <__aeabi_dcmple>
 8008192:	bb48      	cbnz	r0, 80081e8 <_printf_float+0xcc>
 8008194:	2200      	movs	r2, #0
 8008196:	2300      	movs	r3, #0
 8008198:	4640      	mov	r0, r8
 800819a:	4649      	mov	r1, r9
 800819c:	f7f8 fc9e 	bl	8000adc <__aeabi_dcmplt>
 80081a0:	b110      	cbz	r0, 80081a8 <_printf_float+0x8c>
 80081a2:	232d      	movs	r3, #45	; 0x2d
 80081a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80081a8:	4a93      	ldr	r2, [pc, #588]	; (80083f8 <_printf_float+0x2dc>)
 80081aa:	4b94      	ldr	r3, [pc, #592]	; (80083fc <_printf_float+0x2e0>)
 80081ac:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80081b0:	bf94      	ite	ls
 80081b2:	4690      	movls	r8, r2
 80081b4:	4698      	movhi	r8, r3
 80081b6:	2303      	movs	r3, #3
 80081b8:	6123      	str	r3, [r4, #16]
 80081ba:	9b05      	ldr	r3, [sp, #20]
 80081bc:	f023 0304 	bic.w	r3, r3, #4
 80081c0:	6023      	str	r3, [r4, #0]
 80081c2:	f04f 0900 	mov.w	r9, #0
 80081c6:	9700      	str	r7, [sp, #0]
 80081c8:	4633      	mov	r3, r6
 80081ca:	aa0b      	add	r2, sp, #44	; 0x2c
 80081cc:	4621      	mov	r1, r4
 80081ce:	4628      	mov	r0, r5
 80081d0:	f000 f9da 	bl	8008588 <_printf_common>
 80081d4:	3001      	adds	r0, #1
 80081d6:	f040 8090 	bne.w	80082fa <_printf_float+0x1de>
 80081da:	f04f 30ff 	mov.w	r0, #4294967295
 80081de:	b00d      	add	sp, #52	; 0x34
 80081e0:	ecbd 8b02 	vpop	{d8}
 80081e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081e8:	4642      	mov	r2, r8
 80081ea:	464b      	mov	r3, r9
 80081ec:	4640      	mov	r0, r8
 80081ee:	4649      	mov	r1, r9
 80081f0:	f7f8 fc9c 	bl	8000b2c <__aeabi_dcmpun>
 80081f4:	b140      	cbz	r0, 8008208 <_printf_float+0xec>
 80081f6:	464b      	mov	r3, r9
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	bfbc      	itt	lt
 80081fc:	232d      	movlt	r3, #45	; 0x2d
 80081fe:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8008202:	4a7f      	ldr	r2, [pc, #508]	; (8008400 <_printf_float+0x2e4>)
 8008204:	4b7f      	ldr	r3, [pc, #508]	; (8008404 <_printf_float+0x2e8>)
 8008206:	e7d1      	b.n	80081ac <_printf_float+0x90>
 8008208:	6863      	ldr	r3, [r4, #4]
 800820a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800820e:	9206      	str	r2, [sp, #24]
 8008210:	1c5a      	adds	r2, r3, #1
 8008212:	d13f      	bne.n	8008294 <_printf_float+0x178>
 8008214:	2306      	movs	r3, #6
 8008216:	6063      	str	r3, [r4, #4]
 8008218:	9b05      	ldr	r3, [sp, #20]
 800821a:	6861      	ldr	r1, [r4, #4]
 800821c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8008220:	2300      	movs	r3, #0
 8008222:	9303      	str	r3, [sp, #12]
 8008224:	ab0a      	add	r3, sp, #40	; 0x28
 8008226:	e9cd b301 	strd	fp, r3, [sp, #4]
 800822a:	ab09      	add	r3, sp, #36	; 0x24
 800822c:	ec49 8b10 	vmov	d0, r8, r9
 8008230:	9300      	str	r3, [sp, #0]
 8008232:	6022      	str	r2, [r4, #0]
 8008234:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008238:	4628      	mov	r0, r5
 800823a:	f7ff fecf 	bl	8007fdc <__cvt>
 800823e:	9b06      	ldr	r3, [sp, #24]
 8008240:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008242:	2b47      	cmp	r3, #71	; 0x47
 8008244:	4680      	mov	r8, r0
 8008246:	d108      	bne.n	800825a <_printf_float+0x13e>
 8008248:	1cc8      	adds	r0, r1, #3
 800824a:	db02      	blt.n	8008252 <_printf_float+0x136>
 800824c:	6863      	ldr	r3, [r4, #4]
 800824e:	4299      	cmp	r1, r3
 8008250:	dd41      	ble.n	80082d6 <_printf_float+0x1ba>
 8008252:	f1ab 0302 	sub.w	r3, fp, #2
 8008256:	fa5f fb83 	uxtb.w	fp, r3
 800825a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800825e:	d820      	bhi.n	80082a2 <_printf_float+0x186>
 8008260:	3901      	subs	r1, #1
 8008262:	465a      	mov	r2, fp
 8008264:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008268:	9109      	str	r1, [sp, #36]	; 0x24
 800826a:	f7ff ff19 	bl	80080a0 <__exponent>
 800826e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008270:	1813      	adds	r3, r2, r0
 8008272:	2a01      	cmp	r2, #1
 8008274:	4681      	mov	r9, r0
 8008276:	6123      	str	r3, [r4, #16]
 8008278:	dc02      	bgt.n	8008280 <_printf_float+0x164>
 800827a:	6822      	ldr	r2, [r4, #0]
 800827c:	07d2      	lsls	r2, r2, #31
 800827e:	d501      	bpl.n	8008284 <_printf_float+0x168>
 8008280:	3301      	adds	r3, #1
 8008282:	6123      	str	r3, [r4, #16]
 8008284:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8008288:	2b00      	cmp	r3, #0
 800828a:	d09c      	beq.n	80081c6 <_printf_float+0xaa>
 800828c:	232d      	movs	r3, #45	; 0x2d
 800828e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008292:	e798      	b.n	80081c6 <_printf_float+0xaa>
 8008294:	9a06      	ldr	r2, [sp, #24]
 8008296:	2a47      	cmp	r2, #71	; 0x47
 8008298:	d1be      	bne.n	8008218 <_printf_float+0xfc>
 800829a:	2b00      	cmp	r3, #0
 800829c:	d1bc      	bne.n	8008218 <_printf_float+0xfc>
 800829e:	2301      	movs	r3, #1
 80082a0:	e7b9      	b.n	8008216 <_printf_float+0xfa>
 80082a2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80082a6:	d118      	bne.n	80082da <_printf_float+0x1be>
 80082a8:	2900      	cmp	r1, #0
 80082aa:	6863      	ldr	r3, [r4, #4]
 80082ac:	dd0b      	ble.n	80082c6 <_printf_float+0x1aa>
 80082ae:	6121      	str	r1, [r4, #16]
 80082b0:	b913      	cbnz	r3, 80082b8 <_printf_float+0x19c>
 80082b2:	6822      	ldr	r2, [r4, #0]
 80082b4:	07d0      	lsls	r0, r2, #31
 80082b6:	d502      	bpl.n	80082be <_printf_float+0x1a2>
 80082b8:	3301      	adds	r3, #1
 80082ba:	440b      	add	r3, r1
 80082bc:	6123      	str	r3, [r4, #16]
 80082be:	65a1      	str	r1, [r4, #88]	; 0x58
 80082c0:	f04f 0900 	mov.w	r9, #0
 80082c4:	e7de      	b.n	8008284 <_printf_float+0x168>
 80082c6:	b913      	cbnz	r3, 80082ce <_printf_float+0x1b2>
 80082c8:	6822      	ldr	r2, [r4, #0]
 80082ca:	07d2      	lsls	r2, r2, #31
 80082cc:	d501      	bpl.n	80082d2 <_printf_float+0x1b6>
 80082ce:	3302      	adds	r3, #2
 80082d0:	e7f4      	b.n	80082bc <_printf_float+0x1a0>
 80082d2:	2301      	movs	r3, #1
 80082d4:	e7f2      	b.n	80082bc <_printf_float+0x1a0>
 80082d6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80082da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80082dc:	4299      	cmp	r1, r3
 80082de:	db05      	blt.n	80082ec <_printf_float+0x1d0>
 80082e0:	6823      	ldr	r3, [r4, #0]
 80082e2:	6121      	str	r1, [r4, #16]
 80082e4:	07d8      	lsls	r0, r3, #31
 80082e6:	d5ea      	bpl.n	80082be <_printf_float+0x1a2>
 80082e8:	1c4b      	adds	r3, r1, #1
 80082ea:	e7e7      	b.n	80082bc <_printf_float+0x1a0>
 80082ec:	2900      	cmp	r1, #0
 80082ee:	bfd4      	ite	le
 80082f0:	f1c1 0202 	rsble	r2, r1, #2
 80082f4:	2201      	movgt	r2, #1
 80082f6:	4413      	add	r3, r2
 80082f8:	e7e0      	b.n	80082bc <_printf_float+0x1a0>
 80082fa:	6823      	ldr	r3, [r4, #0]
 80082fc:	055a      	lsls	r2, r3, #21
 80082fe:	d407      	bmi.n	8008310 <_printf_float+0x1f4>
 8008300:	6923      	ldr	r3, [r4, #16]
 8008302:	4642      	mov	r2, r8
 8008304:	4631      	mov	r1, r6
 8008306:	4628      	mov	r0, r5
 8008308:	47b8      	blx	r7
 800830a:	3001      	adds	r0, #1
 800830c:	d12c      	bne.n	8008368 <_printf_float+0x24c>
 800830e:	e764      	b.n	80081da <_printf_float+0xbe>
 8008310:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008314:	f240 80e0 	bls.w	80084d8 <_printf_float+0x3bc>
 8008318:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800831c:	2200      	movs	r2, #0
 800831e:	2300      	movs	r3, #0
 8008320:	f7f8 fbd2 	bl	8000ac8 <__aeabi_dcmpeq>
 8008324:	2800      	cmp	r0, #0
 8008326:	d034      	beq.n	8008392 <_printf_float+0x276>
 8008328:	4a37      	ldr	r2, [pc, #220]	; (8008408 <_printf_float+0x2ec>)
 800832a:	2301      	movs	r3, #1
 800832c:	4631      	mov	r1, r6
 800832e:	4628      	mov	r0, r5
 8008330:	47b8      	blx	r7
 8008332:	3001      	adds	r0, #1
 8008334:	f43f af51 	beq.w	80081da <_printf_float+0xbe>
 8008338:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800833c:	429a      	cmp	r2, r3
 800833e:	db02      	blt.n	8008346 <_printf_float+0x22a>
 8008340:	6823      	ldr	r3, [r4, #0]
 8008342:	07d8      	lsls	r0, r3, #31
 8008344:	d510      	bpl.n	8008368 <_printf_float+0x24c>
 8008346:	ee18 3a10 	vmov	r3, s16
 800834a:	4652      	mov	r2, sl
 800834c:	4631      	mov	r1, r6
 800834e:	4628      	mov	r0, r5
 8008350:	47b8      	blx	r7
 8008352:	3001      	adds	r0, #1
 8008354:	f43f af41 	beq.w	80081da <_printf_float+0xbe>
 8008358:	f04f 0800 	mov.w	r8, #0
 800835c:	f104 091a 	add.w	r9, r4, #26
 8008360:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008362:	3b01      	subs	r3, #1
 8008364:	4543      	cmp	r3, r8
 8008366:	dc09      	bgt.n	800837c <_printf_float+0x260>
 8008368:	6823      	ldr	r3, [r4, #0]
 800836a:	079b      	lsls	r3, r3, #30
 800836c:	f100 8107 	bmi.w	800857e <_printf_float+0x462>
 8008370:	68e0      	ldr	r0, [r4, #12]
 8008372:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008374:	4298      	cmp	r0, r3
 8008376:	bfb8      	it	lt
 8008378:	4618      	movlt	r0, r3
 800837a:	e730      	b.n	80081de <_printf_float+0xc2>
 800837c:	2301      	movs	r3, #1
 800837e:	464a      	mov	r2, r9
 8008380:	4631      	mov	r1, r6
 8008382:	4628      	mov	r0, r5
 8008384:	47b8      	blx	r7
 8008386:	3001      	adds	r0, #1
 8008388:	f43f af27 	beq.w	80081da <_printf_float+0xbe>
 800838c:	f108 0801 	add.w	r8, r8, #1
 8008390:	e7e6      	b.n	8008360 <_printf_float+0x244>
 8008392:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008394:	2b00      	cmp	r3, #0
 8008396:	dc39      	bgt.n	800840c <_printf_float+0x2f0>
 8008398:	4a1b      	ldr	r2, [pc, #108]	; (8008408 <_printf_float+0x2ec>)
 800839a:	2301      	movs	r3, #1
 800839c:	4631      	mov	r1, r6
 800839e:	4628      	mov	r0, r5
 80083a0:	47b8      	blx	r7
 80083a2:	3001      	adds	r0, #1
 80083a4:	f43f af19 	beq.w	80081da <_printf_float+0xbe>
 80083a8:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80083ac:	4313      	orrs	r3, r2
 80083ae:	d102      	bne.n	80083b6 <_printf_float+0x29a>
 80083b0:	6823      	ldr	r3, [r4, #0]
 80083b2:	07d9      	lsls	r1, r3, #31
 80083b4:	d5d8      	bpl.n	8008368 <_printf_float+0x24c>
 80083b6:	ee18 3a10 	vmov	r3, s16
 80083ba:	4652      	mov	r2, sl
 80083bc:	4631      	mov	r1, r6
 80083be:	4628      	mov	r0, r5
 80083c0:	47b8      	blx	r7
 80083c2:	3001      	adds	r0, #1
 80083c4:	f43f af09 	beq.w	80081da <_printf_float+0xbe>
 80083c8:	f04f 0900 	mov.w	r9, #0
 80083cc:	f104 0a1a 	add.w	sl, r4, #26
 80083d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80083d2:	425b      	negs	r3, r3
 80083d4:	454b      	cmp	r3, r9
 80083d6:	dc01      	bgt.n	80083dc <_printf_float+0x2c0>
 80083d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80083da:	e792      	b.n	8008302 <_printf_float+0x1e6>
 80083dc:	2301      	movs	r3, #1
 80083de:	4652      	mov	r2, sl
 80083e0:	4631      	mov	r1, r6
 80083e2:	4628      	mov	r0, r5
 80083e4:	47b8      	blx	r7
 80083e6:	3001      	adds	r0, #1
 80083e8:	f43f aef7 	beq.w	80081da <_printf_float+0xbe>
 80083ec:	f109 0901 	add.w	r9, r9, #1
 80083f0:	e7ee      	b.n	80083d0 <_printf_float+0x2b4>
 80083f2:	bf00      	nop
 80083f4:	7fefffff 	.word	0x7fefffff
 80083f8:	0800aa04 	.word	0x0800aa04
 80083fc:	0800aa08 	.word	0x0800aa08
 8008400:	0800aa0c 	.word	0x0800aa0c
 8008404:	0800aa10 	.word	0x0800aa10
 8008408:	0800aa14 	.word	0x0800aa14
 800840c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800840e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008410:	429a      	cmp	r2, r3
 8008412:	bfa8      	it	ge
 8008414:	461a      	movge	r2, r3
 8008416:	2a00      	cmp	r2, #0
 8008418:	4691      	mov	r9, r2
 800841a:	dc37      	bgt.n	800848c <_printf_float+0x370>
 800841c:	f04f 0b00 	mov.w	fp, #0
 8008420:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008424:	f104 021a 	add.w	r2, r4, #26
 8008428:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800842a:	9305      	str	r3, [sp, #20]
 800842c:	eba3 0309 	sub.w	r3, r3, r9
 8008430:	455b      	cmp	r3, fp
 8008432:	dc33      	bgt.n	800849c <_printf_float+0x380>
 8008434:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008438:	429a      	cmp	r2, r3
 800843a:	db3b      	blt.n	80084b4 <_printf_float+0x398>
 800843c:	6823      	ldr	r3, [r4, #0]
 800843e:	07da      	lsls	r2, r3, #31
 8008440:	d438      	bmi.n	80084b4 <_printf_float+0x398>
 8008442:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8008446:	eba2 0903 	sub.w	r9, r2, r3
 800844a:	9b05      	ldr	r3, [sp, #20]
 800844c:	1ad2      	subs	r2, r2, r3
 800844e:	4591      	cmp	r9, r2
 8008450:	bfa8      	it	ge
 8008452:	4691      	movge	r9, r2
 8008454:	f1b9 0f00 	cmp.w	r9, #0
 8008458:	dc35      	bgt.n	80084c6 <_printf_float+0x3aa>
 800845a:	f04f 0800 	mov.w	r8, #0
 800845e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008462:	f104 0a1a 	add.w	sl, r4, #26
 8008466:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800846a:	1a9b      	subs	r3, r3, r2
 800846c:	eba3 0309 	sub.w	r3, r3, r9
 8008470:	4543      	cmp	r3, r8
 8008472:	f77f af79 	ble.w	8008368 <_printf_float+0x24c>
 8008476:	2301      	movs	r3, #1
 8008478:	4652      	mov	r2, sl
 800847a:	4631      	mov	r1, r6
 800847c:	4628      	mov	r0, r5
 800847e:	47b8      	blx	r7
 8008480:	3001      	adds	r0, #1
 8008482:	f43f aeaa 	beq.w	80081da <_printf_float+0xbe>
 8008486:	f108 0801 	add.w	r8, r8, #1
 800848a:	e7ec      	b.n	8008466 <_printf_float+0x34a>
 800848c:	4613      	mov	r3, r2
 800848e:	4631      	mov	r1, r6
 8008490:	4642      	mov	r2, r8
 8008492:	4628      	mov	r0, r5
 8008494:	47b8      	blx	r7
 8008496:	3001      	adds	r0, #1
 8008498:	d1c0      	bne.n	800841c <_printf_float+0x300>
 800849a:	e69e      	b.n	80081da <_printf_float+0xbe>
 800849c:	2301      	movs	r3, #1
 800849e:	4631      	mov	r1, r6
 80084a0:	4628      	mov	r0, r5
 80084a2:	9205      	str	r2, [sp, #20]
 80084a4:	47b8      	blx	r7
 80084a6:	3001      	adds	r0, #1
 80084a8:	f43f ae97 	beq.w	80081da <_printf_float+0xbe>
 80084ac:	9a05      	ldr	r2, [sp, #20]
 80084ae:	f10b 0b01 	add.w	fp, fp, #1
 80084b2:	e7b9      	b.n	8008428 <_printf_float+0x30c>
 80084b4:	ee18 3a10 	vmov	r3, s16
 80084b8:	4652      	mov	r2, sl
 80084ba:	4631      	mov	r1, r6
 80084bc:	4628      	mov	r0, r5
 80084be:	47b8      	blx	r7
 80084c0:	3001      	adds	r0, #1
 80084c2:	d1be      	bne.n	8008442 <_printf_float+0x326>
 80084c4:	e689      	b.n	80081da <_printf_float+0xbe>
 80084c6:	9a05      	ldr	r2, [sp, #20]
 80084c8:	464b      	mov	r3, r9
 80084ca:	4442      	add	r2, r8
 80084cc:	4631      	mov	r1, r6
 80084ce:	4628      	mov	r0, r5
 80084d0:	47b8      	blx	r7
 80084d2:	3001      	adds	r0, #1
 80084d4:	d1c1      	bne.n	800845a <_printf_float+0x33e>
 80084d6:	e680      	b.n	80081da <_printf_float+0xbe>
 80084d8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80084da:	2a01      	cmp	r2, #1
 80084dc:	dc01      	bgt.n	80084e2 <_printf_float+0x3c6>
 80084de:	07db      	lsls	r3, r3, #31
 80084e0:	d53a      	bpl.n	8008558 <_printf_float+0x43c>
 80084e2:	2301      	movs	r3, #1
 80084e4:	4642      	mov	r2, r8
 80084e6:	4631      	mov	r1, r6
 80084e8:	4628      	mov	r0, r5
 80084ea:	47b8      	blx	r7
 80084ec:	3001      	adds	r0, #1
 80084ee:	f43f ae74 	beq.w	80081da <_printf_float+0xbe>
 80084f2:	ee18 3a10 	vmov	r3, s16
 80084f6:	4652      	mov	r2, sl
 80084f8:	4631      	mov	r1, r6
 80084fa:	4628      	mov	r0, r5
 80084fc:	47b8      	blx	r7
 80084fe:	3001      	adds	r0, #1
 8008500:	f43f ae6b 	beq.w	80081da <_printf_float+0xbe>
 8008504:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008508:	2200      	movs	r2, #0
 800850a:	2300      	movs	r3, #0
 800850c:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8008510:	f7f8 fada 	bl	8000ac8 <__aeabi_dcmpeq>
 8008514:	b9d8      	cbnz	r0, 800854e <_printf_float+0x432>
 8008516:	f10a 33ff 	add.w	r3, sl, #4294967295
 800851a:	f108 0201 	add.w	r2, r8, #1
 800851e:	4631      	mov	r1, r6
 8008520:	4628      	mov	r0, r5
 8008522:	47b8      	blx	r7
 8008524:	3001      	adds	r0, #1
 8008526:	d10e      	bne.n	8008546 <_printf_float+0x42a>
 8008528:	e657      	b.n	80081da <_printf_float+0xbe>
 800852a:	2301      	movs	r3, #1
 800852c:	4652      	mov	r2, sl
 800852e:	4631      	mov	r1, r6
 8008530:	4628      	mov	r0, r5
 8008532:	47b8      	blx	r7
 8008534:	3001      	adds	r0, #1
 8008536:	f43f ae50 	beq.w	80081da <_printf_float+0xbe>
 800853a:	f108 0801 	add.w	r8, r8, #1
 800853e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008540:	3b01      	subs	r3, #1
 8008542:	4543      	cmp	r3, r8
 8008544:	dcf1      	bgt.n	800852a <_printf_float+0x40e>
 8008546:	464b      	mov	r3, r9
 8008548:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800854c:	e6da      	b.n	8008304 <_printf_float+0x1e8>
 800854e:	f04f 0800 	mov.w	r8, #0
 8008552:	f104 0a1a 	add.w	sl, r4, #26
 8008556:	e7f2      	b.n	800853e <_printf_float+0x422>
 8008558:	2301      	movs	r3, #1
 800855a:	4642      	mov	r2, r8
 800855c:	e7df      	b.n	800851e <_printf_float+0x402>
 800855e:	2301      	movs	r3, #1
 8008560:	464a      	mov	r2, r9
 8008562:	4631      	mov	r1, r6
 8008564:	4628      	mov	r0, r5
 8008566:	47b8      	blx	r7
 8008568:	3001      	adds	r0, #1
 800856a:	f43f ae36 	beq.w	80081da <_printf_float+0xbe>
 800856e:	f108 0801 	add.w	r8, r8, #1
 8008572:	68e3      	ldr	r3, [r4, #12]
 8008574:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008576:	1a5b      	subs	r3, r3, r1
 8008578:	4543      	cmp	r3, r8
 800857a:	dcf0      	bgt.n	800855e <_printf_float+0x442>
 800857c:	e6f8      	b.n	8008370 <_printf_float+0x254>
 800857e:	f04f 0800 	mov.w	r8, #0
 8008582:	f104 0919 	add.w	r9, r4, #25
 8008586:	e7f4      	b.n	8008572 <_printf_float+0x456>

08008588 <_printf_common>:
 8008588:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800858c:	4616      	mov	r6, r2
 800858e:	4699      	mov	r9, r3
 8008590:	688a      	ldr	r2, [r1, #8]
 8008592:	690b      	ldr	r3, [r1, #16]
 8008594:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008598:	4293      	cmp	r3, r2
 800859a:	bfb8      	it	lt
 800859c:	4613      	movlt	r3, r2
 800859e:	6033      	str	r3, [r6, #0]
 80085a0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80085a4:	4607      	mov	r7, r0
 80085a6:	460c      	mov	r4, r1
 80085a8:	b10a      	cbz	r2, 80085ae <_printf_common+0x26>
 80085aa:	3301      	adds	r3, #1
 80085ac:	6033      	str	r3, [r6, #0]
 80085ae:	6823      	ldr	r3, [r4, #0]
 80085b0:	0699      	lsls	r1, r3, #26
 80085b2:	bf42      	ittt	mi
 80085b4:	6833      	ldrmi	r3, [r6, #0]
 80085b6:	3302      	addmi	r3, #2
 80085b8:	6033      	strmi	r3, [r6, #0]
 80085ba:	6825      	ldr	r5, [r4, #0]
 80085bc:	f015 0506 	ands.w	r5, r5, #6
 80085c0:	d106      	bne.n	80085d0 <_printf_common+0x48>
 80085c2:	f104 0a19 	add.w	sl, r4, #25
 80085c6:	68e3      	ldr	r3, [r4, #12]
 80085c8:	6832      	ldr	r2, [r6, #0]
 80085ca:	1a9b      	subs	r3, r3, r2
 80085cc:	42ab      	cmp	r3, r5
 80085ce:	dc26      	bgt.n	800861e <_printf_common+0x96>
 80085d0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80085d4:	1e13      	subs	r3, r2, #0
 80085d6:	6822      	ldr	r2, [r4, #0]
 80085d8:	bf18      	it	ne
 80085da:	2301      	movne	r3, #1
 80085dc:	0692      	lsls	r2, r2, #26
 80085de:	d42b      	bmi.n	8008638 <_printf_common+0xb0>
 80085e0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80085e4:	4649      	mov	r1, r9
 80085e6:	4638      	mov	r0, r7
 80085e8:	47c0      	blx	r8
 80085ea:	3001      	adds	r0, #1
 80085ec:	d01e      	beq.n	800862c <_printf_common+0xa4>
 80085ee:	6823      	ldr	r3, [r4, #0]
 80085f0:	6922      	ldr	r2, [r4, #16]
 80085f2:	f003 0306 	and.w	r3, r3, #6
 80085f6:	2b04      	cmp	r3, #4
 80085f8:	bf02      	ittt	eq
 80085fa:	68e5      	ldreq	r5, [r4, #12]
 80085fc:	6833      	ldreq	r3, [r6, #0]
 80085fe:	1aed      	subeq	r5, r5, r3
 8008600:	68a3      	ldr	r3, [r4, #8]
 8008602:	bf0c      	ite	eq
 8008604:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008608:	2500      	movne	r5, #0
 800860a:	4293      	cmp	r3, r2
 800860c:	bfc4      	itt	gt
 800860e:	1a9b      	subgt	r3, r3, r2
 8008610:	18ed      	addgt	r5, r5, r3
 8008612:	2600      	movs	r6, #0
 8008614:	341a      	adds	r4, #26
 8008616:	42b5      	cmp	r5, r6
 8008618:	d11a      	bne.n	8008650 <_printf_common+0xc8>
 800861a:	2000      	movs	r0, #0
 800861c:	e008      	b.n	8008630 <_printf_common+0xa8>
 800861e:	2301      	movs	r3, #1
 8008620:	4652      	mov	r2, sl
 8008622:	4649      	mov	r1, r9
 8008624:	4638      	mov	r0, r7
 8008626:	47c0      	blx	r8
 8008628:	3001      	adds	r0, #1
 800862a:	d103      	bne.n	8008634 <_printf_common+0xac>
 800862c:	f04f 30ff 	mov.w	r0, #4294967295
 8008630:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008634:	3501      	adds	r5, #1
 8008636:	e7c6      	b.n	80085c6 <_printf_common+0x3e>
 8008638:	18e1      	adds	r1, r4, r3
 800863a:	1c5a      	adds	r2, r3, #1
 800863c:	2030      	movs	r0, #48	; 0x30
 800863e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008642:	4422      	add	r2, r4
 8008644:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008648:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800864c:	3302      	adds	r3, #2
 800864e:	e7c7      	b.n	80085e0 <_printf_common+0x58>
 8008650:	2301      	movs	r3, #1
 8008652:	4622      	mov	r2, r4
 8008654:	4649      	mov	r1, r9
 8008656:	4638      	mov	r0, r7
 8008658:	47c0      	blx	r8
 800865a:	3001      	adds	r0, #1
 800865c:	d0e6      	beq.n	800862c <_printf_common+0xa4>
 800865e:	3601      	adds	r6, #1
 8008660:	e7d9      	b.n	8008616 <_printf_common+0x8e>
	...

08008664 <_printf_i>:
 8008664:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008668:	7e0f      	ldrb	r7, [r1, #24]
 800866a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800866c:	2f78      	cmp	r7, #120	; 0x78
 800866e:	4691      	mov	r9, r2
 8008670:	4680      	mov	r8, r0
 8008672:	460c      	mov	r4, r1
 8008674:	469a      	mov	sl, r3
 8008676:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800867a:	d807      	bhi.n	800868c <_printf_i+0x28>
 800867c:	2f62      	cmp	r7, #98	; 0x62
 800867e:	d80a      	bhi.n	8008696 <_printf_i+0x32>
 8008680:	2f00      	cmp	r7, #0
 8008682:	f000 80d4 	beq.w	800882e <_printf_i+0x1ca>
 8008686:	2f58      	cmp	r7, #88	; 0x58
 8008688:	f000 80c0 	beq.w	800880c <_printf_i+0x1a8>
 800868c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008690:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008694:	e03a      	b.n	800870c <_printf_i+0xa8>
 8008696:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800869a:	2b15      	cmp	r3, #21
 800869c:	d8f6      	bhi.n	800868c <_printf_i+0x28>
 800869e:	a101      	add	r1, pc, #4	; (adr r1, 80086a4 <_printf_i+0x40>)
 80086a0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80086a4:	080086fd 	.word	0x080086fd
 80086a8:	08008711 	.word	0x08008711
 80086ac:	0800868d 	.word	0x0800868d
 80086b0:	0800868d 	.word	0x0800868d
 80086b4:	0800868d 	.word	0x0800868d
 80086b8:	0800868d 	.word	0x0800868d
 80086bc:	08008711 	.word	0x08008711
 80086c0:	0800868d 	.word	0x0800868d
 80086c4:	0800868d 	.word	0x0800868d
 80086c8:	0800868d 	.word	0x0800868d
 80086cc:	0800868d 	.word	0x0800868d
 80086d0:	08008815 	.word	0x08008815
 80086d4:	0800873d 	.word	0x0800873d
 80086d8:	080087cf 	.word	0x080087cf
 80086dc:	0800868d 	.word	0x0800868d
 80086e0:	0800868d 	.word	0x0800868d
 80086e4:	08008837 	.word	0x08008837
 80086e8:	0800868d 	.word	0x0800868d
 80086ec:	0800873d 	.word	0x0800873d
 80086f0:	0800868d 	.word	0x0800868d
 80086f4:	0800868d 	.word	0x0800868d
 80086f8:	080087d7 	.word	0x080087d7
 80086fc:	682b      	ldr	r3, [r5, #0]
 80086fe:	1d1a      	adds	r2, r3, #4
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	602a      	str	r2, [r5, #0]
 8008704:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008708:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800870c:	2301      	movs	r3, #1
 800870e:	e09f      	b.n	8008850 <_printf_i+0x1ec>
 8008710:	6820      	ldr	r0, [r4, #0]
 8008712:	682b      	ldr	r3, [r5, #0]
 8008714:	0607      	lsls	r7, r0, #24
 8008716:	f103 0104 	add.w	r1, r3, #4
 800871a:	6029      	str	r1, [r5, #0]
 800871c:	d501      	bpl.n	8008722 <_printf_i+0xbe>
 800871e:	681e      	ldr	r6, [r3, #0]
 8008720:	e003      	b.n	800872a <_printf_i+0xc6>
 8008722:	0646      	lsls	r6, r0, #25
 8008724:	d5fb      	bpl.n	800871e <_printf_i+0xba>
 8008726:	f9b3 6000 	ldrsh.w	r6, [r3]
 800872a:	2e00      	cmp	r6, #0
 800872c:	da03      	bge.n	8008736 <_printf_i+0xd2>
 800872e:	232d      	movs	r3, #45	; 0x2d
 8008730:	4276      	negs	r6, r6
 8008732:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008736:	485a      	ldr	r0, [pc, #360]	; (80088a0 <_printf_i+0x23c>)
 8008738:	230a      	movs	r3, #10
 800873a:	e012      	b.n	8008762 <_printf_i+0xfe>
 800873c:	682b      	ldr	r3, [r5, #0]
 800873e:	6820      	ldr	r0, [r4, #0]
 8008740:	1d19      	adds	r1, r3, #4
 8008742:	6029      	str	r1, [r5, #0]
 8008744:	0605      	lsls	r5, r0, #24
 8008746:	d501      	bpl.n	800874c <_printf_i+0xe8>
 8008748:	681e      	ldr	r6, [r3, #0]
 800874a:	e002      	b.n	8008752 <_printf_i+0xee>
 800874c:	0641      	lsls	r1, r0, #25
 800874e:	d5fb      	bpl.n	8008748 <_printf_i+0xe4>
 8008750:	881e      	ldrh	r6, [r3, #0]
 8008752:	4853      	ldr	r0, [pc, #332]	; (80088a0 <_printf_i+0x23c>)
 8008754:	2f6f      	cmp	r7, #111	; 0x6f
 8008756:	bf0c      	ite	eq
 8008758:	2308      	moveq	r3, #8
 800875a:	230a      	movne	r3, #10
 800875c:	2100      	movs	r1, #0
 800875e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008762:	6865      	ldr	r5, [r4, #4]
 8008764:	60a5      	str	r5, [r4, #8]
 8008766:	2d00      	cmp	r5, #0
 8008768:	bfa2      	ittt	ge
 800876a:	6821      	ldrge	r1, [r4, #0]
 800876c:	f021 0104 	bicge.w	r1, r1, #4
 8008770:	6021      	strge	r1, [r4, #0]
 8008772:	b90e      	cbnz	r6, 8008778 <_printf_i+0x114>
 8008774:	2d00      	cmp	r5, #0
 8008776:	d04b      	beq.n	8008810 <_printf_i+0x1ac>
 8008778:	4615      	mov	r5, r2
 800877a:	fbb6 f1f3 	udiv	r1, r6, r3
 800877e:	fb03 6711 	mls	r7, r3, r1, r6
 8008782:	5dc7      	ldrb	r7, [r0, r7]
 8008784:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008788:	4637      	mov	r7, r6
 800878a:	42bb      	cmp	r3, r7
 800878c:	460e      	mov	r6, r1
 800878e:	d9f4      	bls.n	800877a <_printf_i+0x116>
 8008790:	2b08      	cmp	r3, #8
 8008792:	d10b      	bne.n	80087ac <_printf_i+0x148>
 8008794:	6823      	ldr	r3, [r4, #0]
 8008796:	07de      	lsls	r6, r3, #31
 8008798:	d508      	bpl.n	80087ac <_printf_i+0x148>
 800879a:	6923      	ldr	r3, [r4, #16]
 800879c:	6861      	ldr	r1, [r4, #4]
 800879e:	4299      	cmp	r1, r3
 80087a0:	bfde      	ittt	le
 80087a2:	2330      	movle	r3, #48	; 0x30
 80087a4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80087a8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80087ac:	1b52      	subs	r2, r2, r5
 80087ae:	6122      	str	r2, [r4, #16]
 80087b0:	f8cd a000 	str.w	sl, [sp]
 80087b4:	464b      	mov	r3, r9
 80087b6:	aa03      	add	r2, sp, #12
 80087b8:	4621      	mov	r1, r4
 80087ba:	4640      	mov	r0, r8
 80087bc:	f7ff fee4 	bl	8008588 <_printf_common>
 80087c0:	3001      	adds	r0, #1
 80087c2:	d14a      	bne.n	800885a <_printf_i+0x1f6>
 80087c4:	f04f 30ff 	mov.w	r0, #4294967295
 80087c8:	b004      	add	sp, #16
 80087ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80087ce:	6823      	ldr	r3, [r4, #0]
 80087d0:	f043 0320 	orr.w	r3, r3, #32
 80087d4:	6023      	str	r3, [r4, #0]
 80087d6:	4833      	ldr	r0, [pc, #204]	; (80088a4 <_printf_i+0x240>)
 80087d8:	2778      	movs	r7, #120	; 0x78
 80087da:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80087de:	6823      	ldr	r3, [r4, #0]
 80087e0:	6829      	ldr	r1, [r5, #0]
 80087e2:	061f      	lsls	r7, r3, #24
 80087e4:	f851 6b04 	ldr.w	r6, [r1], #4
 80087e8:	d402      	bmi.n	80087f0 <_printf_i+0x18c>
 80087ea:	065f      	lsls	r7, r3, #25
 80087ec:	bf48      	it	mi
 80087ee:	b2b6      	uxthmi	r6, r6
 80087f0:	07df      	lsls	r7, r3, #31
 80087f2:	bf48      	it	mi
 80087f4:	f043 0320 	orrmi.w	r3, r3, #32
 80087f8:	6029      	str	r1, [r5, #0]
 80087fa:	bf48      	it	mi
 80087fc:	6023      	strmi	r3, [r4, #0]
 80087fe:	b91e      	cbnz	r6, 8008808 <_printf_i+0x1a4>
 8008800:	6823      	ldr	r3, [r4, #0]
 8008802:	f023 0320 	bic.w	r3, r3, #32
 8008806:	6023      	str	r3, [r4, #0]
 8008808:	2310      	movs	r3, #16
 800880a:	e7a7      	b.n	800875c <_printf_i+0xf8>
 800880c:	4824      	ldr	r0, [pc, #144]	; (80088a0 <_printf_i+0x23c>)
 800880e:	e7e4      	b.n	80087da <_printf_i+0x176>
 8008810:	4615      	mov	r5, r2
 8008812:	e7bd      	b.n	8008790 <_printf_i+0x12c>
 8008814:	682b      	ldr	r3, [r5, #0]
 8008816:	6826      	ldr	r6, [r4, #0]
 8008818:	6961      	ldr	r1, [r4, #20]
 800881a:	1d18      	adds	r0, r3, #4
 800881c:	6028      	str	r0, [r5, #0]
 800881e:	0635      	lsls	r5, r6, #24
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	d501      	bpl.n	8008828 <_printf_i+0x1c4>
 8008824:	6019      	str	r1, [r3, #0]
 8008826:	e002      	b.n	800882e <_printf_i+0x1ca>
 8008828:	0670      	lsls	r0, r6, #25
 800882a:	d5fb      	bpl.n	8008824 <_printf_i+0x1c0>
 800882c:	8019      	strh	r1, [r3, #0]
 800882e:	2300      	movs	r3, #0
 8008830:	6123      	str	r3, [r4, #16]
 8008832:	4615      	mov	r5, r2
 8008834:	e7bc      	b.n	80087b0 <_printf_i+0x14c>
 8008836:	682b      	ldr	r3, [r5, #0]
 8008838:	1d1a      	adds	r2, r3, #4
 800883a:	602a      	str	r2, [r5, #0]
 800883c:	681d      	ldr	r5, [r3, #0]
 800883e:	6862      	ldr	r2, [r4, #4]
 8008840:	2100      	movs	r1, #0
 8008842:	4628      	mov	r0, r5
 8008844:	f7f7 fcc4 	bl	80001d0 <memchr>
 8008848:	b108      	cbz	r0, 800884e <_printf_i+0x1ea>
 800884a:	1b40      	subs	r0, r0, r5
 800884c:	6060      	str	r0, [r4, #4]
 800884e:	6863      	ldr	r3, [r4, #4]
 8008850:	6123      	str	r3, [r4, #16]
 8008852:	2300      	movs	r3, #0
 8008854:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008858:	e7aa      	b.n	80087b0 <_printf_i+0x14c>
 800885a:	6923      	ldr	r3, [r4, #16]
 800885c:	462a      	mov	r2, r5
 800885e:	4649      	mov	r1, r9
 8008860:	4640      	mov	r0, r8
 8008862:	47d0      	blx	sl
 8008864:	3001      	adds	r0, #1
 8008866:	d0ad      	beq.n	80087c4 <_printf_i+0x160>
 8008868:	6823      	ldr	r3, [r4, #0]
 800886a:	079b      	lsls	r3, r3, #30
 800886c:	d413      	bmi.n	8008896 <_printf_i+0x232>
 800886e:	68e0      	ldr	r0, [r4, #12]
 8008870:	9b03      	ldr	r3, [sp, #12]
 8008872:	4298      	cmp	r0, r3
 8008874:	bfb8      	it	lt
 8008876:	4618      	movlt	r0, r3
 8008878:	e7a6      	b.n	80087c8 <_printf_i+0x164>
 800887a:	2301      	movs	r3, #1
 800887c:	4632      	mov	r2, r6
 800887e:	4649      	mov	r1, r9
 8008880:	4640      	mov	r0, r8
 8008882:	47d0      	blx	sl
 8008884:	3001      	adds	r0, #1
 8008886:	d09d      	beq.n	80087c4 <_printf_i+0x160>
 8008888:	3501      	adds	r5, #1
 800888a:	68e3      	ldr	r3, [r4, #12]
 800888c:	9903      	ldr	r1, [sp, #12]
 800888e:	1a5b      	subs	r3, r3, r1
 8008890:	42ab      	cmp	r3, r5
 8008892:	dcf2      	bgt.n	800887a <_printf_i+0x216>
 8008894:	e7eb      	b.n	800886e <_printf_i+0x20a>
 8008896:	2500      	movs	r5, #0
 8008898:	f104 0619 	add.w	r6, r4, #25
 800889c:	e7f5      	b.n	800888a <_printf_i+0x226>
 800889e:	bf00      	nop
 80088a0:	0800aa16 	.word	0x0800aa16
 80088a4:	0800aa27 	.word	0x0800aa27

080088a8 <std>:
 80088a8:	2300      	movs	r3, #0
 80088aa:	b510      	push	{r4, lr}
 80088ac:	4604      	mov	r4, r0
 80088ae:	e9c0 3300 	strd	r3, r3, [r0]
 80088b2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80088b6:	6083      	str	r3, [r0, #8]
 80088b8:	8181      	strh	r1, [r0, #12]
 80088ba:	6643      	str	r3, [r0, #100]	; 0x64
 80088bc:	81c2      	strh	r2, [r0, #14]
 80088be:	6183      	str	r3, [r0, #24]
 80088c0:	4619      	mov	r1, r3
 80088c2:	2208      	movs	r2, #8
 80088c4:	305c      	adds	r0, #92	; 0x5c
 80088c6:	f000 f8f4 	bl	8008ab2 <memset>
 80088ca:	4b05      	ldr	r3, [pc, #20]	; (80088e0 <std+0x38>)
 80088cc:	6263      	str	r3, [r4, #36]	; 0x24
 80088ce:	4b05      	ldr	r3, [pc, #20]	; (80088e4 <std+0x3c>)
 80088d0:	62a3      	str	r3, [r4, #40]	; 0x28
 80088d2:	4b05      	ldr	r3, [pc, #20]	; (80088e8 <std+0x40>)
 80088d4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80088d6:	4b05      	ldr	r3, [pc, #20]	; (80088ec <std+0x44>)
 80088d8:	6224      	str	r4, [r4, #32]
 80088da:	6323      	str	r3, [r4, #48]	; 0x30
 80088dc:	bd10      	pop	{r4, pc}
 80088de:	bf00      	nop
 80088e0:	08008a2d 	.word	0x08008a2d
 80088e4:	08008a4f 	.word	0x08008a4f
 80088e8:	08008a87 	.word	0x08008a87
 80088ec:	08008aab 	.word	0x08008aab

080088f0 <stdio_exit_handler>:
 80088f0:	4a02      	ldr	r2, [pc, #8]	; (80088fc <stdio_exit_handler+0xc>)
 80088f2:	4903      	ldr	r1, [pc, #12]	; (8008900 <stdio_exit_handler+0x10>)
 80088f4:	4803      	ldr	r0, [pc, #12]	; (8008904 <stdio_exit_handler+0x14>)
 80088f6:	f000 b869 	b.w	80089cc <_fwalk_sglue>
 80088fa:	bf00      	nop
 80088fc:	2000000c 	.word	0x2000000c
 8008900:	0800a531 	.word	0x0800a531
 8008904:	20000018 	.word	0x20000018

08008908 <cleanup_stdio>:
 8008908:	6841      	ldr	r1, [r0, #4]
 800890a:	4b0c      	ldr	r3, [pc, #48]	; (800893c <cleanup_stdio+0x34>)
 800890c:	4299      	cmp	r1, r3
 800890e:	b510      	push	{r4, lr}
 8008910:	4604      	mov	r4, r0
 8008912:	d001      	beq.n	8008918 <cleanup_stdio+0x10>
 8008914:	f001 fe0c 	bl	800a530 <_fflush_r>
 8008918:	68a1      	ldr	r1, [r4, #8]
 800891a:	4b09      	ldr	r3, [pc, #36]	; (8008940 <cleanup_stdio+0x38>)
 800891c:	4299      	cmp	r1, r3
 800891e:	d002      	beq.n	8008926 <cleanup_stdio+0x1e>
 8008920:	4620      	mov	r0, r4
 8008922:	f001 fe05 	bl	800a530 <_fflush_r>
 8008926:	68e1      	ldr	r1, [r4, #12]
 8008928:	4b06      	ldr	r3, [pc, #24]	; (8008944 <cleanup_stdio+0x3c>)
 800892a:	4299      	cmp	r1, r3
 800892c:	d004      	beq.n	8008938 <cleanup_stdio+0x30>
 800892e:	4620      	mov	r0, r4
 8008930:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008934:	f001 bdfc 	b.w	800a530 <_fflush_r>
 8008938:	bd10      	pop	{r4, pc}
 800893a:	bf00      	nop
 800893c:	200003d0 	.word	0x200003d0
 8008940:	20000438 	.word	0x20000438
 8008944:	200004a0 	.word	0x200004a0

08008948 <global_stdio_init.part.0>:
 8008948:	b510      	push	{r4, lr}
 800894a:	4b0b      	ldr	r3, [pc, #44]	; (8008978 <global_stdio_init.part.0+0x30>)
 800894c:	4c0b      	ldr	r4, [pc, #44]	; (800897c <global_stdio_init.part.0+0x34>)
 800894e:	4a0c      	ldr	r2, [pc, #48]	; (8008980 <global_stdio_init.part.0+0x38>)
 8008950:	601a      	str	r2, [r3, #0]
 8008952:	4620      	mov	r0, r4
 8008954:	2200      	movs	r2, #0
 8008956:	2104      	movs	r1, #4
 8008958:	f7ff ffa6 	bl	80088a8 <std>
 800895c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8008960:	2201      	movs	r2, #1
 8008962:	2109      	movs	r1, #9
 8008964:	f7ff ffa0 	bl	80088a8 <std>
 8008968:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800896c:	2202      	movs	r2, #2
 800896e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008972:	2112      	movs	r1, #18
 8008974:	f7ff bf98 	b.w	80088a8 <std>
 8008978:	20000508 	.word	0x20000508
 800897c:	200003d0 	.word	0x200003d0
 8008980:	080088f1 	.word	0x080088f1

08008984 <__sfp_lock_acquire>:
 8008984:	4801      	ldr	r0, [pc, #4]	; (800898c <__sfp_lock_acquire+0x8>)
 8008986:	f000 b911 	b.w	8008bac <__retarget_lock_acquire_recursive>
 800898a:	bf00      	nop
 800898c:	20000511 	.word	0x20000511

08008990 <__sfp_lock_release>:
 8008990:	4801      	ldr	r0, [pc, #4]	; (8008998 <__sfp_lock_release+0x8>)
 8008992:	f000 b90c 	b.w	8008bae <__retarget_lock_release_recursive>
 8008996:	bf00      	nop
 8008998:	20000511 	.word	0x20000511

0800899c <__sinit>:
 800899c:	b510      	push	{r4, lr}
 800899e:	4604      	mov	r4, r0
 80089a0:	f7ff fff0 	bl	8008984 <__sfp_lock_acquire>
 80089a4:	6a23      	ldr	r3, [r4, #32]
 80089a6:	b11b      	cbz	r3, 80089b0 <__sinit+0x14>
 80089a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80089ac:	f7ff bff0 	b.w	8008990 <__sfp_lock_release>
 80089b0:	4b04      	ldr	r3, [pc, #16]	; (80089c4 <__sinit+0x28>)
 80089b2:	6223      	str	r3, [r4, #32]
 80089b4:	4b04      	ldr	r3, [pc, #16]	; (80089c8 <__sinit+0x2c>)
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d1f5      	bne.n	80089a8 <__sinit+0xc>
 80089bc:	f7ff ffc4 	bl	8008948 <global_stdio_init.part.0>
 80089c0:	e7f2      	b.n	80089a8 <__sinit+0xc>
 80089c2:	bf00      	nop
 80089c4:	08008909 	.word	0x08008909
 80089c8:	20000508 	.word	0x20000508

080089cc <_fwalk_sglue>:
 80089cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80089d0:	4607      	mov	r7, r0
 80089d2:	4688      	mov	r8, r1
 80089d4:	4614      	mov	r4, r2
 80089d6:	2600      	movs	r6, #0
 80089d8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80089dc:	f1b9 0901 	subs.w	r9, r9, #1
 80089e0:	d505      	bpl.n	80089ee <_fwalk_sglue+0x22>
 80089e2:	6824      	ldr	r4, [r4, #0]
 80089e4:	2c00      	cmp	r4, #0
 80089e6:	d1f7      	bne.n	80089d8 <_fwalk_sglue+0xc>
 80089e8:	4630      	mov	r0, r6
 80089ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80089ee:	89ab      	ldrh	r3, [r5, #12]
 80089f0:	2b01      	cmp	r3, #1
 80089f2:	d907      	bls.n	8008a04 <_fwalk_sglue+0x38>
 80089f4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80089f8:	3301      	adds	r3, #1
 80089fa:	d003      	beq.n	8008a04 <_fwalk_sglue+0x38>
 80089fc:	4629      	mov	r1, r5
 80089fe:	4638      	mov	r0, r7
 8008a00:	47c0      	blx	r8
 8008a02:	4306      	orrs	r6, r0
 8008a04:	3568      	adds	r5, #104	; 0x68
 8008a06:	e7e9      	b.n	80089dc <_fwalk_sglue+0x10>

08008a08 <iprintf>:
 8008a08:	b40f      	push	{r0, r1, r2, r3}
 8008a0a:	b507      	push	{r0, r1, r2, lr}
 8008a0c:	4906      	ldr	r1, [pc, #24]	; (8008a28 <iprintf+0x20>)
 8008a0e:	ab04      	add	r3, sp, #16
 8008a10:	6808      	ldr	r0, [r1, #0]
 8008a12:	f853 2b04 	ldr.w	r2, [r3], #4
 8008a16:	6881      	ldr	r1, [r0, #8]
 8008a18:	9301      	str	r3, [sp, #4]
 8008a1a:	f001 fbe9 	bl	800a1f0 <_vfiprintf_r>
 8008a1e:	b003      	add	sp, #12
 8008a20:	f85d eb04 	ldr.w	lr, [sp], #4
 8008a24:	b004      	add	sp, #16
 8008a26:	4770      	bx	lr
 8008a28:	20000064 	.word	0x20000064

08008a2c <__sread>:
 8008a2c:	b510      	push	{r4, lr}
 8008a2e:	460c      	mov	r4, r1
 8008a30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a34:	f000 f86c 	bl	8008b10 <_read_r>
 8008a38:	2800      	cmp	r0, #0
 8008a3a:	bfab      	itete	ge
 8008a3c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008a3e:	89a3      	ldrhlt	r3, [r4, #12]
 8008a40:	181b      	addge	r3, r3, r0
 8008a42:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008a46:	bfac      	ite	ge
 8008a48:	6563      	strge	r3, [r4, #84]	; 0x54
 8008a4a:	81a3      	strhlt	r3, [r4, #12]
 8008a4c:	bd10      	pop	{r4, pc}

08008a4e <__swrite>:
 8008a4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a52:	461f      	mov	r7, r3
 8008a54:	898b      	ldrh	r3, [r1, #12]
 8008a56:	05db      	lsls	r3, r3, #23
 8008a58:	4605      	mov	r5, r0
 8008a5a:	460c      	mov	r4, r1
 8008a5c:	4616      	mov	r6, r2
 8008a5e:	d505      	bpl.n	8008a6c <__swrite+0x1e>
 8008a60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a64:	2302      	movs	r3, #2
 8008a66:	2200      	movs	r2, #0
 8008a68:	f000 f840 	bl	8008aec <_lseek_r>
 8008a6c:	89a3      	ldrh	r3, [r4, #12]
 8008a6e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008a72:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008a76:	81a3      	strh	r3, [r4, #12]
 8008a78:	4632      	mov	r2, r6
 8008a7a:	463b      	mov	r3, r7
 8008a7c:	4628      	mov	r0, r5
 8008a7e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008a82:	f000 b857 	b.w	8008b34 <_write_r>

08008a86 <__sseek>:
 8008a86:	b510      	push	{r4, lr}
 8008a88:	460c      	mov	r4, r1
 8008a8a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a8e:	f000 f82d 	bl	8008aec <_lseek_r>
 8008a92:	1c43      	adds	r3, r0, #1
 8008a94:	89a3      	ldrh	r3, [r4, #12]
 8008a96:	bf15      	itete	ne
 8008a98:	6560      	strne	r0, [r4, #84]	; 0x54
 8008a9a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008a9e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008aa2:	81a3      	strheq	r3, [r4, #12]
 8008aa4:	bf18      	it	ne
 8008aa6:	81a3      	strhne	r3, [r4, #12]
 8008aa8:	bd10      	pop	{r4, pc}

08008aaa <__sclose>:
 8008aaa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008aae:	f000 b80d 	b.w	8008acc <_close_r>

08008ab2 <memset>:
 8008ab2:	4402      	add	r2, r0
 8008ab4:	4603      	mov	r3, r0
 8008ab6:	4293      	cmp	r3, r2
 8008ab8:	d100      	bne.n	8008abc <memset+0xa>
 8008aba:	4770      	bx	lr
 8008abc:	f803 1b01 	strb.w	r1, [r3], #1
 8008ac0:	e7f9      	b.n	8008ab6 <memset+0x4>
	...

08008ac4 <_localeconv_r>:
 8008ac4:	4800      	ldr	r0, [pc, #0]	; (8008ac8 <_localeconv_r+0x4>)
 8008ac6:	4770      	bx	lr
 8008ac8:	20000158 	.word	0x20000158

08008acc <_close_r>:
 8008acc:	b538      	push	{r3, r4, r5, lr}
 8008ace:	4d06      	ldr	r5, [pc, #24]	; (8008ae8 <_close_r+0x1c>)
 8008ad0:	2300      	movs	r3, #0
 8008ad2:	4604      	mov	r4, r0
 8008ad4:	4608      	mov	r0, r1
 8008ad6:	602b      	str	r3, [r5, #0]
 8008ad8:	f7f8 ffa7 	bl	8001a2a <_close>
 8008adc:	1c43      	adds	r3, r0, #1
 8008ade:	d102      	bne.n	8008ae6 <_close_r+0x1a>
 8008ae0:	682b      	ldr	r3, [r5, #0]
 8008ae2:	b103      	cbz	r3, 8008ae6 <_close_r+0x1a>
 8008ae4:	6023      	str	r3, [r4, #0]
 8008ae6:	bd38      	pop	{r3, r4, r5, pc}
 8008ae8:	2000050c 	.word	0x2000050c

08008aec <_lseek_r>:
 8008aec:	b538      	push	{r3, r4, r5, lr}
 8008aee:	4d07      	ldr	r5, [pc, #28]	; (8008b0c <_lseek_r+0x20>)
 8008af0:	4604      	mov	r4, r0
 8008af2:	4608      	mov	r0, r1
 8008af4:	4611      	mov	r1, r2
 8008af6:	2200      	movs	r2, #0
 8008af8:	602a      	str	r2, [r5, #0]
 8008afa:	461a      	mov	r2, r3
 8008afc:	f7f8 ffbc 	bl	8001a78 <_lseek>
 8008b00:	1c43      	adds	r3, r0, #1
 8008b02:	d102      	bne.n	8008b0a <_lseek_r+0x1e>
 8008b04:	682b      	ldr	r3, [r5, #0]
 8008b06:	b103      	cbz	r3, 8008b0a <_lseek_r+0x1e>
 8008b08:	6023      	str	r3, [r4, #0]
 8008b0a:	bd38      	pop	{r3, r4, r5, pc}
 8008b0c:	2000050c 	.word	0x2000050c

08008b10 <_read_r>:
 8008b10:	b538      	push	{r3, r4, r5, lr}
 8008b12:	4d07      	ldr	r5, [pc, #28]	; (8008b30 <_read_r+0x20>)
 8008b14:	4604      	mov	r4, r0
 8008b16:	4608      	mov	r0, r1
 8008b18:	4611      	mov	r1, r2
 8008b1a:	2200      	movs	r2, #0
 8008b1c:	602a      	str	r2, [r5, #0]
 8008b1e:	461a      	mov	r2, r3
 8008b20:	f7f8 ff66 	bl	80019f0 <_read>
 8008b24:	1c43      	adds	r3, r0, #1
 8008b26:	d102      	bne.n	8008b2e <_read_r+0x1e>
 8008b28:	682b      	ldr	r3, [r5, #0]
 8008b2a:	b103      	cbz	r3, 8008b2e <_read_r+0x1e>
 8008b2c:	6023      	str	r3, [r4, #0]
 8008b2e:	bd38      	pop	{r3, r4, r5, pc}
 8008b30:	2000050c 	.word	0x2000050c

08008b34 <_write_r>:
 8008b34:	b538      	push	{r3, r4, r5, lr}
 8008b36:	4d07      	ldr	r5, [pc, #28]	; (8008b54 <_write_r+0x20>)
 8008b38:	4604      	mov	r4, r0
 8008b3a:	4608      	mov	r0, r1
 8008b3c:	4611      	mov	r1, r2
 8008b3e:	2200      	movs	r2, #0
 8008b40:	602a      	str	r2, [r5, #0]
 8008b42:	461a      	mov	r2, r3
 8008b44:	f7f8 f9fe 	bl	8000f44 <_write>
 8008b48:	1c43      	adds	r3, r0, #1
 8008b4a:	d102      	bne.n	8008b52 <_write_r+0x1e>
 8008b4c:	682b      	ldr	r3, [r5, #0]
 8008b4e:	b103      	cbz	r3, 8008b52 <_write_r+0x1e>
 8008b50:	6023      	str	r3, [r4, #0]
 8008b52:	bd38      	pop	{r3, r4, r5, pc}
 8008b54:	2000050c 	.word	0x2000050c

08008b58 <__errno>:
 8008b58:	4b01      	ldr	r3, [pc, #4]	; (8008b60 <__errno+0x8>)
 8008b5a:	6818      	ldr	r0, [r3, #0]
 8008b5c:	4770      	bx	lr
 8008b5e:	bf00      	nop
 8008b60:	20000064 	.word	0x20000064

08008b64 <__libc_init_array>:
 8008b64:	b570      	push	{r4, r5, r6, lr}
 8008b66:	4d0d      	ldr	r5, [pc, #52]	; (8008b9c <__libc_init_array+0x38>)
 8008b68:	4c0d      	ldr	r4, [pc, #52]	; (8008ba0 <__libc_init_array+0x3c>)
 8008b6a:	1b64      	subs	r4, r4, r5
 8008b6c:	10a4      	asrs	r4, r4, #2
 8008b6e:	2600      	movs	r6, #0
 8008b70:	42a6      	cmp	r6, r4
 8008b72:	d109      	bne.n	8008b88 <__libc_init_array+0x24>
 8008b74:	4d0b      	ldr	r5, [pc, #44]	; (8008ba4 <__libc_init_array+0x40>)
 8008b76:	4c0c      	ldr	r4, [pc, #48]	; (8008ba8 <__libc_init_array+0x44>)
 8008b78:	f001 feec 	bl	800a954 <_init>
 8008b7c:	1b64      	subs	r4, r4, r5
 8008b7e:	10a4      	asrs	r4, r4, #2
 8008b80:	2600      	movs	r6, #0
 8008b82:	42a6      	cmp	r6, r4
 8008b84:	d105      	bne.n	8008b92 <__libc_init_array+0x2e>
 8008b86:	bd70      	pop	{r4, r5, r6, pc}
 8008b88:	f855 3b04 	ldr.w	r3, [r5], #4
 8008b8c:	4798      	blx	r3
 8008b8e:	3601      	adds	r6, #1
 8008b90:	e7ee      	b.n	8008b70 <__libc_init_array+0xc>
 8008b92:	f855 3b04 	ldr.w	r3, [r5], #4
 8008b96:	4798      	blx	r3
 8008b98:	3601      	adds	r6, #1
 8008b9a:	e7f2      	b.n	8008b82 <__libc_init_array+0x1e>
 8008b9c:	0800ad7c 	.word	0x0800ad7c
 8008ba0:	0800ad7c 	.word	0x0800ad7c
 8008ba4:	0800ad7c 	.word	0x0800ad7c
 8008ba8:	0800ad80 	.word	0x0800ad80

08008bac <__retarget_lock_acquire_recursive>:
 8008bac:	4770      	bx	lr

08008bae <__retarget_lock_release_recursive>:
 8008bae:	4770      	bx	lr

08008bb0 <quorem>:
 8008bb0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008bb4:	6903      	ldr	r3, [r0, #16]
 8008bb6:	690c      	ldr	r4, [r1, #16]
 8008bb8:	42a3      	cmp	r3, r4
 8008bba:	4607      	mov	r7, r0
 8008bbc:	db7e      	blt.n	8008cbc <quorem+0x10c>
 8008bbe:	3c01      	subs	r4, #1
 8008bc0:	f101 0814 	add.w	r8, r1, #20
 8008bc4:	f100 0514 	add.w	r5, r0, #20
 8008bc8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008bcc:	9301      	str	r3, [sp, #4]
 8008bce:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008bd2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008bd6:	3301      	adds	r3, #1
 8008bd8:	429a      	cmp	r2, r3
 8008bda:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008bde:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008be2:	fbb2 f6f3 	udiv	r6, r2, r3
 8008be6:	d331      	bcc.n	8008c4c <quorem+0x9c>
 8008be8:	f04f 0e00 	mov.w	lr, #0
 8008bec:	4640      	mov	r0, r8
 8008bee:	46ac      	mov	ip, r5
 8008bf0:	46f2      	mov	sl, lr
 8008bf2:	f850 2b04 	ldr.w	r2, [r0], #4
 8008bf6:	b293      	uxth	r3, r2
 8008bf8:	fb06 e303 	mla	r3, r6, r3, lr
 8008bfc:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008c00:	0c1a      	lsrs	r2, r3, #16
 8008c02:	b29b      	uxth	r3, r3
 8008c04:	ebaa 0303 	sub.w	r3, sl, r3
 8008c08:	f8dc a000 	ldr.w	sl, [ip]
 8008c0c:	fa13 f38a 	uxtah	r3, r3, sl
 8008c10:	fb06 220e 	mla	r2, r6, lr, r2
 8008c14:	9300      	str	r3, [sp, #0]
 8008c16:	9b00      	ldr	r3, [sp, #0]
 8008c18:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008c1c:	b292      	uxth	r2, r2
 8008c1e:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8008c22:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008c26:	f8bd 3000 	ldrh.w	r3, [sp]
 8008c2a:	4581      	cmp	r9, r0
 8008c2c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008c30:	f84c 3b04 	str.w	r3, [ip], #4
 8008c34:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008c38:	d2db      	bcs.n	8008bf2 <quorem+0x42>
 8008c3a:	f855 300b 	ldr.w	r3, [r5, fp]
 8008c3e:	b92b      	cbnz	r3, 8008c4c <quorem+0x9c>
 8008c40:	9b01      	ldr	r3, [sp, #4]
 8008c42:	3b04      	subs	r3, #4
 8008c44:	429d      	cmp	r5, r3
 8008c46:	461a      	mov	r2, r3
 8008c48:	d32c      	bcc.n	8008ca4 <quorem+0xf4>
 8008c4a:	613c      	str	r4, [r7, #16]
 8008c4c:	4638      	mov	r0, r7
 8008c4e:	f001 f9a5 	bl	8009f9c <__mcmp>
 8008c52:	2800      	cmp	r0, #0
 8008c54:	db22      	blt.n	8008c9c <quorem+0xec>
 8008c56:	3601      	adds	r6, #1
 8008c58:	4629      	mov	r1, r5
 8008c5a:	2000      	movs	r0, #0
 8008c5c:	f858 2b04 	ldr.w	r2, [r8], #4
 8008c60:	f8d1 c000 	ldr.w	ip, [r1]
 8008c64:	b293      	uxth	r3, r2
 8008c66:	1ac3      	subs	r3, r0, r3
 8008c68:	0c12      	lsrs	r2, r2, #16
 8008c6a:	fa13 f38c 	uxtah	r3, r3, ip
 8008c6e:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8008c72:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008c76:	b29b      	uxth	r3, r3
 8008c78:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008c7c:	45c1      	cmp	r9, r8
 8008c7e:	f841 3b04 	str.w	r3, [r1], #4
 8008c82:	ea4f 4022 	mov.w	r0, r2, asr #16
 8008c86:	d2e9      	bcs.n	8008c5c <quorem+0xac>
 8008c88:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008c8c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008c90:	b922      	cbnz	r2, 8008c9c <quorem+0xec>
 8008c92:	3b04      	subs	r3, #4
 8008c94:	429d      	cmp	r5, r3
 8008c96:	461a      	mov	r2, r3
 8008c98:	d30a      	bcc.n	8008cb0 <quorem+0x100>
 8008c9a:	613c      	str	r4, [r7, #16]
 8008c9c:	4630      	mov	r0, r6
 8008c9e:	b003      	add	sp, #12
 8008ca0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ca4:	6812      	ldr	r2, [r2, #0]
 8008ca6:	3b04      	subs	r3, #4
 8008ca8:	2a00      	cmp	r2, #0
 8008caa:	d1ce      	bne.n	8008c4a <quorem+0x9a>
 8008cac:	3c01      	subs	r4, #1
 8008cae:	e7c9      	b.n	8008c44 <quorem+0x94>
 8008cb0:	6812      	ldr	r2, [r2, #0]
 8008cb2:	3b04      	subs	r3, #4
 8008cb4:	2a00      	cmp	r2, #0
 8008cb6:	d1f0      	bne.n	8008c9a <quorem+0xea>
 8008cb8:	3c01      	subs	r4, #1
 8008cba:	e7eb      	b.n	8008c94 <quorem+0xe4>
 8008cbc:	2000      	movs	r0, #0
 8008cbe:	e7ee      	b.n	8008c9e <quorem+0xee>

08008cc0 <_dtoa_r>:
 8008cc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008cc4:	ed2d 8b04 	vpush	{d8-d9}
 8008cc8:	69c5      	ldr	r5, [r0, #28]
 8008cca:	b093      	sub	sp, #76	; 0x4c
 8008ccc:	ed8d 0b02 	vstr	d0, [sp, #8]
 8008cd0:	ec57 6b10 	vmov	r6, r7, d0
 8008cd4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008cd8:	9107      	str	r1, [sp, #28]
 8008cda:	4604      	mov	r4, r0
 8008cdc:	920a      	str	r2, [sp, #40]	; 0x28
 8008cde:	930d      	str	r3, [sp, #52]	; 0x34
 8008ce0:	b975      	cbnz	r5, 8008d00 <_dtoa_r+0x40>
 8008ce2:	2010      	movs	r0, #16
 8008ce4:	f000 fe2a 	bl	800993c <malloc>
 8008ce8:	4602      	mov	r2, r0
 8008cea:	61e0      	str	r0, [r4, #28]
 8008cec:	b920      	cbnz	r0, 8008cf8 <_dtoa_r+0x38>
 8008cee:	4bae      	ldr	r3, [pc, #696]	; (8008fa8 <_dtoa_r+0x2e8>)
 8008cf0:	21ef      	movs	r1, #239	; 0xef
 8008cf2:	48ae      	ldr	r0, [pc, #696]	; (8008fac <_dtoa_r+0x2ec>)
 8008cf4:	f001 fcf8 	bl	800a6e8 <__assert_func>
 8008cf8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008cfc:	6005      	str	r5, [r0, #0]
 8008cfe:	60c5      	str	r5, [r0, #12]
 8008d00:	69e3      	ldr	r3, [r4, #28]
 8008d02:	6819      	ldr	r1, [r3, #0]
 8008d04:	b151      	cbz	r1, 8008d1c <_dtoa_r+0x5c>
 8008d06:	685a      	ldr	r2, [r3, #4]
 8008d08:	604a      	str	r2, [r1, #4]
 8008d0a:	2301      	movs	r3, #1
 8008d0c:	4093      	lsls	r3, r2
 8008d0e:	608b      	str	r3, [r1, #8]
 8008d10:	4620      	mov	r0, r4
 8008d12:	f000 ff07 	bl	8009b24 <_Bfree>
 8008d16:	69e3      	ldr	r3, [r4, #28]
 8008d18:	2200      	movs	r2, #0
 8008d1a:	601a      	str	r2, [r3, #0]
 8008d1c:	1e3b      	subs	r3, r7, #0
 8008d1e:	bfbb      	ittet	lt
 8008d20:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8008d24:	9303      	strlt	r3, [sp, #12]
 8008d26:	2300      	movge	r3, #0
 8008d28:	2201      	movlt	r2, #1
 8008d2a:	bfac      	ite	ge
 8008d2c:	f8c8 3000 	strge.w	r3, [r8]
 8008d30:	f8c8 2000 	strlt.w	r2, [r8]
 8008d34:	4b9e      	ldr	r3, [pc, #632]	; (8008fb0 <_dtoa_r+0x2f0>)
 8008d36:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8008d3a:	ea33 0308 	bics.w	r3, r3, r8
 8008d3e:	d11b      	bne.n	8008d78 <_dtoa_r+0xb8>
 8008d40:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008d42:	f242 730f 	movw	r3, #9999	; 0x270f
 8008d46:	6013      	str	r3, [r2, #0]
 8008d48:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8008d4c:	4333      	orrs	r3, r6
 8008d4e:	f000 8593 	beq.w	8009878 <_dtoa_r+0xbb8>
 8008d52:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008d54:	b963      	cbnz	r3, 8008d70 <_dtoa_r+0xb0>
 8008d56:	4b97      	ldr	r3, [pc, #604]	; (8008fb4 <_dtoa_r+0x2f4>)
 8008d58:	e027      	b.n	8008daa <_dtoa_r+0xea>
 8008d5a:	4b97      	ldr	r3, [pc, #604]	; (8008fb8 <_dtoa_r+0x2f8>)
 8008d5c:	9300      	str	r3, [sp, #0]
 8008d5e:	3308      	adds	r3, #8
 8008d60:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008d62:	6013      	str	r3, [r2, #0]
 8008d64:	9800      	ldr	r0, [sp, #0]
 8008d66:	b013      	add	sp, #76	; 0x4c
 8008d68:	ecbd 8b04 	vpop	{d8-d9}
 8008d6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d70:	4b90      	ldr	r3, [pc, #576]	; (8008fb4 <_dtoa_r+0x2f4>)
 8008d72:	9300      	str	r3, [sp, #0]
 8008d74:	3303      	adds	r3, #3
 8008d76:	e7f3      	b.n	8008d60 <_dtoa_r+0xa0>
 8008d78:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008d7c:	2200      	movs	r2, #0
 8008d7e:	ec51 0b17 	vmov	r0, r1, d7
 8008d82:	eeb0 8a47 	vmov.f32	s16, s14
 8008d86:	eef0 8a67 	vmov.f32	s17, s15
 8008d8a:	2300      	movs	r3, #0
 8008d8c:	f7f7 fe9c 	bl	8000ac8 <__aeabi_dcmpeq>
 8008d90:	4681      	mov	r9, r0
 8008d92:	b160      	cbz	r0, 8008dae <_dtoa_r+0xee>
 8008d94:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008d96:	2301      	movs	r3, #1
 8008d98:	6013      	str	r3, [r2, #0]
 8008d9a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	f000 8568 	beq.w	8009872 <_dtoa_r+0xbb2>
 8008da2:	4b86      	ldr	r3, [pc, #536]	; (8008fbc <_dtoa_r+0x2fc>)
 8008da4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008da6:	6013      	str	r3, [r2, #0]
 8008da8:	3b01      	subs	r3, #1
 8008daa:	9300      	str	r3, [sp, #0]
 8008dac:	e7da      	b.n	8008d64 <_dtoa_r+0xa4>
 8008dae:	aa10      	add	r2, sp, #64	; 0x40
 8008db0:	a911      	add	r1, sp, #68	; 0x44
 8008db2:	4620      	mov	r0, r4
 8008db4:	eeb0 0a48 	vmov.f32	s0, s16
 8008db8:	eef0 0a68 	vmov.f32	s1, s17
 8008dbc:	f001 f994 	bl	800a0e8 <__d2b>
 8008dc0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8008dc4:	4682      	mov	sl, r0
 8008dc6:	2d00      	cmp	r5, #0
 8008dc8:	d07f      	beq.n	8008eca <_dtoa_r+0x20a>
 8008dca:	ee18 3a90 	vmov	r3, s17
 8008dce:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008dd2:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8008dd6:	ec51 0b18 	vmov	r0, r1, d8
 8008dda:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8008dde:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008de2:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8008de6:	4619      	mov	r1, r3
 8008de8:	2200      	movs	r2, #0
 8008dea:	4b75      	ldr	r3, [pc, #468]	; (8008fc0 <_dtoa_r+0x300>)
 8008dec:	f7f7 fa4c 	bl	8000288 <__aeabi_dsub>
 8008df0:	a367      	add	r3, pc, #412	; (adr r3, 8008f90 <_dtoa_r+0x2d0>)
 8008df2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008df6:	f7f7 fbff 	bl	80005f8 <__aeabi_dmul>
 8008dfa:	a367      	add	r3, pc, #412	; (adr r3, 8008f98 <_dtoa_r+0x2d8>)
 8008dfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e00:	f7f7 fa44 	bl	800028c <__adddf3>
 8008e04:	4606      	mov	r6, r0
 8008e06:	4628      	mov	r0, r5
 8008e08:	460f      	mov	r7, r1
 8008e0a:	f7f7 fb8b 	bl	8000524 <__aeabi_i2d>
 8008e0e:	a364      	add	r3, pc, #400	; (adr r3, 8008fa0 <_dtoa_r+0x2e0>)
 8008e10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e14:	f7f7 fbf0 	bl	80005f8 <__aeabi_dmul>
 8008e18:	4602      	mov	r2, r0
 8008e1a:	460b      	mov	r3, r1
 8008e1c:	4630      	mov	r0, r6
 8008e1e:	4639      	mov	r1, r7
 8008e20:	f7f7 fa34 	bl	800028c <__adddf3>
 8008e24:	4606      	mov	r6, r0
 8008e26:	460f      	mov	r7, r1
 8008e28:	f7f7 fe96 	bl	8000b58 <__aeabi_d2iz>
 8008e2c:	2200      	movs	r2, #0
 8008e2e:	4683      	mov	fp, r0
 8008e30:	2300      	movs	r3, #0
 8008e32:	4630      	mov	r0, r6
 8008e34:	4639      	mov	r1, r7
 8008e36:	f7f7 fe51 	bl	8000adc <__aeabi_dcmplt>
 8008e3a:	b148      	cbz	r0, 8008e50 <_dtoa_r+0x190>
 8008e3c:	4658      	mov	r0, fp
 8008e3e:	f7f7 fb71 	bl	8000524 <__aeabi_i2d>
 8008e42:	4632      	mov	r2, r6
 8008e44:	463b      	mov	r3, r7
 8008e46:	f7f7 fe3f 	bl	8000ac8 <__aeabi_dcmpeq>
 8008e4a:	b908      	cbnz	r0, 8008e50 <_dtoa_r+0x190>
 8008e4c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008e50:	f1bb 0f16 	cmp.w	fp, #22
 8008e54:	d857      	bhi.n	8008f06 <_dtoa_r+0x246>
 8008e56:	4b5b      	ldr	r3, [pc, #364]	; (8008fc4 <_dtoa_r+0x304>)
 8008e58:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8008e5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e60:	ec51 0b18 	vmov	r0, r1, d8
 8008e64:	f7f7 fe3a 	bl	8000adc <__aeabi_dcmplt>
 8008e68:	2800      	cmp	r0, #0
 8008e6a:	d04e      	beq.n	8008f0a <_dtoa_r+0x24a>
 8008e6c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008e70:	2300      	movs	r3, #0
 8008e72:	930c      	str	r3, [sp, #48]	; 0x30
 8008e74:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008e76:	1b5b      	subs	r3, r3, r5
 8008e78:	1e5a      	subs	r2, r3, #1
 8008e7a:	bf45      	ittet	mi
 8008e7c:	f1c3 0301 	rsbmi	r3, r3, #1
 8008e80:	9305      	strmi	r3, [sp, #20]
 8008e82:	2300      	movpl	r3, #0
 8008e84:	2300      	movmi	r3, #0
 8008e86:	9206      	str	r2, [sp, #24]
 8008e88:	bf54      	ite	pl
 8008e8a:	9305      	strpl	r3, [sp, #20]
 8008e8c:	9306      	strmi	r3, [sp, #24]
 8008e8e:	f1bb 0f00 	cmp.w	fp, #0
 8008e92:	db3c      	blt.n	8008f0e <_dtoa_r+0x24e>
 8008e94:	9b06      	ldr	r3, [sp, #24]
 8008e96:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8008e9a:	445b      	add	r3, fp
 8008e9c:	9306      	str	r3, [sp, #24]
 8008e9e:	2300      	movs	r3, #0
 8008ea0:	9308      	str	r3, [sp, #32]
 8008ea2:	9b07      	ldr	r3, [sp, #28]
 8008ea4:	2b09      	cmp	r3, #9
 8008ea6:	d868      	bhi.n	8008f7a <_dtoa_r+0x2ba>
 8008ea8:	2b05      	cmp	r3, #5
 8008eaa:	bfc4      	itt	gt
 8008eac:	3b04      	subgt	r3, #4
 8008eae:	9307      	strgt	r3, [sp, #28]
 8008eb0:	9b07      	ldr	r3, [sp, #28]
 8008eb2:	f1a3 0302 	sub.w	r3, r3, #2
 8008eb6:	bfcc      	ite	gt
 8008eb8:	2500      	movgt	r5, #0
 8008eba:	2501      	movle	r5, #1
 8008ebc:	2b03      	cmp	r3, #3
 8008ebe:	f200 8085 	bhi.w	8008fcc <_dtoa_r+0x30c>
 8008ec2:	e8df f003 	tbb	[pc, r3]
 8008ec6:	3b2e      	.short	0x3b2e
 8008ec8:	5839      	.short	0x5839
 8008eca:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8008ece:	441d      	add	r5, r3
 8008ed0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8008ed4:	2b20      	cmp	r3, #32
 8008ed6:	bfc1      	itttt	gt
 8008ed8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008edc:	fa08 f803 	lslgt.w	r8, r8, r3
 8008ee0:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8008ee4:	fa26 f303 	lsrgt.w	r3, r6, r3
 8008ee8:	bfd6      	itet	le
 8008eea:	f1c3 0320 	rsble	r3, r3, #32
 8008eee:	ea48 0003 	orrgt.w	r0, r8, r3
 8008ef2:	fa06 f003 	lslle.w	r0, r6, r3
 8008ef6:	f7f7 fb05 	bl	8000504 <__aeabi_ui2d>
 8008efa:	2201      	movs	r2, #1
 8008efc:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8008f00:	3d01      	subs	r5, #1
 8008f02:	920e      	str	r2, [sp, #56]	; 0x38
 8008f04:	e76f      	b.n	8008de6 <_dtoa_r+0x126>
 8008f06:	2301      	movs	r3, #1
 8008f08:	e7b3      	b.n	8008e72 <_dtoa_r+0x1b2>
 8008f0a:	900c      	str	r0, [sp, #48]	; 0x30
 8008f0c:	e7b2      	b.n	8008e74 <_dtoa_r+0x1b4>
 8008f0e:	9b05      	ldr	r3, [sp, #20]
 8008f10:	eba3 030b 	sub.w	r3, r3, fp
 8008f14:	9305      	str	r3, [sp, #20]
 8008f16:	f1cb 0300 	rsb	r3, fp, #0
 8008f1a:	9308      	str	r3, [sp, #32]
 8008f1c:	2300      	movs	r3, #0
 8008f1e:	930b      	str	r3, [sp, #44]	; 0x2c
 8008f20:	e7bf      	b.n	8008ea2 <_dtoa_r+0x1e2>
 8008f22:	2300      	movs	r3, #0
 8008f24:	9309      	str	r3, [sp, #36]	; 0x24
 8008f26:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	dc52      	bgt.n	8008fd2 <_dtoa_r+0x312>
 8008f2c:	2301      	movs	r3, #1
 8008f2e:	9301      	str	r3, [sp, #4]
 8008f30:	9304      	str	r3, [sp, #16]
 8008f32:	461a      	mov	r2, r3
 8008f34:	920a      	str	r2, [sp, #40]	; 0x28
 8008f36:	e00b      	b.n	8008f50 <_dtoa_r+0x290>
 8008f38:	2301      	movs	r3, #1
 8008f3a:	e7f3      	b.n	8008f24 <_dtoa_r+0x264>
 8008f3c:	2300      	movs	r3, #0
 8008f3e:	9309      	str	r3, [sp, #36]	; 0x24
 8008f40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008f42:	445b      	add	r3, fp
 8008f44:	9301      	str	r3, [sp, #4]
 8008f46:	3301      	adds	r3, #1
 8008f48:	2b01      	cmp	r3, #1
 8008f4a:	9304      	str	r3, [sp, #16]
 8008f4c:	bfb8      	it	lt
 8008f4e:	2301      	movlt	r3, #1
 8008f50:	69e0      	ldr	r0, [r4, #28]
 8008f52:	2100      	movs	r1, #0
 8008f54:	2204      	movs	r2, #4
 8008f56:	f102 0614 	add.w	r6, r2, #20
 8008f5a:	429e      	cmp	r6, r3
 8008f5c:	d93d      	bls.n	8008fda <_dtoa_r+0x31a>
 8008f5e:	6041      	str	r1, [r0, #4]
 8008f60:	4620      	mov	r0, r4
 8008f62:	f000 fd9f 	bl	8009aa4 <_Balloc>
 8008f66:	9000      	str	r0, [sp, #0]
 8008f68:	2800      	cmp	r0, #0
 8008f6a:	d139      	bne.n	8008fe0 <_dtoa_r+0x320>
 8008f6c:	4b16      	ldr	r3, [pc, #88]	; (8008fc8 <_dtoa_r+0x308>)
 8008f6e:	4602      	mov	r2, r0
 8008f70:	f240 11af 	movw	r1, #431	; 0x1af
 8008f74:	e6bd      	b.n	8008cf2 <_dtoa_r+0x32>
 8008f76:	2301      	movs	r3, #1
 8008f78:	e7e1      	b.n	8008f3e <_dtoa_r+0x27e>
 8008f7a:	2501      	movs	r5, #1
 8008f7c:	2300      	movs	r3, #0
 8008f7e:	9307      	str	r3, [sp, #28]
 8008f80:	9509      	str	r5, [sp, #36]	; 0x24
 8008f82:	f04f 33ff 	mov.w	r3, #4294967295
 8008f86:	9301      	str	r3, [sp, #4]
 8008f88:	9304      	str	r3, [sp, #16]
 8008f8a:	2200      	movs	r2, #0
 8008f8c:	2312      	movs	r3, #18
 8008f8e:	e7d1      	b.n	8008f34 <_dtoa_r+0x274>
 8008f90:	636f4361 	.word	0x636f4361
 8008f94:	3fd287a7 	.word	0x3fd287a7
 8008f98:	8b60c8b3 	.word	0x8b60c8b3
 8008f9c:	3fc68a28 	.word	0x3fc68a28
 8008fa0:	509f79fb 	.word	0x509f79fb
 8008fa4:	3fd34413 	.word	0x3fd34413
 8008fa8:	0800aa45 	.word	0x0800aa45
 8008fac:	0800aa5c 	.word	0x0800aa5c
 8008fb0:	7ff00000 	.word	0x7ff00000
 8008fb4:	0800aa41 	.word	0x0800aa41
 8008fb8:	0800aa38 	.word	0x0800aa38
 8008fbc:	0800aa15 	.word	0x0800aa15
 8008fc0:	3ff80000 	.word	0x3ff80000
 8008fc4:	0800ab48 	.word	0x0800ab48
 8008fc8:	0800aab4 	.word	0x0800aab4
 8008fcc:	2301      	movs	r3, #1
 8008fce:	9309      	str	r3, [sp, #36]	; 0x24
 8008fd0:	e7d7      	b.n	8008f82 <_dtoa_r+0x2c2>
 8008fd2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008fd4:	9301      	str	r3, [sp, #4]
 8008fd6:	9304      	str	r3, [sp, #16]
 8008fd8:	e7ba      	b.n	8008f50 <_dtoa_r+0x290>
 8008fda:	3101      	adds	r1, #1
 8008fdc:	0052      	lsls	r2, r2, #1
 8008fde:	e7ba      	b.n	8008f56 <_dtoa_r+0x296>
 8008fe0:	69e3      	ldr	r3, [r4, #28]
 8008fe2:	9a00      	ldr	r2, [sp, #0]
 8008fe4:	601a      	str	r2, [r3, #0]
 8008fe6:	9b04      	ldr	r3, [sp, #16]
 8008fe8:	2b0e      	cmp	r3, #14
 8008fea:	f200 80a8 	bhi.w	800913e <_dtoa_r+0x47e>
 8008fee:	2d00      	cmp	r5, #0
 8008ff0:	f000 80a5 	beq.w	800913e <_dtoa_r+0x47e>
 8008ff4:	f1bb 0f00 	cmp.w	fp, #0
 8008ff8:	dd38      	ble.n	800906c <_dtoa_r+0x3ac>
 8008ffa:	4bc0      	ldr	r3, [pc, #768]	; (80092fc <_dtoa_r+0x63c>)
 8008ffc:	f00b 020f 	and.w	r2, fp, #15
 8009000:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009004:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8009008:	e9d3 6700 	ldrd	r6, r7, [r3]
 800900c:	ea4f 182b 	mov.w	r8, fp, asr #4
 8009010:	d019      	beq.n	8009046 <_dtoa_r+0x386>
 8009012:	4bbb      	ldr	r3, [pc, #748]	; (8009300 <_dtoa_r+0x640>)
 8009014:	ec51 0b18 	vmov	r0, r1, d8
 8009018:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800901c:	f7f7 fc16 	bl	800084c <__aeabi_ddiv>
 8009020:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009024:	f008 080f 	and.w	r8, r8, #15
 8009028:	2503      	movs	r5, #3
 800902a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8009300 <_dtoa_r+0x640>
 800902e:	f1b8 0f00 	cmp.w	r8, #0
 8009032:	d10a      	bne.n	800904a <_dtoa_r+0x38a>
 8009034:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009038:	4632      	mov	r2, r6
 800903a:	463b      	mov	r3, r7
 800903c:	f7f7 fc06 	bl	800084c <__aeabi_ddiv>
 8009040:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009044:	e02b      	b.n	800909e <_dtoa_r+0x3de>
 8009046:	2502      	movs	r5, #2
 8009048:	e7ef      	b.n	800902a <_dtoa_r+0x36a>
 800904a:	f018 0f01 	tst.w	r8, #1
 800904e:	d008      	beq.n	8009062 <_dtoa_r+0x3a2>
 8009050:	4630      	mov	r0, r6
 8009052:	4639      	mov	r1, r7
 8009054:	e9d9 2300 	ldrd	r2, r3, [r9]
 8009058:	f7f7 face 	bl	80005f8 <__aeabi_dmul>
 800905c:	3501      	adds	r5, #1
 800905e:	4606      	mov	r6, r0
 8009060:	460f      	mov	r7, r1
 8009062:	ea4f 0868 	mov.w	r8, r8, asr #1
 8009066:	f109 0908 	add.w	r9, r9, #8
 800906a:	e7e0      	b.n	800902e <_dtoa_r+0x36e>
 800906c:	f000 809f 	beq.w	80091ae <_dtoa_r+0x4ee>
 8009070:	f1cb 0600 	rsb	r6, fp, #0
 8009074:	4ba1      	ldr	r3, [pc, #644]	; (80092fc <_dtoa_r+0x63c>)
 8009076:	4fa2      	ldr	r7, [pc, #648]	; (8009300 <_dtoa_r+0x640>)
 8009078:	f006 020f 	and.w	r2, r6, #15
 800907c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009080:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009084:	ec51 0b18 	vmov	r0, r1, d8
 8009088:	f7f7 fab6 	bl	80005f8 <__aeabi_dmul>
 800908c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009090:	1136      	asrs	r6, r6, #4
 8009092:	2300      	movs	r3, #0
 8009094:	2502      	movs	r5, #2
 8009096:	2e00      	cmp	r6, #0
 8009098:	d17e      	bne.n	8009198 <_dtoa_r+0x4d8>
 800909a:	2b00      	cmp	r3, #0
 800909c:	d1d0      	bne.n	8009040 <_dtoa_r+0x380>
 800909e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80090a0:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	f000 8084 	beq.w	80091b2 <_dtoa_r+0x4f2>
 80090aa:	4b96      	ldr	r3, [pc, #600]	; (8009304 <_dtoa_r+0x644>)
 80090ac:	2200      	movs	r2, #0
 80090ae:	4640      	mov	r0, r8
 80090b0:	4649      	mov	r1, r9
 80090b2:	f7f7 fd13 	bl	8000adc <__aeabi_dcmplt>
 80090b6:	2800      	cmp	r0, #0
 80090b8:	d07b      	beq.n	80091b2 <_dtoa_r+0x4f2>
 80090ba:	9b04      	ldr	r3, [sp, #16]
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d078      	beq.n	80091b2 <_dtoa_r+0x4f2>
 80090c0:	9b01      	ldr	r3, [sp, #4]
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	dd39      	ble.n	800913a <_dtoa_r+0x47a>
 80090c6:	4b90      	ldr	r3, [pc, #576]	; (8009308 <_dtoa_r+0x648>)
 80090c8:	2200      	movs	r2, #0
 80090ca:	4640      	mov	r0, r8
 80090cc:	4649      	mov	r1, r9
 80090ce:	f7f7 fa93 	bl	80005f8 <__aeabi_dmul>
 80090d2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80090d6:	9e01      	ldr	r6, [sp, #4]
 80090d8:	f10b 37ff 	add.w	r7, fp, #4294967295
 80090dc:	3501      	adds	r5, #1
 80090de:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80090e2:	4628      	mov	r0, r5
 80090e4:	f7f7 fa1e 	bl	8000524 <__aeabi_i2d>
 80090e8:	4642      	mov	r2, r8
 80090ea:	464b      	mov	r3, r9
 80090ec:	f7f7 fa84 	bl	80005f8 <__aeabi_dmul>
 80090f0:	4b86      	ldr	r3, [pc, #536]	; (800930c <_dtoa_r+0x64c>)
 80090f2:	2200      	movs	r2, #0
 80090f4:	f7f7 f8ca 	bl	800028c <__adddf3>
 80090f8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80090fc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009100:	9303      	str	r3, [sp, #12]
 8009102:	2e00      	cmp	r6, #0
 8009104:	d158      	bne.n	80091b8 <_dtoa_r+0x4f8>
 8009106:	4b82      	ldr	r3, [pc, #520]	; (8009310 <_dtoa_r+0x650>)
 8009108:	2200      	movs	r2, #0
 800910a:	4640      	mov	r0, r8
 800910c:	4649      	mov	r1, r9
 800910e:	f7f7 f8bb 	bl	8000288 <__aeabi_dsub>
 8009112:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009116:	4680      	mov	r8, r0
 8009118:	4689      	mov	r9, r1
 800911a:	f7f7 fcfd 	bl	8000b18 <__aeabi_dcmpgt>
 800911e:	2800      	cmp	r0, #0
 8009120:	f040 8296 	bne.w	8009650 <_dtoa_r+0x990>
 8009124:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8009128:	4640      	mov	r0, r8
 800912a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800912e:	4649      	mov	r1, r9
 8009130:	f7f7 fcd4 	bl	8000adc <__aeabi_dcmplt>
 8009134:	2800      	cmp	r0, #0
 8009136:	f040 8289 	bne.w	800964c <_dtoa_r+0x98c>
 800913a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800913e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009140:	2b00      	cmp	r3, #0
 8009142:	f2c0 814e 	blt.w	80093e2 <_dtoa_r+0x722>
 8009146:	f1bb 0f0e 	cmp.w	fp, #14
 800914a:	f300 814a 	bgt.w	80093e2 <_dtoa_r+0x722>
 800914e:	4b6b      	ldr	r3, [pc, #428]	; (80092fc <_dtoa_r+0x63c>)
 8009150:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8009154:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009158:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800915a:	2b00      	cmp	r3, #0
 800915c:	f280 80dc 	bge.w	8009318 <_dtoa_r+0x658>
 8009160:	9b04      	ldr	r3, [sp, #16]
 8009162:	2b00      	cmp	r3, #0
 8009164:	f300 80d8 	bgt.w	8009318 <_dtoa_r+0x658>
 8009168:	f040 826f 	bne.w	800964a <_dtoa_r+0x98a>
 800916c:	4b68      	ldr	r3, [pc, #416]	; (8009310 <_dtoa_r+0x650>)
 800916e:	2200      	movs	r2, #0
 8009170:	4640      	mov	r0, r8
 8009172:	4649      	mov	r1, r9
 8009174:	f7f7 fa40 	bl	80005f8 <__aeabi_dmul>
 8009178:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800917c:	f7f7 fcc2 	bl	8000b04 <__aeabi_dcmpge>
 8009180:	9e04      	ldr	r6, [sp, #16]
 8009182:	4637      	mov	r7, r6
 8009184:	2800      	cmp	r0, #0
 8009186:	f040 8245 	bne.w	8009614 <_dtoa_r+0x954>
 800918a:	9d00      	ldr	r5, [sp, #0]
 800918c:	2331      	movs	r3, #49	; 0x31
 800918e:	f805 3b01 	strb.w	r3, [r5], #1
 8009192:	f10b 0b01 	add.w	fp, fp, #1
 8009196:	e241      	b.n	800961c <_dtoa_r+0x95c>
 8009198:	07f2      	lsls	r2, r6, #31
 800919a:	d505      	bpl.n	80091a8 <_dtoa_r+0x4e8>
 800919c:	e9d7 2300 	ldrd	r2, r3, [r7]
 80091a0:	f7f7 fa2a 	bl	80005f8 <__aeabi_dmul>
 80091a4:	3501      	adds	r5, #1
 80091a6:	2301      	movs	r3, #1
 80091a8:	1076      	asrs	r6, r6, #1
 80091aa:	3708      	adds	r7, #8
 80091ac:	e773      	b.n	8009096 <_dtoa_r+0x3d6>
 80091ae:	2502      	movs	r5, #2
 80091b0:	e775      	b.n	800909e <_dtoa_r+0x3de>
 80091b2:	9e04      	ldr	r6, [sp, #16]
 80091b4:	465f      	mov	r7, fp
 80091b6:	e792      	b.n	80090de <_dtoa_r+0x41e>
 80091b8:	9900      	ldr	r1, [sp, #0]
 80091ba:	4b50      	ldr	r3, [pc, #320]	; (80092fc <_dtoa_r+0x63c>)
 80091bc:	ed9d 7b02 	vldr	d7, [sp, #8]
 80091c0:	4431      	add	r1, r6
 80091c2:	9102      	str	r1, [sp, #8]
 80091c4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80091c6:	eeb0 9a47 	vmov.f32	s18, s14
 80091ca:	eef0 9a67 	vmov.f32	s19, s15
 80091ce:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80091d2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80091d6:	2900      	cmp	r1, #0
 80091d8:	d044      	beq.n	8009264 <_dtoa_r+0x5a4>
 80091da:	494e      	ldr	r1, [pc, #312]	; (8009314 <_dtoa_r+0x654>)
 80091dc:	2000      	movs	r0, #0
 80091de:	f7f7 fb35 	bl	800084c <__aeabi_ddiv>
 80091e2:	ec53 2b19 	vmov	r2, r3, d9
 80091e6:	f7f7 f84f 	bl	8000288 <__aeabi_dsub>
 80091ea:	9d00      	ldr	r5, [sp, #0]
 80091ec:	ec41 0b19 	vmov	d9, r0, r1
 80091f0:	4649      	mov	r1, r9
 80091f2:	4640      	mov	r0, r8
 80091f4:	f7f7 fcb0 	bl	8000b58 <__aeabi_d2iz>
 80091f8:	4606      	mov	r6, r0
 80091fa:	f7f7 f993 	bl	8000524 <__aeabi_i2d>
 80091fe:	4602      	mov	r2, r0
 8009200:	460b      	mov	r3, r1
 8009202:	4640      	mov	r0, r8
 8009204:	4649      	mov	r1, r9
 8009206:	f7f7 f83f 	bl	8000288 <__aeabi_dsub>
 800920a:	3630      	adds	r6, #48	; 0x30
 800920c:	f805 6b01 	strb.w	r6, [r5], #1
 8009210:	ec53 2b19 	vmov	r2, r3, d9
 8009214:	4680      	mov	r8, r0
 8009216:	4689      	mov	r9, r1
 8009218:	f7f7 fc60 	bl	8000adc <__aeabi_dcmplt>
 800921c:	2800      	cmp	r0, #0
 800921e:	d164      	bne.n	80092ea <_dtoa_r+0x62a>
 8009220:	4642      	mov	r2, r8
 8009222:	464b      	mov	r3, r9
 8009224:	4937      	ldr	r1, [pc, #220]	; (8009304 <_dtoa_r+0x644>)
 8009226:	2000      	movs	r0, #0
 8009228:	f7f7 f82e 	bl	8000288 <__aeabi_dsub>
 800922c:	ec53 2b19 	vmov	r2, r3, d9
 8009230:	f7f7 fc54 	bl	8000adc <__aeabi_dcmplt>
 8009234:	2800      	cmp	r0, #0
 8009236:	f040 80b6 	bne.w	80093a6 <_dtoa_r+0x6e6>
 800923a:	9b02      	ldr	r3, [sp, #8]
 800923c:	429d      	cmp	r5, r3
 800923e:	f43f af7c 	beq.w	800913a <_dtoa_r+0x47a>
 8009242:	4b31      	ldr	r3, [pc, #196]	; (8009308 <_dtoa_r+0x648>)
 8009244:	ec51 0b19 	vmov	r0, r1, d9
 8009248:	2200      	movs	r2, #0
 800924a:	f7f7 f9d5 	bl	80005f8 <__aeabi_dmul>
 800924e:	4b2e      	ldr	r3, [pc, #184]	; (8009308 <_dtoa_r+0x648>)
 8009250:	ec41 0b19 	vmov	d9, r0, r1
 8009254:	2200      	movs	r2, #0
 8009256:	4640      	mov	r0, r8
 8009258:	4649      	mov	r1, r9
 800925a:	f7f7 f9cd 	bl	80005f8 <__aeabi_dmul>
 800925e:	4680      	mov	r8, r0
 8009260:	4689      	mov	r9, r1
 8009262:	e7c5      	b.n	80091f0 <_dtoa_r+0x530>
 8009264:	ec51 0b17 	vmov	r0, r1, d7
 8009268:	f7f7 f9c6 	bl	80005f8 <__aeabi_dmul>
 800926c:	9b02      	ldr	r3, [sp, #8]
 800926e:	9d00      	ldr	r5, [sp, #0]
 8009270:	930f      	str	r3, [sp, #60]	; 0x3c
 8009272:	ec41 0b19 	vmov	d9, r0, r1
 8009276:	4649      	mov	r1, r9
 8009278:	4640      	mov	r0, r8
 800927a:	f7f7 fc6d 	bl	8000b58 <__aeabi_d2iz>
 800927e:	4606      	mov	r6, r0
 8009280:	f7f7 f950 	bl	8000524 <__aeabi_i2d>
 8009284:	3630      	adds	r6, #48	; 0x30
 8009286:	4602      	mov	r2, r0
 8009288:	460b      	mov	r3, r1
 800928a:	4640      	mov	r0, r8
 800928c:	4649      	mov	r1, r9
 800928e:	f7f6 fffb 	bl	8000288 <__aeabi_dsub>
 8009292:	f805 6b01 	strb.w	r6, [r5], #1
 8009296:	9b02      	ldr	r3, [sp, #8]
 8009298:	429d      	cmp	r5, r3
 800929a:	4680      	mov	r8, r0
 800929c:	4689      	mov	r9, r1
 800929e:	f04f 0200 	mov.w	r2, #0
 80092a2:	d124      	bne.n	80092ee <_dtoa_r+0x62e>
 80092a4:	4b1b      	ldr	r3, [pc, #108]	; (8009314 <_dtoa_r+0x654>)
 80092a6:	ec51 0b19 	vmov	r0, r1, d9
 80092aa:	f7f6 ffef 	bl	800028c <__adddf3>
 80092ae:	4602      	mov	r2, r0
 80092b0:	460b      	mov	r3, r1
 80092b2:	4640      	mov	r0, r8
 80092b4:	4649      	mov	r1, r9
 80092b6:	f7f7 fc2f 	bl	8000b18 <__aeabi_dcmpgt>
 80092ba:	2800      	cmp	r0, #0
 80092bc:	d173      	bne.n	80093a6 <_dtoa_r+0x6e6>
 80092be:	ec53 2b19 	vmov	r2, r3, d9
 80092c2:	4914      	ldr	r1, [pc, #80]	; (8009314 <_dtoa_r+0x654>)
 80092c4:	2000      	movs	r0, #0
 80092c6:	f7f6 ffdf 	bl	8000288 <__aeabi_dsub>
 80092ca:	4602      	mov	r2, r0
 80092cc:	460b      	mov	r3, r1
 80092ce:	4640      	mov	r0, r8
 80092d0:	4649      	mov	r1, r9
 80092d2:	f7f7 fc03 	bl	8000adc <__aeabi_dcmplt>
 80092d6:	2800      	cmp	r0, #0
 80092d8:	f43f af2f 	beq.w	800913a <_dtoa_r+0x47a>
 80092dc:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80092de:	1e6b      	subs	r3, r5, #1
 80092e0:	930f      	str	r3, [sp, #60]	; 0x3c
 80092e2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80092e6:	2b30      	cmp	r3, #48	; 0x30
 80092e8:	d0f8      	beq.n	80092dc <_dtoa_r+0x61c>
 80092ea:	46bb      	mov	fp, r7
 80092ec:	e04a      	b.n	8009384 <_dtoa_r+0x6c4>
 80092ee:	4b06      	ldr	r3, [pc, #24]	; (8009308 <_dtoa_r+0x648>)
 80092f0:	f7f7 f982 	bl	80005f8 <__aeabi_dmul>
 80092f4:	4680      	mov	r8, r0
 80092f6:	4689      	mov	r9, r1
 80092f8:	e7bd      	b.n	8009276 <_dtoa_r+0x5b6>
 80092fa:	bf00      	nop
 80092fc:	0800ab48 	.word	0x0800ab48
 8009300:	0800ab20 	.word	0x0800ab20
 8009304:	3ff00000 	.word	0x3ff00000
 8009308:	40240000 	.word	0x40240000
 800930c:	401c0000 	.word	0x401c0000
 8009310:	40140000 	.word	0x40140000
 8009314:	3fe00000 	.word	0x3fe00000
 8009318:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800931c:	9d00      	ldr	r5, [sp, #0]
 800931e:	4642      	mov	r2, r8
 8009320:	464b      	mov	r3, r9
 8009322:	4630      	mov	r0, r6
 8009324:	4639      	mov	r1, r7
 8009326:	f7f7 fa91 	bl	800084c <__aeabi_ddiv>
 800932a:	f7f7 fc15 	bl	8000b58 <__aeabi_d2iz>
 800932e:	9001      	str	r0, [sp, #4]
 8009330:	f7f7 f8f8 	bl	8000524 <__aeabi_i2d>
 8009334:	4642      	mov	r2, r8
 8009336:	464b      	mov	r3, r9
 8009338:	f7f7 f95e 	bl	80005f8 <__aeabi_dmul>
 800933c:	4602      	mov	r2, r0
 800933e:	460b      	mov	r3, r1
 8009340:	4630      	mov	r0, r6
 8009342:	4639      	mov	r1, r7
 8009344:	f7f6 ffa0 	bl	8000288 <__aeabi_dsub>
 8009348:	9e01      	ldr	r6, [sp, #4]
 800934a:	9f04      	ldr	r7, [sp, #16]
 800934c:	3630      	adds	r6, #48	; 0x30
 800934e:	f805 6b01 	strb.w	r6, [r5], #1
 8009352:	9e00      	ldr	r6, [sp, #0]
 8009354:	1bae      	subs	r6, r5, r6
 8009356:	42b7      	cmp	r7, r6
 8009358:	4602      	mov	r2, r0
 800935a:	460b      	mov	r3, r1
 800935c:	d134      	bne.n	80093c8 <_dtoa_r+0x708>
 800935e:	f7f6 ff95 	bl	800028c <__adddf3>
 8009362:	4642      	mov	r2, r8
 8009364:	464b      	mov	r3, r9
 8009366:	4606      	mov	r6, r0
 8009368:	460f      	mov	r7, r1
 800936a:	f7f7 fbd5 	bl	8000b18 <__aeabi_dcmpgt>
 800936e:	b9c8      	cbnz	r0, 80093a4 <_dtoa_r+0x6e4>
 8009370:	4642      	mov	r2, r8
 8009372:	464b      	mov	r3, r9
 8009374:	4630      	mov	r0, r6
 8009376:	4639      	mov	r1, r7
 8009378:	f7f7 fba6 	bl	8000ac8 <__aeabi_dcmpeq>
 800937c:	b110      	cbz	r0, 8009384 <_dtoa_r+0x6c4>
 800937e:	9b01      	ldr	r3, [sp, #4]
 8009380:	07db      	lsls	r3, r3, #31
 8009382:	d40f      	bmi.n	80093a4 <_dtoa_r+0x6e4>
 8009384:	4651      	mov	r1, sl
 8009386:	4620      	mov	r0, r4
 8009388:	f000 fbcc 	bl	8009b24 <_Bfree>
 800938c:	2300      	movs	r3, #0
 800938e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009390:	702b      	strb	r3, [r5, #0]
 8009392:	f10b 0301 	add.w	r3, fp, #1
 8009396:	6013      	str	r3, [r2, #0]
 8009398:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800939a:	2b00      	cmp	r3, #0
 800939c:	f43f ace2 	beq.w	8008d64 <_dtoa_r+0xa4>
 80093a0:	601d      	str	r5, [r3, #0]
 80093a2:	e4df      	b.n	8008d64 <_dtoa_r+0xa4>
 80093a4:	465f      	mov	r7, fp
 80093a6:	462b      	mov	r3, r5
 80093a8:	461d      	mov	r5, r3
 80093aa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80093ae:	2a39      	cmp	r2, #57	; 0x39
 80093b0:	d106      	bne.n	80093c0 <_dtoa_r+0x700>
 80093b2:	9a00      	ldr	r2, [sp, #0]
 80093b4:	429a      	cmp	r2, r3
 80093b6:	d1f7      	bne.n	80093a8 <_dtoa_r+0x6e8>
 80093b8:	9900      	ldr	r1, [sp, #0]
 80093ba:	2230      	movs	r2, #48	; 0x30
 80093bc:	3701      	adds	r7, #1
 80093be:	700a      	strb	r2, [r1, #0]
 80093c0:	781a      	ldrb	r2, [r3, #0]
 80093c2:	3201      	adds	r2, #1
 80093c4:	701a      	strb	r2, [r3, #0]
 80093c6:	e790      	b.n	80092ea <_dtoa_r+0x62a>
 80093c8:	4ba3      	ldr	r3, [pc, #652]	; (8009658 <_dtoa_r+0x998>)
 80093ca:	2200      	movs	r2, #0
 80093cc:	f7f7 f914 	bl	80005f8 <__aeabi_dmul>
 80093d0:	2200      	movs	r2, #0
 80093d2:	2300      	movs	r3, #0
 80093d4:	4606      	mov	r6, r0
 80093d6:	460f      	mov	r7, r1
 80093d8:	f7f7 fb76 	bl	8000ac8 <__aeabi_dcmpeq>
 80093dc:	2800      	cmp	r0, #0
 80093de:	d09e      	beq.n	800931e <_dtoa_r+0x65e>
 80093e0:	e7d0      	b.n	8009384 <_dtoa_r+0x6c4>
 80093e2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80093e4:	2a00      	cmp	r2, #0
 80093e6:	f000 80ca 	beq.w	800957e <_dtoa_r+0x8be>
 80093ea:	9a07      	ldr	r2, [sp, #28]
 80093ec:	2a01      	cmp	r2, #1
 80093ee:	f300 80ad 	bgt.w	800954c <_dtoa_r+0x88c>
 80093f2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80093f4:	2a00      	cmp	r2, #0
 80093f6:	f000 80a5 	beq.w	8009544 <_dtoa_r+0x884>
 80093fa:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80093fe:	9e08      	ldr	r6, [sp, #32]
 8009400:	9d05      	ldr	r5, [sp, #20]
 8009402:	9a05      	ldr	r2, [sp, #20]
 8009404:	441a      	add	r2, r3
 8009406:	9205      	str	r2, [sp, #20]
 8009408:	9a06      	ldr	r2, [sp, #24]
 800940a:	2101      	movs	r1, #1
 800940c:	441a      	add	r2, r3
 800940e:	4620      	mov	r0, r4
 8009410:	9206      	str	r2, [sp, #24]
 8009412:	f000 fc3d 	bl	8009c90 <__i2b>
 8009416:	4607      	mov	r7, r0
 8009418:	b165      	cbz	r5, 8009434 <_dtoa_r+0x774>
 800941a:	9b06      	ldr	r3, [sp, #24]
 800941c:	2b00      	cmp	r3, #0
 800941e:	dd09      	ble.n	8009434 <_dtoa_r+0x774>
 8009420:	42ab      	cmp	r3, r5
 8009422:	9a05      	ldr	r2, [sp, #20]
 8009424:	bfa8      	it	ge
 8009426:	462b      	movge	r3, r5
 8009428:	1ad2      	subs	r2, r2, r3
 800942a:	9205      	str	r2, [sp, #20]
 800942c:	9a06      	ldr	r2, [sp, #24]
 800942e:	1aed      	subs	r5, r5, r3
 8009430:	1ad3      	subs	r3, r2, r3
 8009432:	9306      	str	r3, [sp, #24]
 8009434:	9b08      	ldr	r3, [sp, #32]
 8009436:	b1f3      	cbz	r3, 8009476 <_dtoa_r+0x7b6>
 8009438:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800943a:	2b00      	cmp	r3, #0
 800943c:	f000 80a3 	beq.w	8009586 <_dtoa_r+0x8c6>
 8009440:	2e00      	cmp	r6, #0
 8009442:	dd10      	ble.n	8009466 <_dtoa_r+0x7a6>
 8009444:	4639      	mov	r1, r7
 8009446:	4632      	mov	r2, r6
 8009448:	4620      	mov	r0, r4
 800944a:	f000 fce1 	bl	8009e10 <__pow5mult>
 800944e:	4652      	mov	r2, sl
 8009450:	4601      	mov	r1, r0
 8009452:	4607      	mov	r7, r0
 8009454:	4620      	mov	r0, r4
 8009456:	f000 fc31 	bl	8009cbc <__multiply>
 800945a:	4651      	mov	r1, sl
 800945c:	4680      	mov	r8, r0
 800945e:	4620      	mov	r0, r4
 8009460:	f000 fb60 	bl	8009b24 <_Bfree>
 8009464:	46c2      	mov	sl, r8
 8009466:	9b08      	ldr	r3, [sp, #32]
 8009468:	1b9a      	subs	r2, r3, r6
 800946a:	d004      	beq.n	8009476 <_dtoa_r+0x7b6>
 800946c:	4651      	mov	r1, sl
 800946e:	4620      	mov	r0, r4
 8009470:	f000 fcce 	bl	8009e10 <__pow5mult>
 8009474:	4682      	mov	sl, r0
 8009476:	2101      	movs	r1, #1
 8009478:	4620      	mov	r0, r4
 800947a:	f000 fc09 	bl	8009c90 <__i2b>
 800947e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009480:	2b00      	cmp	r3, #0
 8009482:	4606      	mov	r6, r0
 8009484:	f340 8081 	ble.w	800958a <_dtoa_r+0x8ca>
 8009488:	461a      	mov	r2, r3
 800948a:	4601      	mov	r1, r0
 800948c:	4620      	mov	r0, r4
 800948e:	f000 fcbf 	bl	8009e10 <__pow5mult>
 8009492:	9b07      	ldr	r3, [sp, #28]
 8009494:	2b01      	cmp	r3, #1
 8009496:	4606      	mov	r6, r0
 8009498:	dd7a      	ble.n	8009590 <_dtoa_r+0x8d0>
 800949a:	f04f 0800 	mov.w	r8, #0
 800949e:	6933      	ldr	r3, [r6, #16]
 80094a0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80094a4:	6918      	ldr	r0, [r3, #16]
 80094a6:	f000 fba5 	bl	8009bf4 <__hi0bits>
 80094aa:	f1c0 0020 	rsb	r0, r0, #32
 80094ae:	9b06      	ldr	r3, [sp, #24]
 80094b0:	4418      	add	r0, r3
 80094b2:	f010 001f 	ands.w	r0, r0, #31
 80094b6:	f000 8094 	beq.w	80095e2 <_dtoa_r+0x922>
 80094ba:	f1c0 0320 	rsb	r3, r0, #32
 80094be:	2b04      	cmp	r3, #4
 80094c0:	f340 8085 	ble.w	80095ce <_dtoa_r+0x90e>
 80094c4:	9b05      	ldr	r3, [sp, #20]
 80094c6:	f1c0 001c 	rsb	r0, r0, #28
 80094ca:	4403      	add	r3, r0
 80094cc:	9305      	str	r3, [sp, #20]
 80094ce:	9b06      	ldr	r3, [sp, #24]
 80094d0:	4403      	add	r3, r0
 80094d2:	4405      	add	r5, r0
 80094d4:	9306      	str	r3, [sp, #24]
 80094d6:	9b05      	ldr	r3, [sp, #20]
 80094d8:	2b00      	cmp	r3, #0
 80094da:	dd05      	ble.n	80094e8 <_dtoa_r+0x828>
 80094dc:	4651      	mov	r1, sl
 80094de:	461a      	mov	r2, r3
 80094e0:	4620      	mov	r0, r4
 80094e2:	f000 fcef 	bl	8009ec4 <__lshift>
 80094e6:	4682      	mov	sl, r0
 80094e8:	9b06      	ldr	r3, [sp, #24]
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	dd05      	ble.n	80094fa <_dtoa_r+0x83a>
 80094ee:	4631      	mov	r1, r6
 80094f0:	461a      	mov	r2, r3
 80094f2:	4620      	mov	r0, r4
 80094f4:	f000 fce6 	bl	8009ec4 <__lshift>
 80094f8:	4606      	mov	r6, r0
 80094fa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d072      	beq.n	80095e6 <_dtoa_r+0x926>
 8009500:	4631      	mov	r1, r6
 8009502:	4650      	mov	r0, sl
 8009504:	f000 fd4a 	bl	8009f9c <__mcmp>
 8009508:	2800      	cmp	r0, #0
 800950a:	da6c      	bge.n	80095e6 <_dtoa_r+0x926>
 800950c:	2300      	movs	r3, #0
 800950e:	4651      	mov	r1, sl
 8009510:	220a      	movs	r2, #10
 8009512:	4620      	mov	r0, r4
 8009514:	f000 fb28 	bl	8009b68 <__multadd>
 8009518:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800951a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800951e:	4682      	mov	sl, r0
 8009520:	2b00      	cmp	r3, #0
 8009522:	f000 81b0 	beq.w	8009886 <_dtoa_r+0xbc6>
 8009526:	2300      	movs	r3, #0
 8009528:	4639      	mov	r1, r7
 800952a:	220a      	movs	r2, #10
 800952c:	4620      	mov	r0, r4
 800952e:	f000 fb1b 	bl	8009b68 <__multadd>
 8009532:	9b01      	ldr	r3, [sp, #4]
 8009534:	2b00      	cmp	r3, #0
 8009536:	4607      	mov	r7, r0
 8009538:	f300 8096 	bgt.w	8009668 <_dtoa_r+0x9a8>
 800953c:	9b07      	ldr	r3, [sp, #28]
 800953e:	2b02      	cmp	r3, #2
 8009540:	dc59      	bgt.n	80095f6 <_dtoa_r+0x936>
 8009542:	e091      	b.n	8009668 <_dtoa_r+0x9a8>
 8009544:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009546:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800954a:	e758      	b.n	80093fe <_dtoa_r+0x73e>
 800954c:	9b04      	ldr	r3, [sp, #16]
 800954e:	1e5e      	subs	r6, r3, #1
 8009550:	9b08      	ldr	r3, [sp, #32]
 8009552:	42b3      	cmp	r3, r6
 8009554:	bfbf      	itttt	lt
 8009556:	9b08      	ldrlt	r3, [sp, #32]
 8009558:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800955a:	9608      	strlt	r6, [sp, #32]
 800955c:	1af3      	sublt	r3, r6, r3
 800955e:	bfb4      	ite	lt
 8009560:	18d2      	addlt	r2, r2, r3
 8009562:	1b9e      	subge	r6, r3, r6
 8009564:	9b04      	ldr	r3, [sp, #16]
 8009566:	bfbc      	itt	lt
 8009568:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800956a:	2600      	movlt	r6, #0
 800956c:	2b00      	cmp	r3, #0
 800956e:	bfb7      	itett	lt
 8009570:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8009574:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8009578:	1a9d      	sublt	r5, r3, r2
 800957a:	2300      	movlt	r3, #0
 800957c:	e741      	b.n	8009402 <_dtoa_r+0x742>
 800957e:	9e08      	ldr	r6, [sp, #32]
 8009580:	9d05      	ldr	r5, [sp, #20]
 8009582:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8009584:	e748      	b.n	8009418 <_dtoa_r+0x758>
 8009586:	9a08      	ldr	r2, [sp, #32]
 8009588:	e770      	b.n	800946c <_dtoa_r+0x7ac>
 800958a:	9b07      	ldr	r3, [sp, #28]
 800958c:	2b01      	cmp	r3, #1
 800958e:	dc19      	bgt.n	80095c4 <_dtoa_r+0x904>
 8009590:	9b02      	ldr	r3, [sp, #8]
 8009592:	b9bb      	cbnz	r3, 80095c4 <_dtoa_r+0x904>
 8009594:	9b03      	ldr	r3, [sp, #12]
 8009596:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800959a:	b99b      	cbnz	r3, 80095c4 <_dtoa_r+0x904>
 800959c:	9b03      	ldr	r3, [sp, #12]
 800959e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80095a2:	0d1b      	lsrs	r3, r3, #20
 80095a4:	051b      	lsls	r3, r3, #20
 80095a6:	b183      	cbz	r3, 80095ca <_dtoa_r+0x90a>
 80095a8:	9b05      	ldr	r3, [sp, #20]
 80095aa:	3301      	adds	r3, #1
 80095ac:	9305      	str	r3, [sp, #20]
 80095ae:	9b06      	ldr	r3, [sp, #24]
 80095b0:	3301      	adds	r3, #1
 80095b2:	9306      	str	r3, [sp, #24]
 80095b4:	f04f 0801 	mov.w	r8, #1
 80095b8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	f47f af6f 	bne.w	800949e <_dtoa_r+0x7de>
 80095c0:	2001      	movs	r0, #1
 80095c2:	e774      	b.n	80094ae <_dtoa_r+0x7ee>
 80095c4:	f04f 0800 	mov.w	r8, #0
 80095c8:	e7f6      	b.n	80095b8 <_dtoa_r+0x8f8>
 80095ca:	4698      	mov	r8, r3
 80095cc:	e7f4      	b.n	80095b8 <_dtoa_r+0x8f8>
 80095ce:	d082      	beq.n	80094d6 <_dtoa_r+0x816>
 80095d0:	9a05      	ldr	r2, [sp, #20]
 80095d2:	331c      	adds	r3, #28
 80095d4:	441a      	add	r2, r3
 80095d6:	9205      	str	r2, [sp, #20]
 80095d8:	9a06      	ldr	r2, [sp, #24]
 80095da:	441a      	add	r2, r3
 80095dc:	441d      	add	r5, r3
 80095de:	9206      	str	r2, [sp, #24]
 80095e0:	e779      	b.n	80094d6 <_dtoa_r+0x816>
 80095e2:	4603      	mov	r3, r0
 80095e4:	e7f4      	b.n	80095d0 <_dtoa_r+0x910>
 80095e6:	9b04      	ldr	r3, [sp, #16]
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	dc37      	bgt.n	800965c <_dtoa_r+0x99c>
 80095ec:	9b07      	ldr	r3, [sp, #28]
 80095ee:	2b02      	cmp	r3, #2
 80095f0:	dd34      	ble.n	800965c <_dtoa_r+0x99c>
 80095f2:	9b04      	ldr	r3, [sp, #16]
 80095f4:	9301      	str	r3, [sp, #4]
 80095f6:	9b01      	ldr	r3, [sp, #4]
 80095f8:	b963      	cbnz	r3, 8009614 <_dtoa_r+0x954>
 80095fa:	4631      	mov	r1, r6
 80095fc:	2205      	movs	r2, #5
 80095fe:	4620      	mov	r0, r4
 8009600:	f000 fab2 	bl	8009b68 <__multadd>
 8009604:	4601      	mov	r1, r0
 8009606:	4606      	mov	r6, r0
 8009608:	4650      	mov	r0, sl
 800960a:	f000 fcc7 	bl	8009f9c <__mcmp>
 800960e:	2800      	cmp	r0, #0
 8009610:	f73f adbb 	bgt.w	800918a <_dtoa_r+0x4ca>
 8009614:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009616:	9d00      	ldr	r5, [sp, #0]
 8009618:	ea6f 0b03 	mvn.w	fp, r3
 800961c:	f04f 0800 	mov.w	r8, #0
 8009620:	4631      	mov	r1, r6
 8009622:	4620      	mov	r0, r4
 8009624:	f000 fa7e 	bl	8009b24 <_Bfree>
 8009628:	2f00      	cmp	r7, #0
 800962a:	f43f aeab 	beq.w	8009384 <_dtoa_r+0x6c4>
 800962e:	f1b8 0f00 	cmp.w	r8, #0
 8009632:	d005      	beq.n	8009640 <_dtoa_r+0x980>
 8009634:	45b8      	cmp	r8, r7
 8009636:	d003      	beq.n	8009640 <_dtoa_r+0x980>
 8009638:	4641      	mov	r1, r8
 800963a:	4620      	mov	r0, r4
 800963c:	f000 fa72 	bl	8009b24 <_Bfree>
 8009640:	4639      	mov	r1, r7
 8009642:	4620      	mov	r0, r4
 8009644:	f000 fa6e 	bl	8009b24 <_Bfree>
 8009648:	e69c      	b.n	8009384 <_dtoa_r+0x6c4>
 800964a:	2600      	movs	r6, #0
 800964c:	4637      	mov	r7, r6
 800964e:	e7e1      	b.n	8009614 <_dtoa_r+0x954>
 8009650:	46bb      	mov	fp, r7
 8009652:	4637      	mov	r7, r6
 8009654:	e599      	b.n	800918a <_dtoa_r+0x4ca>
 8009656:	bf00      	nop
 8009658:	40240000 	.word	0x40240000
 800965c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800965e:	2b00      	cmp	r3, #0
 8009660:	f000 80c8 	beq.w	80097f4 <_dtoa_r+0xb34>
 8009664:	9b04      	ldr	r3, [sp, #16]
 8009666:	9301      	str	r3, [sp, #4]
 8009668:	2d00      	cmp	r5, #0
 800966a:	dd05      	ble.n	8009678 <_dtoa_r+0x9b8>
 800966c:	4639      	mov	r1, r7
 800966e:	462a      	mov	r2, r5
 8009670:	4620      	mov	r0, r4
 8009672:	f000 fc27 	bl	8009ec4 <__lshift>
 8009676:	4607      	mov	r7, r0
 8009678:	f1b8 0f00 	cmp.w	r8, #0
 800967c:	d05b      	beq.n	8009736 <_dtoa_r+0xa76>
 800967e:	6879      	ldr	r1, [r7, #4]
 8009680:	4620      	mov	r0, r4
 8009682:	f000 fa0f 	bl	8009aa4 <_Balloc>
 8009686:	4605      	mov	r5, r0
 8009688:	b928      	cbnz	r0, 8009696 <_dtoa_r+0x9d6>
 800968a:	4b83      	ldr	r3, [pc, #524]	; (8009898 <_dtoa_r+0xbd8>)
 800968c:	4602      	mov	r2, r0
 800968e:	f240 21ef 	movw	r1, #751	; 0x2ef
 8009692:	f7ff bb2e 	b.w	8008cf2 <_dtoa_r+0x32>
 8009696:	693a      	ldr	r2, [r7, #16]
 8009698:	3202      	adds	r2, #2
 800969a:	0092      	lsls	r2, r2, #2
 800969c:	f107 010c 	add.w	r1, r7, #12
 80096a0:	300c      	adds	r0, #12
 80096a2:	f001 f813 	bl	800a6cc <memcpy>
 80096a6:	2201      	movs	r2, #1
 80096a8:	4629      	mov	r1, r5
 80096aa:	4620      	mov	r0, r4
 80096ac:	f000 fc0a 	bl	8009ec4 <__lshift>
 80096b0:	9b00      	ldr	r3, [sp, #0]
 80096b2:	3301      	adds	r3, #1
 80096b4:	9304      	str	r3, [sp, #16]
 80096b6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80096ba:	4413      	add	r3, r2
 80096bc:	9308      	str	r3, [sp, #32]
 80096be:	9b02      	ldr	r3, [sp, #8]
 80096c0:	f003 0301 	and.w	r3, r3, #1
 80096c4:	46b8      	mov	r8, r7
 80096c6:	9306      	str	r3, [sp, #24]
 80096c8:	4607      	mov	r7, r0
 80096ca:	9b04      	ldr	r3, [sp, #16]
 80096cc:	4631      	mov	r1, r6
 80096ce:	3b01      	subs	r3, #1
 80096d0:	4650      	mov	r0, sl
 80096d2:	9301      	str	r3, [sp, #4]
 80096d4:	f7ff fa6c 	bl	8008bb0 <quorem>
 80096d8:	4641      	mov	r1, r8
 80096da:	9002      	str	r0, [sp, #8]
 80096dc:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80096e0:	4650      	mov	r0, sl
 80096e2:	f000 fc5b 	bl	8009f9c <__mcmp>
 80096e6:	463a      	mov	r2, r7
 80096e8:	9005      	str	r0, [sp, #20]
 80096ea:	4631      	mov	r1, r6
 80096ec:	4620      	mov	r0, r4
 80096ee:	f000 fc71 	bl	8009fd4 <__mdiff>
 80096f2:	68c2      	ldr	r2, [r0, #12]
 80096f4:	4605      	mov	r5, r0
 80096f6:	bb02      	cbnz	r2, 800973a <_dtoa_r+0xa7a>
 80096f8:	4601      	mov	r1, r0
 80096fa:	4650      	mov	r0, sl
 80096fc:	f000 fc4e 	bl	8009f9c <__mcmp>
 8009700:	4602      	mov	r2, r0
 8009702:	4629      	mov	r1, r5
 8009704:	4620      	mov	r0, r4
 8009706:	9209      	str	r2, [sp, #36]	; 0x24
 8009708:	f000 fa0c 	bl	8009b24 <_Bfree>
 800970c:	9b07      	ldr	r3, [sp, #28]
 800970e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009710:	9d04      	ldr	r5, [sp, #16]
 8009712:	ea43 0102 	orr.w	r1, r3, r2
 8009716:	9b06      	ldr	r3, [sp, #24]
 8009718:	4319      	orrs	r1, r3
 800971a:	d110      	bne.n	800973e <_dtoa_r+0xa7e>
 800971c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8009720:	d029      	beq.n	8009776 <_dtoa_r+0xab6>
 8009722:	9b05      	ldr	r3, [sp, #20]
 8009724:	2b00      	cmp	r3, #0
 8009726:	dd02      	ble.n	800972e <_dtoa_r+0xa6e>
 8009728:	9b02      	ldr	r3, [sp, #8]
 800972a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800972e:	9b01      	ldr	r3, [sp, #4]
 8009730:	f883 9000 	strb.w	r9, [r3]
 8009734:	e774      	b.n	8009620 <_dtoa_r+0x960>
 8009736:	4638      	mov	r0, r7
 8009738:	e7ba      	b.n	80096b0 <_dtoa_r+0x9f0>
 800973a:	2201      	movs	r2, #1
 800973c:	e7e1      	b.n	8009702 <_dtoa_r+0xa42>
 800973e:	9b05      	ldr	r3, [sp, #20]
 8009740:	2b00      	cmp	r3, #0
 8009742:	db04      	blt.n	800974e <_dtoa_r+0xa8e>
 8009744:	9907      	ldr	r1, [sp, #28]
 8009746:	430b      	orrs	r3, r1
 8009748:	9906      	ldr	r1, [sp, #24]
 800974a:	430b      	orrs	r3, r1
 800974c:	d120      	bne.n	8009790 <_dtoa_r+0xad0>
 800974e:	2a00      	cmp	r2, #0
 8009750:	dded      	ble.n	800972e <_dtoa_r+0xa6e>
 8009752:	4651      	mov	r1, sl
 8009754:	2201      	movs	r2, #1
 8009756:	4620      	mov	r0, r4
 8009758:	f000 fbb4 	bl	8009ec4 <__lshift>
 800975c:	4631      	mov	r1, r6
 800975e:	4682      	mov	sl, r0
 8009760:	f000 fc1c 	bl	8009f9c <__mcmp>
 8009764:	2800      	cmp	r0, #0
 8009766:	dc03      	bgt.n	8009770 <_dtoa_r+0xab0>
 8009768:	d1e1      	bne.n	800972e <_dtoa_r+0xa6e>
 800976a:	f019 0f01 	tst.w	r9, #1
 800976e:	d0de      	beq.n	800972e <_dtoa_r+0xa6e>
 8009770:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8009774:	d1d8      	bne.n	8009728 <_dtoa_r+0xa68>
 8009776:	9a01      	ldr	r2, [sp, #4]
 8009778:	2339      	movs	r3, #57	; 0x39
 800977a:	7013      	strb	r3, [r2, #0]
 800977c:	462b      	mov	r3, r5
 800977e:	461d      	mov	r5, r3
 8009780:	3b01      	subs	r3, #1
 8009782:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8009786:	2a39      	cmp	r2, #57	; 0x39
 8009788:	d06c      	beq.n	8009864 <_dtoa_r+0xba4>
 800978a:	3201      	adds	r2, #1
 800978c:	701a      	strb	r2, [r3, #0]
 800978e:	e747      	b.n	8009620 <_dtoa_r+0x960>
 8009790:	2a00      	cmp	r2, #0
 8009792:	dd07      	ble.n	80097a4 <_dtoa_r+0xae4>
 8009794:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8009798:	d0ed      	beq.n	8009776 <_dtoa_r+0xab6>
 800979a:	9a01      	ldr	r2, [sp, #4]
 800979c:	f109 0301 	add.w	r3, r9, #1
 80097a0:	7013      	strb	r3, [r2, #0]
 80097a2:	e73d      	b.n	8009620 <_dtoa_r+0x960>
 80097a4:	9b04      	ldr	r3, [sp, #16]
 80097a6:	9a08      	ldr	r2, [sp, #32]
 80097a8:	f803 9c01 	strb.w	r9, [r3, #-1]
 80097ac:	4293      	cmp	r3, r2
 80097ae:	d043      	beq.n	8009838 <_dtoa_r+0xb78>
 80097b0:	4651      	mov	r1, sl
 80097b2:	2300      	movs	r3, #0
 80097b4:	220a      	movs	r2, #10
 80097b6:	4620      	mov	r0, r4
 80097b8:	f000 f9d6 	bl	8009b68 <__multadd>
 80097bc:	45b8      	cmp	r8, r7
 80097be:	4682      	mov	sl, r0
 80097c0:	f04f 0300 	mov.w	r3, #0
 80097c4:	f04f 020a 	mov.w	r2, #10
 80097c8:	4641      	mov	r1, r8
 80097ca:	4620      	mov	r0, r4
 80097cc:	d107      	bne.n	80097de <_dtoa_r+0xb1e>
 80097ce:	f000 f9cb 	bl	8009b68 <__multadd>
 80097d2:	4680      	mov	r8, r0
 80097d4:	4607      	mov	r7, r0
 80097d6:	9b04      	ldr	r3, [sp, #16]
 80097d8:	3301      	adds	r3, #1
 80097da:	9304      	str	r3, [sp, #16]
 80097dc:	e775      	b.n	80096ca <_dtoa_r+0xa0a>
 80097de:	f000 f9c3 	bl	8009b68 <__multadd>
 80097e2:	4639      	mov	r1, r7
 80097e4:	4680      	mov	r8, r0
 80097e6:	2300      	movs	r3, #0
 80097e8:	220a      	movs	r2, #10
 80097ea:	4620      	mov	r0, r4
 80097ec:	f000 f9bc 	bl	8009b68 <__multadd>
 80097f0:	4607      	mov	r7, r0
 80097f2:	e7f0      	b.n	80097d6 <_dtoa_r+0xb16>
 80097f4:	9b04      	ldr	r3, [sp, #16]
 80097f6:	9301      	str	r3, [sp, #4]
 80097f8:	9d00      	ldr	r5, [sp, #0]
 80097fa:	4631      	mov	r1, r6
 80097fc:	4650      	mov	r0, sl
 80097fe:	f7ff f9d7 	bl	8008bb0 <quorem>
 8009802:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8009806:	9b00      	ldr	r3, [sp, #0]
 8009808:	f805 9b01 	strb.w	r9, [r5], #1
 800980c:	1aea      	subs	r2, r5, r3
 800980e:	9b01      	ldr	r3, [sp, #4]
 8009810:	4293      	cmp	r3, r2
 8009812:	dd07      	ble.n	8009824 <_dtoa_r+0xb64>
 8009814:	4651      	mov	r1, sl
 8009816:	2300      	movs	r3, #0
 8009818:	220a      	movs	r2, #10
 800981a:	4620      	mov	r0, r4
 800981c:	f000 f9a4 	bl	8009b68 <__multadd>
 8009820:	4682      	mov	sl, r0
 8009822:	e7ea      	b.n	80097fa <_dtoa_r+0xb3a>
 8009824:	9b01      	ldr	r3, [sp, #4]
 8009826:	2b00      	cmp	r3, #0
 8009828:	bfc8      	it	gt
 800982a:	461d      	movgt	r5, r3
 800982c:	9b00      	ldr	r3, [sp, #0]
 800982e:	bfd8      	it	le
 8009830:	2501      	movle	r5, #1
 8009832:	441d      	add	r5, r3
 8009834:	f04f 0800 	mov.w	r8, #0
 8009838:	4651      	mov	r1, sl
 800983a:	2201      	movs	r2, #1
 800983c:	4620      	mov	r0, r4
 800983e:	f000 fb41 	bl	8009ec4 <__lshift>
 8009842:	4631      	mov	r1, r6
 8009844:	4682      	mov	sl, r0
 8009846:	f000 fba9 	bl	8009f9c <__mcmp>
 800984a:	2800      	cmp	r0, #0
 800984c:	dc96      	bgt.n	800977c <_dtoa_r+0xabc>
 800984e:	d102      	bne.n	8009856 <_dtoa_r+0xb96>
 8009850:	f019 0f01 	tst.w	r9, #1
 8009854:	d192      	bne.n	800977c <_dtoa_r+0xabc>
 8009856:	462b      	mov	r3, r5
 8009858:	461d      	mov	r5, r3
 800985a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800985e:	2a30      	cmp	r2, #48	; 0x30
 8009860:	d0fa      	beq.n	8009858 <_dtoa_r+0xb98>
 8009862:	e6dd      	b.n	8009620 <_dtoa_r+0x960>
 8009864:	9a00      	ldr	r2, [sp, #0]
 8009866:	429a      	cmp	r2, r3
 8009868:	d189      	bne.n	800977e <_dtoa_r+0xabe>
 800986a:	f10b 0b01 	add.w	fp, fp, #1
 800986e:	2331      	movs	r3, #49	; 0x31
 8009870:	e796      	b.n	80097a0 <_dtoa_r+0xae0>
 8009872:	4b0a      	ldr	r3, [pc, #40]	; (800989c <_dtoa_r+0xbdc>)
 8009874:	f7ff ba99 	b.w	8008daa <_dtoa_r+0xea>
 8009878:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800987a:	2b00      	cmp	r3, #0
 800987c:	f47f aa6d 	bne.w	8008d5a <_dtoa_r+0x9a>
 8009880:	4b07      	ldr	r3, [pc, #28]	; (80098a0 <_dtoa_r+0xbe0>)
 8009882:	f7ff ba92 	b.w	8008daa <_dtoa_r+0xea>
 8009886:	9b01      	ldr	r3, [sp, #4]
 8009888:	2b00      	cmp	r3, #0
 800988a:	dcb5      	bgt.n	80097f8 <_dtoa_r+0xb38>
 800988c:	9b07      	ldr	r3, [sp, #28]
 800988e:	2b02      	cmp	r3, #2
 8009890:	f73f aeb1 	bgt.w	80095f6 <_dtoa_r+0x936>
 8009894:	e7b0      	b.n	80097f8 <_dtoa_r+0xb38>
 8009896:	bf00      	nop
 8009898:	0800aab4 	.word	0x0800aab4
 800989c:	0800aa14 	.word	0x0800aa14
 80098a0:	0800aa38 	.word	0x0800aa38

080098a4 <_free_r>:
 80098a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80098a6:	2900      	cmp	r1, #0
 80098a8:	d044      	beq.n	8009934 <_free_r+0x90>
 80098aa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80098ae:	9001      	str	r0, [sp, #4]
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	f1a1 0404 	sub.w	r4, r1, #4
 80098b6:	bfb8      	it	lt
 80098b8:	18e4      	addlt	r4, r4, r3
 80098ba:	f000 f8e7 	bl	8009a8c <__malloc_lock>
 80098be:	4a1e      	ldr	r2, [pc, #120]	; (8009938 <_free_r+0x94>)
 80098c0:	9801      	ldr	r0, [sp, #4]
 80098c2:	6813      	ldr	r3, [r2, #0]
 80098c4:	b933      	cbnz	r3, 80098d4 <_free_r+0x30>
 80098c6:	6063      	str	r3, [r4, #4]
 80098c8:	6014      	str	r4, [r2, #0]
 80098ca:	b003      	add	sp, #12
 80098cc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80098d0:	f000 b8e2 	b.w	8009a98 <__malloc_unlock>
 80098d4:	42a3      	cmp	r3, r4
 80098d6:	d908      	bls.n	80098ea <_free_r+0x46>
 80098d8:	6825      	ldr	r5, [r4, #0]
 80098da:	1961      	adds	r1, r4, r5
 80098dc:	428b      	cmp	r3, r1
 80098de:	bf01      	itttt	eq
 80098e0:	6819      	ldreq	r1, [r3, #0]
 80098e2:	685b      	ldreq	r3, [r3, #4]
 80098e4:	1949      	addeq	r1, r1, r5
 80098e6:	6021      	streq	r1, [r4, #0]
 80098e8:	e7ed      	b.n	80098c6 <_free_r+0x22>
 80098ea:	461a      	mov	r2, r3
 80098ec:	685b      	ldr	r3, [r3, #4]
 80098ee:	b10b      	cbz	r3, 80098f4 <_free_r+0x50>
 80098f0:	42a3      	cmp	r3, r4
 80098f2:	d9fa      	bls.n	80098ea <_free_r+0x46>
 80098f4:	6811      	ldr	r1, [r2, #0]
 80098f6:	1855      	adds	r5, r2, r1
 80098f8:	42a5      	cmp	r5, r4
 80098fa:	d10b      	bne.n	8009914 <_free_r+0x70>
 80098fc:	6824      	ldr	r4, [r4, #0]
 80098fe:	4421      	add	r1, r4
 8009900:	1854      	adds	r4, r2, r1
 8009902:	42a3      	cmp	r3, r4
 8009904:	6011      	str	r1, [r2, #0]
 8009906:	d1e0      	bne.n	80098ca <_free_r+0x26>
 8009908:	681c      	ldr	r4, [r3, #0]
 800990a:	685b      	ldr	r3, [r3, #4]
 800990c:	6053      	str	r3, [r2, #4]
 800990e:	440c      	add	r4, r1
 8009910:	6014      	str	r4, [r2, #0]
 8009912:	e7da      	b.n	80098ca <_free_r+0x26>
 8009914:	d902      	bls.n	800991c <_free_r+0x78>
 8009916:	230c      	movs	r3, #12
 8009918:	6003      	str	r3, [r0, #0]
 800991a:	e7d6      	b.n	80098ca <_free_r+0x26>
 800991c:	6825      	ldr	r5, [r4, #0]
 800991e:	1961      	adds	r1, r4, r5
 8009920:	428b      	cmp	r3, r1
 8009922:	bf04      	itt	eq
 8009924:	6819      	ldreq	r1, [r3, #0]
 8009926:	685b      	ldreq	r3, [r3, #4]
 8009928:	6063      	str	r3, [r4, #4]
 800992a:	bf04      	itt	eq
 800992c:	1949      	addeq	r1, r1, r5
 800992e:	6021      	streq	r1, [r4, #0]
 8009930:	6054      	str	r4, [r2, #4]
 8009932:	e7ca      	b.n	80098ca <_free_r+0x26>
 8009934:	b003      	add	sp, #12
 8009936:	bd30      	pop	{r4, r5, pc}
 8009938:	20000514 	.word	0x20000514

0800993c <malloc>:
 800993c:	4b02      	ldr	r3, [pc, #8]	; (8009948 <malloc+0xc>)
 800993e:	4601      	mov	r1, r0
 8009940:	6818      	ldr	r0, [r3, #0]
 8009942:	f000 b823 	b.w	800998c <_malloc_r>
 8009946:	bf00      	nop
 8009948:	20000064 	.word	0x20000064

0800994c <sbrk_aligned>:
 800994c:	b570      	push	{r4, r5, r6, lr}
 800994e:	4e0e      	ldr	r6, [pc, #56]	; (8009988 <sbrk_aligned+0x3c>)
 8009950:	460c      	mov	r4, r1
 8009952:	6831      	ldr	r1, [r6, #0]
 8009954:	4605      	mov	r5, r0
 8009956:	b911      	cbnz	r1, 800995e <sbrk_aligned+0x12>
 8009958:	f000 fea8 	bl	800a6ac <_sbrk_r>
 800995c:	6030      	str	r0, [r6, #0]
 800995e:	4621      	mov	r1, r4
 8009960:	4628      	mov	r0, r5
 8009962:	f000 fea3 	bl	800a6ac <_sbrk_r>
 8009966:	1c43      	adds	r3, r0, #1
 8009968:	d00a      	beq.n	8009980 <sbrk_aligned+0x34>
 800996a:	1cc4      	adds	r4, r0, #3
 800996c:	f024 0403 	bic.w	r4, r4, #3
 8009970:	42a0      	cmp	r0, r4
 8009972:	d007      	beq.n	8009984 <sbrk_aligned+0x38>
 8009974:	1a21      	subs	r1, r4, r0
 8009976:	4628      	mov	r0, r5
 8009978:	f000 fe98 	bl	800a6ac <_sbrk_r>
 800997c:	3001      	adds	r0, #1
 800997e:	d101      	bne.n	8009984 <sbrk_aligned+0x38>
 8009980:	f04f 34ff 	mov.w	r4, #4294967295
 8009984:	4620      	mov	r0, r4
 8009986:	bd70      	pop	{r4, r5, r6, pc}
 8009988:	20000518 	.word	0x20000518

0800998c <_malloc_r>:
 800998c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009990:	1ccd      	adds	r5, r1, #3
 8009992:	f025 0503 	bic.w	r5, r5, #3
 8009996:	3508      	adds	r5, #8
 8009998:	2d0c      	cmp	r5, #12
 800999a:	bf38      	it	cc
 800999c:	250c      	movcc	r5, #12
 800999e:	2d00      	cmp	r5, #0
 80099a0:	4607      	mov	r7, r0
 80099a2:	db01      	blt.n	80099a8 <_malloc_r+0x1c>
 80099a4:	42a9      	cmp	r1, r5
 80099a6:	d905      	bls.n	80099b4 <_malloc_r+0x28>
 80099a8:	230c      	movs	r3, #12
 80099aa:	603b      	str	r3, [r7, #0]
 80099ac:	2600      	movs	r6, #0
 80099ae:	4630      	mov	r0, r6
 80099b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80099b4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8009a88 <_malloc_r+0xfc>
 80099b8:	f000 f868 	bl	8009a8c <__malloc_lock>
 80099bc:	f8d8 3000 	ldr.w	r3, [r8]
 80099c0:	461c      	mov	r4, r3
 80099c2:	bb5c      	cbnz	r4, 8009a1c <_malloc_r+0x90>
 80099c4:	4629      	mov	r1, r5
 80099c6:	4638      	mov	r0, r7
 80099c8:	f7ff ffc0 	bl	800994c <sbrk_aligned>
 80099cc:	1c43      	adds	r3, r0, #1
 80099ce:	4604      	mov	r4, r0
 80099d0:	d155      	bne.n	8009a7e <_malloc_r+0xf2>
 80099d2:	f8d8 4000 	ldr.w	r4, [r8]
 80099d6:	4626      	mov	r6, r4
 80099d8:	2e00      	cmp	r6, #0
 80099da:	d145      	bne.n	8009a68 <_malloc_r+0xdc>
 80099dc:	2c00      	cmp	r4, #0
 80099de:	d048      	beq.n	8009a72 <_malloc_r+0xe6>
 80099e0:	6823      	ldr	r3, [r4, #0]
 80099e2:	4631      	mov	r1, r6
 80099e4:	4638      	mov	r0, r7
 80099e6:	eb04 0903 	add.w	r9, r4, r3
 80099ea:	f000 fe5f 	bl	800a6ac <_sbrk_r>
 80099ee:	4581      	cmp	r9, r0
 80099f0:	d13f      	bne.n	8009a72 <_malloc_r+0xe6>
 80099f2:	6821      	ldr	r1, [r4, #0]
 80099f4:	1a6d      	subs	r5, r5, r1
 80099f6:	4629      	mov	r1, r5
 80099f8:	4638      	mov	r0, r7
 80099fa:	f7ff ffa7 	bl	800994c <sbrk_aligned>
 80099fe:	3001      	adds	r0, #1
 8009a00:	d037      	beq.n	8009a72 <_malloc_r+0xe6>
 8009a02:	6823      	ldr	r3, [r4, #0]
 8009a04:	442b      	add	r3, r5
 8009a06:	6023      	str	r3, [r4, #0]
 8009a08:	f8d8 3000 	ldr.w	r3, [r8]
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	d038      	beq.n	8009a82 <_malloc_r+0xf6>
 8009a10:	685a      	ldr	r2, [r3, #4]
 8009a12:	42a2      	cmp	r2, r4
 8009a14:	d12b      	bne.n	8009a6e <_malloc_r+0xe2>
 8009a16:	2200      	movs	r2, #0
 8009a18:	605a      	str	r2, [r3, #4]
 8009a1a:	e00f      	b.n	8009a3c <_malloc_r+0xb0>
 8009a1c:	6822      	ldr	r2, [r4, #0]
 8009a1e:	1b52      	subs	r2, r2, r5
 8009a20:	d41f      	bmi.n	8009a62 <_malloc_r+0xd6>
 8009a22:	2a0b      	cmp	r2, #11
 8009a24:	d917      	bls.n	8009a56 <_malloc_r+0xca>
 8009a26:	1961      	adds	r1, r4, r5
 8009a28:	42a3      	cmp	r3, r4
 8009a2a:	6025      	str	r5, [r4, #0]
 8009a2c:	bf18      	it	ne
 8009a2e:	6059      	strne	r1, [r3, #4]
 8009a30:	6863      	ldr	r3, [r4, #4]
 8009a32:	bf08      	it	eq
 8009a34:	f8c8 1000 	streq.w	r1, [r8]
 8009a38:	5162      	str	r2, [r4, r5]
 8009a3a:	604b      	str	r3, [r1, #4]
 8009a3c:	4638      	mov	r0, r7
 8009a3e:	f104 060b 	add.w	r6, r4, #11
 8009a42:	f000 f829 	bl	8009a98 <__malloc_unlock>
 8009a46:	f026 0607 	bic.w	r6, r6, #7
 8009a4a:	1d23      	adds	r3, r4, #4
 8009a4c:	1af2      	subs	r2, r6, r3
 8009a4e:	d0ae      	beq.n	80099ae <_malloc_r+0x22>
 8009a50:	1b9b      	subs	r3, r3, r6
 8009a52:	50a3      	str	r3, [r4, r2]
 8009a54:	e7ab      	b.n	80099ae <_malloc_r+0x22>
 8009a56:	42a3      	cmp	r3, r4
 8009a58:	6862      	ldr	r2, [r4, #4]
 8009a5a:	d1dd      	bne.n	8009a18 <_malloc_r+0x8c>
 8009a5c:	f8c8 2000 	str.w	r2, [r8]
 8009a60:	e7ec      	b.n	8009a3c <_malloc_r+0xb0>
 8009a62:	4623      	mov	r3, r4
 8009a64:	6864      	ldr	r4, [r4, #4]
 8009a66:	e7ac      	b.n	80099c2 <_malloc_r+0x36>
 8009a68:	4634      	mov	r4, r6
 8009a6a:	6876      	ldr	r6, [r6, #4]
 8009a6c:	e7b4      	b.n	80099d8 <_malloc_r+0x4c>
 8009a6e:	4613      	mov	r3, r2
 8009a70:	e7cc      	b.n	8009a0c <_malloc_r+0x80>
 8009a72:	230c      	movs	r3, #12
 8009a74:	603b      	str	r3, [r7, #0]
 8009a76:	4638      	mov	r0, r7
 8009a78:	f000 f80e 	bl	8009a98 <__malloc_unlock>
 8009a7c:	e797      	b.n	80099ae <_malloc_r+0x22>
 8009a7e:	6025      	str	r5, [r4, #0]
 8009a80:	e7dc      	b.n	8009a3c <_malloc_r+0xb0>
 8009a82:	605b      	str	r3, [r3, #4]
 8009a84:	deff      	udf	#255	; 0xff
 8009a86:	bf00      	nop
 8009a88:	20000514 	.word	0x20000514

08009a8c <__malloc_lock>:
 8009a8c:	4801      	ldr	r0, [pc, #4]	; (8009a94 <__malloc_lock+0x8>)
 8009a8e:	f7ff b88d 	b.w	8008bac <__retarget_lock_acquire_recursive>
 8009a92:	bf00      	nop
 8009a94:	20000510 	.word	0x20000510

08009a98 <__malloc_unlock>:
 8009a98:	4801      	ldr	r0, [pc, #4]	; (8009aa0 <__malloc_unlock+0x8>)
 8009a9a:	f7ff b888 	b.w	8008bae <__retarget_lock_release_recursive>
 8009a9e:	bf00      	nop
 8009aa0:	20000510 	.word	0x20000510

08009aa4 <_Balloc>:
 8009aa4:	b570      	push	{r4, r5, r6, lr}
 8009aa6:	69c6      	ldr	r6, [r0, #28]
 8009aa8:	4604      	mov	r4, r0
 8009aaa:	460d      	mov	r5, r1
 8009aac:	b976      	cbnz	r6, 8009acc <_Balloc+0x28>
 8009aae:	2010      	movs	r0, #16
 8009ab0:	f7ff ff44 	bl	800993c <malloc>
 8009ab4:	4602      	mov	r2, r0
 8009ab6:	61e0      	str	r0, [r4, #28]
 8009ab8:	b920      	cbnz	r0, 8009ac4 <_Balloc+0x20>
 8009aba:	4b18      	ldr	r3, [pc, #96]	; (8009b1c <_Balloc+0x78>)
 8009abc:	4818      	ldr	r0, [pc, #96]	; (8009b20 <_Balloc+0x7c>)
 8009abe:	216b      	movs	r1, #107	; 0x6b
 8009ac0:	f000 fe12 	bl	800a6e8 <__assert_func>
 8009ac4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009ac8:	6006      	str	r6, [r0, #0]
 8009aca:	60c6      	str	r6, [r0, #12]
 8009acc:	69e6      	ldr	r6, [r4, #28]
 8009ace:	68f3      	ldr	r3, [r6, #12]
 8009ad0:	b183      	cbz	r3, 8009af4 <_Balloc+0x50>
 8009ad2:	69e3      	ldr	r3, [r4, #28]
 8009ad4:	68db      	ldr	r3, [r3, #12]
 8009ad6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009ada:	b9b8      	cbnz	r0, 8009b0c <_Balloc+0x68>
 8009adc:	2101      	movs	r1, #1
 8009ade:	fa01 f605 	lsl.w	r6, r1, r5
 8009ae2:	1d72      	adds	r2, r6, #5
 8009ae4:	0092      	lsls	r2, r2, #2
 8009ae6:	4620      	mov	r0, r4
 8009ae8:	f000 fe1c 	bl	800a724 <_calloc_r>
 8009aec:	b160      	cbz	r0, 8009b08 <_Balloc+0x64>
 8009aee:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009af2:	e00e      	b.n	8009b12 <_Balloc+0x6e>
 8009af4:	2221      	movs	r2, #33	; 0x21
 8009af6:	2104      	movs	r1, #4
 8009af8:	4620      	mov	r0, r4
 8009afa:	f000 fe13 	bl	800a724 <_calloc_r>
 8009afe:	69e3      	ldr	r3, [r4, #28]
 8009b00:	60f0      	str	r0, [r6, #12]
 8009b02:	68db      	ldr	r3, [r3, #12]
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	d1e4      	bne.n	8009ad2 <_Balloc+0x2e>
 8009b08:	2000      	movs	r0, #0
 8009b0a:	bd70      	pop	{r4, r5, r6, pc}
 8009b0c:	6802      	ldr	r2, [r0, #0]
 8009b0e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009b12:	2300      	movs	r3, #0
 8009b14:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009b18:	e7f7      	b.n	8009b0a <_Balloc+0x66>
 8009b1a:	bf00      	nop
 8009b1c:	0800aa45 	.word	0x0800aa45
 8009b20:	0800aac5 	.word	0x0800aac5

08009b24 <_Bfree>:
 8009b24:	b570      	push	{r4, r5, r6, lr}
 8009b26:	69c6      	ldr	r6, [r0, #28]
 8009b28:	4605      	mov	r5, r0
 8009b2a:	460c      	mov	r4, r1
 8009b2c:	b976      	cbnz	r6, 8009b4c <_Bfree+0x28>
 8009b2e:	2010      	movs	r0, #16
 8009b30:	f7ff ff04 	bl	800993c <malloc>
 8009b34:	4602      	mov	r2, r0
 8009b36:	61e8      	str	r0, [r5, #28]
 8009b38:	b920      	cbnz	r0, 8009b44 <_Bfree+0x20>
 8009b3a:	4b09      	ldr	r3, [pc, #36]	; (8009b60 <_Bfree+0x3c>)
 8009b3c:	4809      	ldr	r0, [pc, #36]	; (8009b64 <_Bfree+0x40>)
 8009b3e:	218f      	movs	r1, #143	; 0x8f
 8009b40:	f000 fdd2 	bl	800a6e8 <__assert_func>
 8009b44:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009b48:	6006      	str	r6, [r0, #0]
 8009b4a:	60c6      	str	r6, [r0, #12]
 8009b4c:	b13c      	cbz	r4, 8009b5e <_Bfree+0x3a>
 8009b4e:	69eb      	ldr	r3, [r5, #28]
 8009b50:	6862      	ldr	r2, [r4, #4]
 8009b52:	68db      	ldr	r3, [r3, #12]
 8009b54:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009b58:	6021      	str	r1, [r4, #0]
 8009b5a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009b5e:	bd70      	pop	{r4, r5, r6, pc}
 8009b60:	0800aa45 	.word	0x0800aa45
 8009b64:	0800aac5 	.word	0x0800aac5

08009b68 <__multadd>:
 8009b68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009b6c:	690d      	ldr	r5, [r1, #16]
 8009b6e:	4607      	mov	r7, r0
 8009b70:	460c      	mov	r4, r1
 8009b72:	461e      	mov	r6, r3
 8009b74:	f101 0c14 	add.w	ip, r1, #20
 8009b78:	2000      	movs	r0, #0
 8009b7a:	f8dc 3000 	ldr.w	r3, [ip]
 8009b7e:	b299      	uxth	r1, r3
 8009b80:	fb02 6101 	mla	r1, r2, r1, r6
 8009b84:	0c1e      	lsrs	r6, r3, #16
 8009b86:	0c0b      	lsrs	r3, r1, #16
 8009b88:	fb02 3306 	mla	r3, r2, r6, r3
 8009b8c:	b289      	uxth	r1, r1
 8009b8e:	3001      	adds	r0, #1
 8009b90:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009b94:	4285      	cmp	r5, r0
 8009b96:	f84c 1b04 	str.w	r1, [ip], #4
 8009b9a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009b9e:	dcec      	bgt.n	8009b7a <__multadd+0x12>
 8009ba0:	b30e      	cbz	r6, 8009be6 <__multadd+0x7e>
 8009ba2:	68a3      	ldr	r3, [r4, #8]
 8009ba4:	42ab      	cmp	r3, r5
 8009ba6:	dc19      	bgt.n	8009bdc <__multadd+0x74>
 8009ba8:	6861      	ldr	r1, [r4, #4]
 8009baa:	4638      	mov	r0, r7
 8009bac:	3101      	adds	r1, #1
 8009bae:	f7ff ff79 	bl	8009aa4 <_Balloc>
 8009bb2:	4680      	mov	r8, r0
 8009bb4:	b928      	cbnz	r0, 8009bc2 <__multadd+0x5a>
 8009bb6:	4602      	mov	r2, r0
 8009bb8:	4b0c      	ldr	r3, [pc, #48]	; (8009bec <__multadd+0x84>)
 8009bba:	480d      	ldr	r0, [pc, #52]	; (8009bf0 <__multadd+0x88>)
 8009bbc:	21ba      	movs	r1, #186	; 0xba
 8009bbe:	f000 fd93 	bl	800a6e8 <__assert_func>
 8009bc2:	6922      	ldr	r2, [r4, #16]
 8009bc4:	3202      	adds	r2, #2
 8009bc6:	f104 010c 	add.w	r1, r4, #12
 8009bca:	0092      	lsls	r2, r2, #2
 8009bcc:	300c      	adds	r0, #12
 8009bce:	f000 fd7d 	bl	800a6cc <memcpy>
 8009bd2:	4621      	mov	r1, r4
 8009bd4:	4638      	mov	r0, r7
 8009bd6:	f7ff ffa5 	bl	8009b24 <_Bfree>
 8009bda:	4644      	mov	r4, r8
 8009bdc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009be0:	3501      	adds	r5, #1
 8009be2:	615e      	str	r6, [r3, #20]
 8009be4:	6125      	str	r5, [r4, #16]
 8009be6:	4620      	mov	r0, r4
 8009be8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009bec:	0800aab4 	.word	0x0800aab4
 8009bf0:	0800aac5 	.word	0x0800aac5

08009bf4 <__hi0bits>:
 8009bf4:	0c03      	lsrs	r3, r0, #16
 8009bf6:	041b      	lsls	r3, r3, #16
 8009bf8:	b9d3      	cbnz	r3, 8009c30 <__hi0bits+0x3c>
 8009bfa:	0400      	lsls	r0, r0, #16
 8009bfc:	2310      	movs	r3, #16
 8009bfe:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8009c02:	bf04      	itt	eq
 8009c04:	0200      	lsleq	r0, r0, #8
 8009c06:	3308      	addeq	r3, #8
 8009c08:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009c0c:	bf04      	itt	eq
 8009c0e:	0100      	lsleq	r0, r0, #4
 8009c10:	3304      	addeq	r3, #4
 8009c12:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8009c16:	bf04      	itt	eq
 8009c18:	0080      	lsleq	r0, r0, #2
 8009c1a:	3302      	addeq	r3, #2
 8009c1c:	2800      	cmp	r0, #0
 8009c1e:	db05      	blt.n	8009c2c <__hi0bits+0x38>
 8009c20:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009c24:	f103 0301 	add.w	r3, r3, #1
 8009c28:	bf08      	it	eq
 8009c2a:	2320      	moveq	r3, #32
 8009c2c:	4618      	mov	r0, r3
 8009c2e:	4770      	bx	lr
 8009c30:	2300      	movs	r3, #0
 8009c32:	e7e4      	b.n	8009bfe <__hi0bits+0xa>

08009c34 <__lo0bits>:
 8009c34:	6803      	ldr	r3, [r0, #0]
 8009c36:	f013 0207 	ands.w	r2, r3, #7
 8009c3a:	d00c      	beq.n	8009c56 <__lo0bits+0x22>
 8009c3c:	07d9      	lsls	r1, r3, #31
 8009c3e:	d422      	bmi.n	8009c86 <__lo0bits+0x52>
 8009c40:	079a      	lsls	r2, r3, #30
 8009c42:	bf49      	itett	mi
 8009c44:	085b      	lsrmi	r3, r3, #1
 8009c46:	089b      	lsrpl	r3, r3, #2
 8009c48:	6003      	strmi	r3, [r0, #0]
 8009c4a:	2201      	movmi	r2, #1
 8009c4c:	bf5c      	itt	pl
 8009c4e:	6003      	strpl	r3, [r0, #0]
 8009c50:	2202      	movpl	r2, #2
 8009c52:	4610      	mov	r0, r2
 8009c54:	4770      	bx	lr
 8009c56:	b299      	uxth	r1, r3
 8009c58:	b909      	cbnz	r1, 8009c5e <__lo0bits+0x2a>
 8009c5a:	0c1b      	lsrs	r3, r3, #16
 8009c5c:	2210      	movs	r2, #16
 8009c5e:	b2d9      	uxtb	r1, r3
 8009c60:	b909      	cbnz	r1, 8009c66 <__lo0bits+0x32>
 8009c62:	3208      	adds	r2, #8
 8009c64:	0a1b      	lsrs	r3, r3, #8
 8009c66:	0719      	lsls	r1, r3, #28
 8009c68:	bf04      	itt	eq
 8009c6a:	091b      	lsreq	r3, r3, #4
 8009c6c:	3204      	addeq	r2, #4
 8009c6e:	0799      	lsls	r1, r3, #30
 8009c70:	bf04      	itt	eq
 8009c72:	089b      	lsreq	r3, r3, #2
 8009c74:	3202      	addeq	r2, #2
 8009c76:	07d9      	lsls	r1, r3, #31
 8009c78:	d403      	bmi.n	8009c82 <__lo0bits+0x4e>
 8009c7a:	085b      	lsrs	r3, r3, #1
 8009c7c:	f102 0201 	add.w	r2, r2, #1
 8009c80:	d003      	beq.n	8009c8a <__lo0bits+0x56>
 8009c82:	6003      	str	r3, [r0, #0]
 8009c84:	e7e5      	b.n	8009c52 <__lo0bits+0x1e>
 8009c86:	2200      	movs	r2, #0
 8009c88:	e7e3      	b.n	8009c52 <__lo0bits+0x1e>
 8009c8a:	2220      	movs	r2, #32
 8009c8c:	e7e1      	b.n	8009c52 <__lo0bits+0x1e>
	...

08009c90 <__i2b>:
 8009c90:	b510      	push	{r4, lr}
 8009c92:	460c      	mov	r4, r1
 8009c94:	2101      	movs	r1, #1
 8009c96:	f7ff ff05 	bl	8009aa4 <_Balloc>
 8009c9a:	4602      	mov	r2, r0
 8009c9c:	b928      	cbnz	r0, 8009caa <__i2b+0x1a>
 8009c9e:	4b05      	ldr	r3, [pc, #20]	; (8009cb4 <__i2b+0x24>)
 8009ca0:	4805      	ldr	r0, [pc, #20]	; (8009cb8 <__i2b+0x28>)
 8009ca2:	f240 1145 	movw	r1, #325	; 0x145
 8009ca6:	f000 fd1f 	bl	800a6e8 <__assert_func>
 8009caa:	2301      	movs	r3, #1
 8009cac:	6144      	str	r4, [r0, #20]
 8009cae:	6103      	str	r3, [r0, #16]
 8009cb0:	bd10      	pop	{r4, pc}
 8009cb2:	bf00      	nop
 8009cb4:	0800aab4 	.word	0x0800aab4
 8009cb8:	0800aac5 	.word	0x0800aac5

08009cbc <__multiply>:
 8009cbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009cc0:	4691      	mov	r9, r2
 8009cc2:	690a      	ldr	r2, [r1, #16]
 8009cc4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009cc8:	429a      	cmp	r2, r3
 8009cca:	bfb8      	it	lt
 8009ccc:	460b      	movlt	r3, r1
 8009cce:	460c      	mov	r4, r1
 8009cd0:	bfbc      	itt	lt
 8009cd2:	464c      	movlt	r4, r9
 8009cd4:	4699      	movlt	r9, r3
 8009cd6:	6927      	ldr	r7, [r4, #16]
 8009cd8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009cdc:	68a3      	ldr	r3, [r4, #8]
 8009cde:	6861      	ldr	r1, [r4, #4]
 8009ce0:	eb07 060a 	add.w	r6, r7, sl
 8009ce4:	42b3      	cmp	r3, r6
 8009ce6:	b085      	sub	sp, #20
 8009ce8:	bfb8      	it	lt
 8009cea:	3101      	addlt	r1, #1
 8009cec:	f7ff feda 	bl	8009aa4 <_Balloc>
 8009cf0:	b930      	cbnz	r0, 8009d00 <__multiply+0x44>
 8009cf2:	4602      	mov	r2, r0
 8009cf4:	4b44      	ldr	r3, [pc, #272]	; (8009e08 <__multiply+0x14c>)
 8009cf6:	4845      	ldr	r0, [pc, #276]	; (8009e0c <__multiply+0x150>)
 8009cf8:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8009cfc:	f000 fcf4 	bl	800a6e8 <__assert_func>
 8009d00:	f100 0514 	add.w	r5, r0, #20
 8009d04:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009d08:	462b      	mov	r3, r5
 8009d0a:	2200      	movs	r2, #0
 8009d0c:	4543      	cmp	r3, r8
 8009d0e:	d321      	bcc.n	8009d54 <__multiply+0x98>
 8009d10:	f104 0314 	add.w	r3, r4, #20
 8009d14:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009d18:	f109 0314 	add.w	r3, r9, #20
 8009d1c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8009d20:	9202      	str	r2, [sp, #8]
 8009d22:	1b3a      	subs	r2, r7, r4
 8009d24:	3a15      	subs	r2, #21
 8009d26:	f022 0203 	bic.w	r2, r2, #3
 8009d2a:	3204      	adds	r2, #4
 8009d2c:	f104 0115 	add.w	r1, r4, #21
 8009d30:	428f      	cmp	r7, r1
 8009d32:	bf38      	it	cc
 8009d34:	2204      	movcc	r2, #4
 8009d36:	9201      	str	r2, [sp, #4]
 8009d38:	9a02      	ldr	r2, [sp, #8]
 8009d3a:	9303      	str	r3, [sp, #12]
 8009d3c:	429a      	cmp	r2, r3
 8009d3e:	d80c      	bhi.n	8009d5a <__multiply+0x9e>
 8009d40:	2e00      	cmp	r6, #0
 8009d42:	dd03      	ble.n	8009d4c <__multiply+0x90>
 8009d44:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	d05b      	beq.n	8009e04 <__multiply+0x148>
 8009d4c:	6106      	str	r6, [r0, #16]
 8009d4e:	b005      	add	sp, #20
 8009d50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d54:	f843 2b04 	str.w	r2, [r3], #4
 8009d58:	e7d8      	b.n	8009d0c <__multiply+0x50>
 8009d5a:	f8b3 a000 	ldrh.w	sl, [r3]
 8009d5e:	f1ba 0f00 	cmp.w	sl, #0
 8009d62:	d024      	beq.n	8009dae <__multiply+0xf2>
 8009d64:	f104 0e14 	add.w	lr, r4, #20
 8009d68:	46a9      	mov	r9, r5
 8009d6a:	f04f 0c00 	mov.w	ip, #0
 8009d6e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8009d72:	f8d9 1000 	ldr.w	r1, [r9]
 8009d76:	fa1f fb82 	uxth.w	fp, r2
 8009d7a:	b289      	uxth	r1, r1
 8009d7c:	fb0a 110b 	mla	r1, sl, fp, r1
 8009d80:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8009d84:	f8d9 2000 	ldr.w	r2, [r9]
 8009d88:	4461      	add	r1, ip
 8009d8a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009d8e:	fb0a c20b 	mla	r2, sl, fp, ip
 8009d92:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009d96:	b289      	uxth	r1, r1
 8009d98:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009d9c:	4577      	cmp	r7, lr
 8009d9e:	f849 1b04 	str.w	r1, [r9], #4
 8009da2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009da6:	d8e2      	bhi.n	8009d6e <__multiply+0xb2>
 8009da8:	9a01      	ldr	r2, [sp, #4]
 8009daa:	f845 c002 	str.w	ip, [r5, r2]
 8009dae:	9a03      	ldr	r2, [sp, #12]
 8009db0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009db4:	3304      	adds	r3, #4
 8009db6:	f1b9 0f00 	cmp.w	r9, #0
 8009dba:	d021      	beq.n	8009e00 <__multiply+0x144>
 8009dbc:	6829      	ldr	r1, [r5, #0]
 8009dbe:	f104 0c14 	add.w	ip, r4, #20
 8009dc2:	46ae      	mov	lr, r5
 8009dc4:	f04f 0a00 	mov.w	sl, #0
 8009dc8:	f8bc b000 	ldrh.w	fp, [ip]
 8009dcc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009dd0:	fb09 220b 	mla	r2, r9, fp, r2
 8009dd4:	4452      	add	r2, sl
 8009dd6:	b289      	uxth	r1, r1
 8009dd8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009ddc:	f84e 1b04 	str.w	r1, [lr], #4
 8009de0:	f85c 1b04 	ldr.w	r1, [ip], #4
 8009de4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009de8:	f8be 1000 	ldrh.w	r1, [lr]
 8009dec:	fb09 110a 	mla	r1, r9, sl, r1
 8009df0:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8009df4:	4567      	cmp	r7, ip
 8009df6:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009dfa:	d8e5      	bhi.n	8009dc8 <__multiply+0x10c>
 8009dfc:	9a01      	ldr	r2, [sp, #4]
 8009dfe:	50a9      	str	r1, [r5, r2]
 8009e00:	3504      	adds	r5, #4
 8009e02:	e799      	b.n	8009d38 <__multiply+0x7c>
 8009e04:	3e01      	subs	r6, #1
 8009e06:	e79b      	b.n	8009d40 <__multiply+0x84>
 8009e08:	0800aab4 	.word	0x0800aab4
 8009e0c:	0800aac5 	.word	0x0800aac5

08009e10 <__pow5mult>:
 8009e10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009e14:	4615      	mov	r5, r2
 8009e16:	f012 0203 	ands.w	r2, r2, #3
 8009e1a:	4606      	mov	r6, r0
 8009e1c:	460f      	mov	r7, r1
 8009e1e:	d007      	beq.n	8009e30 <__pow5mult+0x20>
 8009e20:	4c25      	ldr	r4, [pc, #148]	; (8009eb8 <__pow5mult+0xa8>)
 8009e22:	3a01      	subs	r2, #1
 8009e24:	2300      	movs	r3, #0
 8009e26:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009e2a:	f7ff fe9d 	bl	8009b68 <__multadd>
 8009e2e:	4607      	mov	r7, r0
 8009e30:	10ad      	asrs	r5, r5, #2
 8009e32:	d03d      	beq.n	8009eb0 <__pow5mult+0xa0>
 8009e34:	69f4      	ldr	r4, [r6, #28]
 8009e36:	b97c      	cbnz	r4, 8009e58 <__pow5mult+0x48>
 8009e38:	2010      	movs	r0, #16
 8009e3a:	f7ff fd7f 	bl	800993c <malloc>
 8009e3e:	4602      	mov	r2, r0
 8009e40:	61f0      	str	r0, [r6, #28]
 8009e42:	b928      	cbnz	r0, 8009e50 <__pow5mult+0x40>
 8009e44:	4b1d      	ldr	r3, [pc, #116]	; (8009ebc <__pow5mult+0xac>)
 8009e46:	481e      	ldr	r0, [pc, #120]	; (8009ec0 <__pow5mult+0xb0>)
 8009e48:	f240 11b3 	movw	r1, #435	; 0x1b3
 8009e4c:	f000 fc4c 	bl	800a6e8 <__assert_func>
 8009e50:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009e54:	6004      	str	r4, [r0, #0]
 8009e56:	60c4      	str	r4, [r0, #12]
 8009e58:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8009e5c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009e60:	b94c      	cbnz	r4, 8009e76 <__pow5mult+0x66>
 8009e62:	f240 2171 	movw	r1, #625	; 0x271
 8009e66:	4630      	mov	r0, r6
 8009e68:	f7ff ff12 	bl	8009c90 <__i2b>
 8009e6c:	2300      	movs	r3, #0
 8009e6e:	f8c8 0008 	str.w	r0, [r8, #8]
 8009e72:	4604      	mov	r4, r0
 8009e74:	6003      	str	r3, [r0, #0]
 8009e76:	f04f 0900 	mov.w	r9, #0
 8009e7a:	07eb      	lsls	r3, r5, #31
 8009e7c:	d50a      	bpl.n	8009e94 <__pow5mult+0x84>
 8009e7e:	4639      	mov	r1, r7
 8009e80:	4622      	mov	r2, r4
 8009e82:	4630      	mov	r0, r6
 8009e84:	f7ff ff1a 	bl	8009cbc <__multiply>
 8009e88:	4639      	mov	r1, r7
 8009e8a:	4680      	mov	r8, r0
 8009e8c:	4630      	mov	r0, r6
 8009e8e:	f7ff fe49 	bl	8009b24 <_Bfree>
 8009e92:	4647      	mov	r7, r8
 8009e94:	106d      	asrs	r5, r5, #1
 8009e96:	d00b      	beq.n	8009eb0 <__pow5mult+0xa0>
 8009e98:	6820      	ldr	r0, [r4, #0]
 8009e9a:	b938      	cbnz	r0, 8009eac <__pow5mult+0x9c>
 8009e9c:	4622      	mov	r2, r4
 8009e9e:	4621      	mov	r1, r4
 8009ea0:	4630      	mov	r0, r6
 8009ea2:	f7ff ff0b 	bl	8009cbc <__multiply>
 8009ea6:	6020      	str	r0, [r4, #0]
 8009ea8:	f8c0 9000 	str.w	r9, [r0]
 8009eac:	4604      	mov	r4, r0
 8009eae:	e7e4      	b.n	8009e7a <__pow5mult+0x6a>
 8009eb0:	4638      	mov	r0, r7
 8009eb2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009eb6:	bf00      	nop
 8009eb8:	0800ac10 	.word	0x0800ac10
 8009ebc:	0800aa45 	.word	0x0800aa45
 8009ec0:	0800aac5 	.word	0x0800aac5

08009ec4 <__lshift>:
 8009ec4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009ec8:	460c      	mov	r4, r1
 8009eca:	6849      	ldr	r1, [r1, #4]
 8009ecc:	6923      	ldr	r3, [r4, #16]
 8009ece:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009ed2:	68a3      	ldr	r3, [r4, #8]
 8009ed4:	4607      	mov	r7, r0
 8009ed6:	4691      	mov	r9, r2
 8009ed8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009edc:	f108 0601 	add.w	r6, r8, #1
 8009ee0:	42b3      	cmp	r3, r6
 8009ee2:	db0b      	blt.n	8009efc <__lshift+0x38>
 8009ee4:	4638      	mov	r0, r7
 8009ee6:	f7ff fddd 	bl	8009aa4 <_Balloc>
 8009eea:	4605      	mov	r5, r0
 8009eec:	b948      	cbnz	r0, 8009f02 <__lshift+0x3e>
 8009eee:	4602      	mov	r2, r0
 8009ef0:	4b28      	ldr	r3, [pc, #160]	; (8009f94 <__lshift+0xd0>)
 8009ef2:	4829      	ldr	r0, [pc, #164]	; (8009f98 <__lshift+0xd4>)
 8009ef4:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8009ef8:	f000 fbf6 	bl	800a6e8 <__assert_func>
 8009efc:	3101      	adds	r1, #1
 8009efe:	005b      	lsls	r3, r3, #1
 8009f00:	e7ee      	b.n	8009ee0 <__lshift+0x1c>
 8009f02:	2300      	movs	r3, #0
 8009f04:	f100 0114 	add.w	r1, r0, #20
 8009f08:	f100 0210 	add.w	r2, r0, #16
 8009f0c:	4618      	mov	r0, r3
 8009f0e:	4553      	cmp	r3, sl
 8009f10:	db33      	blt.n	8009f7a <__lshift+0xb6>
 8009f12:	6920      	ldr	r0, [r4, #16]
 8009f14:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009f18:	f104 0314 	add.w	r3, r4, #20
 8009f1c:	f019 091f 	ands.w	r9, r9, #31
 8009f20:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009f24:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009f28:	d02b      	beq.n	8009f82 <__lshift+0xbe>
 8009f2a:	f1c9 0e20 	rsb	lr, r9, #32
 8009f2e:	468a      	mov	sl, r1
 8009f30:	2200      	movs	r2, #0
 8009f32:	6818      	ldr	r0, [r3, #0]
 8009f34:	fa00 f009 	lsl.w	r0, r0, r9
 8009f38:	4310      	orrs	r0, r2
 8009f3a:	f84a 0b04 	str.w	r0, [sl], #4
 8009f3e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009f42:	459c      	cmp	ip, r3
 8009f44:	fa22 f20e 	lsr.w	r2, r2, lr
 8009f48:	d8f3      	bhi.n	8009f32 <__lshift+0x6e>
 8009f4a:	ebac 0304 	sub.w	r3, ip, r4
 8009f4e:	3b15      	subs	r3, #21
 8009f50:	f023 0303 	bic.w	r3, r3, #3
 8009f54:	3304      	adds	r3, #4
 8009f56:	f104 0015 	add.w	r0, r4, #21
 8009f5a:	4584      	cmp	ip, r0
 8009f5c:	bf38      	it	cc
 8009f5e:	2304      	movcc	r3, #4
 8009f60:	50ca      	str	r2, [r1, r3]
 8009f62:	b10a      	cbz	r2, 8009f68 <__lshift+0xa4>
 8009f64:	f108 0602 	add.w	r6, r8, #2
 8009f68:	3e01      	subs	r6, #1
 8009f6a:	4638      	mov	r0, r7
 8009f6c:	612e      	str	r6, [r5, #16]
 8009f6e:	4621      	mov	r1, r4
 8009f70:	f7ff fdd8 	bl	8009b24 <_Bfree>
 8009f74:	4628      	mov	r0, r5
 8009f76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f7a:	f842 0f04 	str.w	r0, [r2, #4]!
 8009f7e:	3301      	adds	r3, #1
 8009f80:	e7c5      	b.n	8009f0e <__lshift+0x4a>
 8009f82:	3904      	subs	r1, #4
 8009f84:	f853 2b04 	ldr.w	r2, [r3], #4
 8009f88:	f841 2f04 	str.w	r2, [r1, #4]!
 8009f8c:	459c      	cmp	ip, r3
 8009f8e:	d8f9      	bhi.n	8009f84 <__lshift+0xc0>
 8009f90:	e7ea      	b.n	8009f68 <__lshift+0xa4>
 8009f92:	bf00      	nop
 8009f94:	0800aab4 	.word	0x0800aab4
 8009f98:	0800aac5 	.word	0x0800aac5

08009f9c <__mcmp>:
 8009f9c:	b530      	push	{r4, r5, lr}
 8009f9e:	6902      	ldr	r2, [r0, #16]
 8009fa0:	690c      	ldr	r4, [r1, #16]
 8009fa2:	1b12      	subs	r2, r2, r4
 8009fa4:	d10e      	bne.n	8009fc4 <__mcmp+0x28>
 8009fa6:	f100 0314 	add.w	r3, r0, #20
 8009faa:	3114      	adds	r1, #20
 8009fac:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009fb0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009fb4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009fb8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009fbc:	42a5      	cmp	r5, r4
 8009fbe:	d003      	beq.n	8009fc8 <__mcmp+0x2c>
 8009fc0:	d305      	bcc.n	8009fce <__mcmp+0x32>
 8009fc2:	2201      	movs	r2, #1
 8009fc4:	4610      	mov	r0, r2
 8009fc6:	bd30      	pop	{r4, r5, pc}
 8009fc8:	4283      	cmp	r3, r0
 8009fca:	d3f3      	bcc.n	8009fb4 <__mcmp+0x18>
 8009fcc:	e7fa      	b.n	8009fc4 <__mcmp+0x28>
 8009fce:	f04f 32ff 	mov.w	r2, #4294967295
 8009fd2:	e7f7      	b.n	8009fc4 <__mcmp+0x28>

08009fd4 <__mdiff>:
 8009fd4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fd8:	460c      	mov	r4, r1
 8009fda:	4606      	mov	r6, r0
 8009fdc:	4611      	mov	r1, r2
 8009fde:	4620      	mov	r0, r4
 8009fe0:	4690      	mov	r8, r2
 8009fe2:	f7ff ffdb 	bl	8009f9c <__mcmp>
 8009fe6:	1e05      	subs	r5, r0, #0
 8009fe8:	d110      	bne.n	800a00c <__mdiff+0x38>
 8009fea:	4629      	mov	r1, r5
 8009fec:	4630      	mov	r0, r6
 8009fee:	f7ff fd59 	bl	8009aa4 <_Balloc>
 8009ff2:	b930      	cbnz	r0, 800a002 <__mdiff+0x2e>
 8009ff4:	4b3a      	ldr	r3, [pc, #232]	; (800a0e0 <__mdiff+0x10c>)
 8009ff6:	4602      	mov	r2, r0
 8009ff8:	f240 2137 	movw	r1, #567	; 0x237
 8009ffc:	4839      	ldr	r0, [pc, #228]	; (800a0e4 <__mdiff+0x110>)
 8009ffe:	f000 fb73 	bl	800a6e8 <__assert_func>
 800a002:	2301      	movs	r3, #1
 800a004:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a008:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a00c:	bfa4      	itt	ge
 800a00e:	4643      	movge	r3, r8
 800a010:	46a0      	movge	r8, r4
 800a012:	4630      	mov	r0, r6
 800a014:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800a018:	bfa6      	itte	ge
 800a01a:	461c      	movge	r4, r3
 800a01c:	2500      	movge	r5, #0
 800a01e:	2501      	movlt	r5, #1
 800a020:	f7ff fd40 	bl	8009aa4 <_Balloc>
 800a024:	b920      	cbnz	r0, 800a030 <__mdiff+0x5c>
 800a026:	4b2e      	ldr	r3, [pc, #184]	; (800a0e0 <__mdiff+0x10c>)
 800a028:	4602      	mov	r2, r0
 800a02a:	f240 2145 	movw	r1, #581	; 0x245
 800a02e:	e7e5      	b.n	8009ffc <__mdiff+0x28>
 800a030:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800a034:	6926      	ldr	r6, [r4, #16]
 800a036:	60c5      	str	r5, [r0, #12]
 800a038:	f104 0914 	add.w	r9, r4, #20
 800a03c:	f108 0514 	add.w	r5, r8, #20
 800a040:	f100 0e14 	add.w	lr, r0, #20
 800a044:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800a048:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800a04c:	f108 0210 	add.w	r2, r8, #16
 800a050:	46f2      	mov	sl, lr
 800a052:	2100      	movs	r1, #0
 800a054:	f859 3b04 	ldr.w	r3, [r9], #4
 800a058:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800a05c:	fa11 f88b 	uxtah	r8, r1, fp
 800a060:	b299      	uxth	r1, r3
 800a062:	0c1b      	lsrs	r3, r3, #16
 800a064:	eba8 0801 	sub.w	r8, r8, r1
 800a068:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a06c:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800a070:	fa1f f888 	uxth.w	r8, r8
 800a074:	1419      	asrs	r1, r3, #16
 800a076:	454e      	cmp	r6, r9
 800a078:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800a07c:	f84a 3b04 	str.w	r3, [sl], #4
 800a080:	d8e8      	bhi.n	800a054 <__mdiff+0x80>
 800a082:	1b33      	subs	r3, r6, r4
 800a084:	3b15      	subs	r3, #21
 800a086:	f023 0303 	bic.w	r3, r3, #3
 800a08a:	3304      	adds	r3, #4
 800a08c:	3415      	adds	r4, #21
 800a08e:	42a6      	cmp	r6, r4
 800a090:	bf38      	it	cc
 800a092:	2304      	movcc	r3, #4
 800a094:	441d      	add	r5, r3
 800a096:	4473      	add	r3, lr
 800a098:	469e      	mov	lr, r3
 800a09a:	462e      	mov	r6, r5
 800a09c:	4566      	cmp	r6, ip
 800a09e:	d30e      	bcc.n	800a0be <__mdiff+0xea>
 800a0a0:	f10c 0203 	add.w	r2, ip, #3
 800a0a4:	1b52      	subs	r2, r2, r5
 800a0a6:	f022 0203 	bic.w	r2, r2, #3
 800a0aa:	3d03      	subs	r5, #3
 800a0ac:	45ac      	cmp	ip, r5
 800a0ae:	bf38      	it	cc
 800a0b0:	2200      	movcc	r2, #0
 800a0b2:	4413      	add	r3, r2
 800a0b4:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800a0b8:	b17a      	cbz	r2, 800a0da <__mdiff+0x106>
 800a0ba:	6107      	str	r7, [r0, #16]
 800a0bc:	e7a4      	b.n	800a008 <__mdiff+0x34>
 800a0be:	f856 8b04 	ldr.w	r8, [r6], #4
 800a0c2:	fa11 f288 	uxtah	r2, r1, r8
 800a0c6:	1414      	asrs	r4, r2, #16
 800a0c8:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800a0cc:	b292      	uxth	r2, r2
 800a0ce:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800a0d2:	f84e 2b04 	str.w	r2, [lr], #4
 800a0d6:	1421      	asrs	r1, r4, #16
 800a0d8:	e7e0      	b.n	800a09c <__mdiff+0xc8>
 800a0da:	3f01      	subs	r7, #1
 800a0dc:	e7ea      	b.n	800a0b4 <__mdiff+0xe0>
 800a0de:	bf00      	nop
 800a0e0:	0800aab4 	.word	0x0800aab4
 800a0e4:	0800aac5 	.word	0x0800aac5

0800a0e8 <__d2b>:
 800a0e8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a0ec:	460f      	mov	r7, r1
 800a0ee:	2101      	movs	r1, #1
 800a0f0:	ec59 8b10 	vmov	r8, r9, d0
 800a0f4:	4616      	mov	r6, r2
 800a0f6:	f7ff fcd5 	bl	8009aa4 <_Balloc>
 800a0fa:	4604      	mov	r4, r0
 800a0fc:	b930      	cbnz	r0, 800a10c <__d2b+0x24>
 800a0fe:	4602      	mov	r2, r0
 800a100:	4b24      	ldr	r3, [pc, #144]	; (800a194 <__d2b+0xac>)
 800a102:	4825      	ldr	r0, [pc, #148]	; (800a198 <__d2b+0xb0>)
 800a104:	f240 310f 	movw	r1, #783	; 0x30f
 800a108:	f000 faee 	bl	800a6e8 <__assert_func>
 800a10c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a110:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a114:	bb2d      	cbnz	r5, 800a162 <__d2b+0x7a>
 800a116:	9301      	str	r3, [sp, #4]
 800a118:	f1b8 0300 	subs.w	r3, r8, #0
 800a11c:	d026      	beq.n	800a16c <__d2b+0x84>
 800a11e:	4668      	mov	r0, sp
 800a120:	9300      	str	r3, [sp, #0]
 800a122:	f7ff fd87 	bl	8009c34 <__lo0bits>
 800a126:	e9dd 1200 	ldrd	r1, r2, [sp]
 800a12a:	b1e8      	cbz	r0, 800a168 <__d2b+0x80>
 800a12c:	f1c0 0320 	rsb	r3, r0, #32
 800a130:	fa02 f303 	lsl.w	r3, r2, r3
 800a134:	430b      	orrs	r3, r1
 800a136:	40c2      	lsrs	r2, r0
 800a138:	6163      	str	r3, [r4, #20]
 800a13a:	9201      	str	r2, [sp, #4]
 800a13c:	9b01      	ldr	r3, [sp, #4]
 800a13e:	61a3      	str	r3, [r4, #24]
 800a140:	2b00      	cmp	r3, #0
 800a142:	bf14      	ite	ne
 800a144:	2202      	movne	r2, #2
 800a146:	2201      	moveq	r2, #1
 800a148:	6122      	str	r2, [r4, #16]
 800a14a:	b1bd      	cbz	r5, 800a17c <__d2b+0x94>
 800a14c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a150:	4405      	add	r5, r0
 800a152:	603d      	str	r5, [r7, #0]
 800a154:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a158:	6030      	str	r0, [r6, #0]
 800a15a:	4620      	mov	r0, r4
 800a15c:	b003      	add	sp, #12
 800a15e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a162:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a166:	e7d6      	b.n	800a116 <__d2b+0x2e>
 800a168:	6161      	str	r1, [r4, #20]
 800a16a:	e7e7      	b.n	800a13c <__d2b+0x54>
 800a16c:	a801      	add	r0, sp, #4
 800a16e:	f7ff fd61 	bl	8009c34 <__lo0bits>
 800a172:	9b01      	ldr	r3, [sp, #4]
 800a174:	6163      	str	r3, [r4, #20]
 800a176:	3020      	adds	r0, #32
 800a178:	2201      	movs	r2, #1
 800a17a:	e7e5      	b.n	800a148 <__d2b+0x60>
 800a17c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a180:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a184:	6038      	str	r0, [r7, #0]
 800a186:	6918      	ldr	r0, [r3, #16]
 800a188:	f7ff fd34 	bl	8009bf4 <__hi0bits>
 800a18c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a190:	e7e2      	b.n	800a158 <__d2b+0x70>
 800a192:	bf00      	nop
 800a194:	0800aab4 	.word	0x0800aab4
 800a198:	0800aac5 	.word	0x0800aac5

0800a19c <__sfputc_r>:
 800a19c:	6893      	ldr	r3, [r2, #8]
 800a19e:	3b01      	subs	r3, #1
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	b410      	push	{r4}
 800a1a4:	6093      	str	r3, [r2, #8]
 800a1a6:	da08      	bge.n	800a1ba <__sfputc_r+0x1e>
 800a1a8:	6994      	ldr	r4, [r2, #24]
 800a1aa:	42a3      	cmp	r3, r4
 800a1ac:	db01      	blt.n	800a1b2 <__sfputc_r+0x16>
 800a1ae:	290a      	cmp	r1, #10
 800a1b0:	d103      	bne.n	800a1ba <__sfputc_r+0x1e>
 800a1b2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a1b6:	f000 b9e3 	b.w	800a580 <__swbuf_r>
 800a1ba:	6813      	ldr	r3, [r2, #0]
 800a1bc:	1c58      	adds	r0, r3, #1
 800a1be:	6010      	str	r0, [r2, #0]
 800a1c0:	7019      	strb	r1, [r3, #0]
 800a1c2:	4608      	mov	r0, r1
 800a1c4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a1c8:	4770      	bx	lr

0800a1ca <__sfputs_r>:
 800a1ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a1cc:	4606      	mov	r6, r0
 800a1ce:	460f      	mov	r7, r1
 800a1d0:	4614      	mov	r4, r2
 800a1d2:	18d5      	adds	r5, r2, r3
 800a1d4:	42ac      	cmp	r4, r5
 800a1d6:	d101      	bne.n	800a1dc <__sfputs_r+0x12>
 800a1d8:	2000      	movs	r0, #0
 800a1da:	e007      	b.n	800a1ec <__sfputs_r+0x22>
 800a1dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a1e0:	463a      	mov	r2, r7
 800a1e2:	4630      	mov	r0, r6
 800a1e4:	f7ff ffda 	bl	800a19c <__sfputc_r>
 800a1e8:	1c43      	adds	r3, r0, #1
 800a1ea:	d1f3      	bne.n	800a1d4 <__sfputs_r+0xa>
 800a1ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a1f0 <_vfiprintf_r>:
 800a1f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1f4:	460d      	mov	r5, r1
 800a1f6:	b09d      	sub	sp, #116	; 0x74
 800a1f8:	4614      	mov	r4, r2
 800a1fa:	4698      	mov	r8, r3
 800a1fc:	4606      	mov	r6, r0
 800a1fe:	b118      	cbz	r0, 800a208 <_vfiprintf_r+0x18>
 800a200:	6a03      	ldr	r3, [r0, #32]
 800a202:	b90b      	cbnz	r3, 800a208 <_vfiprintf_r+0x18>
 800a204:	f7fe fbca 	bl	800899c <__sinit>
 800a208:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a20a:	07d9      	lsls	r1, r3, #31
 800a20c:	d405      	bmi.n	800a21a <_vfiprintf_r+0x2a>
 800a20e:	89ab      	ldrh	r3, [r5, #12]
 800a210:	059a      	lsls	r2, r3, #22
 800a212:	d402      	bmi.n	800a21a <_vfiprintf_r+0x2a>
 800a214:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a216:	f7fe fcc9 	bl	8008bac <__retarget_lock_acquire_recursive>
 800a21a:	89ab      	ldrh	r3, [r5, #12]
 800a21c:	071b      	lsls	r3, r3, #28
 800a21e:	d501      	bpl.n	800a224 <_vfiprintf_r+0x34>
 800a220:	692b      	ldr	r3, [r5, #16]
 800a222:	b99b      	cbnz	r3, 800a24c <_vfiprintf_r+0x5c>
 800a224:	4629      	mov	r1, r5
 800a226:	4630      	mov	r0, r6
 800a228:	f000 f9e8 	bl	800a5fc <__swsetup_r>
 800a22c:	b170      	cbz	r0, 800a24c <_vfiprintf_r+0x5c>
 800a22e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a230:	07dc      	lsls	r4, r3, #31
 800a232:	d504      	bpl.n	800a23e <_vfiprintf_r+0x4e>
 800a234:	f04f 30ff 	mov.w	r0, #4294967295
 800a238:	b01d      	add	sp, #116	; 0x74
 800a23a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a23e:	89ab      	ldrh	r3, [r5, #12]
 800a240:	0598      	lsls	r0, r3, #22
 800a242:	d4f7      	bmi.n	800a234 <_vfiprintf_r+0x44>
 800a244:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a246:	f7fe fcb2 	bl	8008bae <__retarget_lock_release_recursive>
 800a24a:	e7f3      	b.n	800a234 <_vfiprintf_r+0x44>
 800a24c:	2300      	movs	r3, #0
 800a24e:	9309      	str	r3, [sp, #36]	; 0x24
 800a250:	2320      	movs	r3, #32
 800a252:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a256:	f8cd 800c 	str.w	r8, [sp, #12]
 800a25a:	2330      	movs	r3, #48	; 0x30
 800a25c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800a410 <_vfiprintf_r+0x220>
 800a260:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a264:	f04f 0901 	mov.w	r9, #1
 800a268:	4623      	mov	r3, r4
 800a26a:	469a      	mov	sl, r3
 800a26c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a270:	b10a      	cbz	r2, 800a276 <_vfiprintf_r+0x86>
 800a272:	2a25      	cmp	r2, #37	; 0x25
 800a274:	d1f9      	bne.n	800a26a <_vfiprintf_r+0x7a>
 800a276:	ebba 0b04 	subs.w	fp, sl, r4
 800a27a:	d00b      	beq.n	800a294 <_vfiprintf_r+0xa4>
 800a27c:	465b      	mov	r3, fp
 800a27e:	4622      	mov	r2, r4
 800a280:	4629      	mov	r1, r5
 800a282:	4630      	mov	r0, r6
 800a284:	f7ff ffa1 	bl	800a1ca <__sfputs_r>
 800a288:	3001      	adds	r0, #1
 800a28a:	f000 80a9 	beq.w	800a3e0 <_vfiprintf_r+0x1f0>
 800a28e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a290:	445a      	add	r2, fp
 800a292:	9209      	str	r2, [sp, #36]	; 0x24
 800a294:	f89a 3000 	ldrb.w	r3, [sl]
 800a298:	2b00      	cmp	r3, #0
 800a29a:	f000 80a1 	beq.w	800a3e0 <_vfiprintf_r+0x1f0>
 800a29e:	2300      	movs	r3, #0
 800a2a0:	f04f 32ff 	mov.w	r2, #4294967295
 800a2a4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a2a8:	f10a 0a01 	add.w	sl, sl, #1
 800a2ac:	9304      	str	r3, [sp, #16]
 800a2ae:	9307      	str	r3, [sp, #28]
 800a2b0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a2b4:	931a      	str	r3, [sp, #104]	; 0x68
 800a2b6:	4654      	mov	r4, sl
 800a2b8:	2205      	movs	r2, #5
 800a2ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a2be:	4854      	ldr	r0, [pc, #336]	; (800a410 <_vfiprintf_r+0x220>)
 800a2c0:	f7f5 ff86 	bl	80001d0 <memchr>
 800a2c4:	9a04      	ldr	r2, [sp, #16]
 800a2c6:	b9d8      	cbnz	r0, 800a300 <_vfiprintf_r+0x110>
 800a2c8:	06d1      	lsls	r1, r2, #27
 800a2ca:	bf44      	itt	mi
 800a2cc:	2320      	movmi	r3, #32
 800a2ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a2d2:	0713      	lsls	r3, r2, #28
 800a2d4:	bf44      	itt	mi
 800a2d6:	232b      	movmi	r3, #43	; 0x2b
 800a2d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a2dc:	f89a 3000 	ldrb.w	r3, [sl]
 800a2e0:	2b2a      	cmp	r3, #42	; 0x2a
 800a2e2:	d015      	beq.n	800a310 <_vfiprintf_r+0x120>
 800a2e4:	9a07      	ldr	r2, [sp, #28]
 800a2e6:	4654      	mov	r4, sl
 800a2e8:	2000      	movs	r0, #0
 800a2ea:	f04f 0c0a 	mov.w	ip, #10
 800a2ee:	4621      	mov	r1, r4
 800a2f0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a2f4:	3b30      	subs	r3, #48	; 0x30
 800a2f6:	2b09      	cmp	r3, #9
 800a2f8:	d94d      	bls.n	800a396 <_vfiprintf_r+0x1a6>
 800a2fa:	b1b0      	cbz	r0, 800a32a <_vfiprintf_r+0x13a>
 800a2fc:	9207      	str	r2, [sp, #28]
 800a2fe:	e014      	b.n	800a32a <_vfiprintf_r+0x13a>
 800a300:	eba0 0308 	sub.w	r3, r0, r8
 800a304:	fa09 f303 	lsl.w	r3, r9, r3
 800a308:	4313      	orrs	r3, r2
 800a30a:	9304      	str	r3, [sp, #16]
 800a30c:	46a2      	mov	sl, r4
 800a30e:	e7d2      	b.n	800a2b6 <_vfiprintf_r+0xc6>
 800a310:	9b03      	ldr	r3, [sp, #12]
 800a312:	1d19      	adds	r1, r3, #4
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	9103      	str	r1, [sp, #12]
 800a318:	2b00      	cmp	r3, #0
 800a31a:	bfbb      	ittet	lt
 800a31c:	425b      	neglt	r3, r3
 800a31e:	f042 0202 	orrlt.w	r2, r2, #2
 800a322:	9307      	strge	r3, [sp, #28]
 800a324:	9307      	strlt	r3, [sp, #28]
 800a326:	bfb8      	it	lt
 800a328:	9204      	strlt	r2, [sp, #16]
 800a32a:	7823      	ldrb	r3, [r4, #0]
 800a32c:	2b2e      	cmp	r3, #46	; 0x2e
 800a32e:	d10c      	bne.n	800a34a <_vfiprintf_r+0x15a>
 800a330:	7863      	ldrb	r3, [r4, #1]
 800a332:	2b2a      	cmp	r3, #42	; 0x2a
 800a334:	d134      	bne.n	800a3a0 <_vfiprintf_r+0x1b0>
 800a336:	9b03      	ldr	r3, [sp, #12]
 800a338:	1d1a      	adds	r2, r3, #4
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	9203      	str	r2, [sp, #12]
 800a33e:	2b00      	cmp	r3, #0
 800a340:	bfb8      	it	lt
 800a342:	f04f 33ff 	movlt.w	r3, #4294967295
 800a346:	3402      	adds	r4, #2
 800a348:	9305      	str	r3, [sp, #20]
 800a34a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800a420 <_vfiprintf_r+0x230>
 800a34e:	7821      	ldrb	r1, [r4, #0]
 800a350:	2203      	movs	r2, #3
 800a352:	4650      	mov	r0, sl
 800a354:	f7f5 ff3c 	bl	80001d0 <memchr>
 800a358:	b138      	cbz	r0, 800a36a <_vfiprintf_r+0x17a>
 800a35a:	9b04      	ldr	r3, [sp, #16]
 800a35c:	eba0 000a 	sub.w	r0, r0, sl
 800a360:	2240      	movs	r2, #64	; 0x40
 800a362:	4082      	lsls	r2, r0
 800a364:	4313      	orrs	r3, r2
 800a366:	3401      	adds	r4, #1
 800a368:	9304      	str	r3, [sp, #16]
 800a36a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a36e:	4829      	ldr	r0, [pc, #164]	; (800a414 <_vfiprintf_r+0x224>)
 800a370:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a374:	2206      	movs	r2, #6
 800a376:	f7f5 ff2b 	bl	80001d0 <memchr>
 800a37a:	2800      	cmp	r0, #0
 800a37c:	d03f      	beq.n	800a3fe <_vfiprintf_r+0x20e>
 800a37e:	4b26      	ldr	r3, [pc, #152]	; (800a418 <_vfiprintf_r+0x228>)
 800a380:	bb1b      	cbnz	r3, 800a3ca <_vfiprintf_r+0x1da>
 800a382:	9b03      	ldr	r3, [sp, #12]
 800a384:	3307      	adds	r3, #7
 800a386:	f023 0307 	bic.w	r3, r3, #7
 800a38a:	3308      	adds	r3, #8
 800a38c:	9303      	str	r3, [sp, #12]
 800a38e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a390:	443b      	add	r3, r7
 800a392:	9309      	str	r3, [sp, #36]	; 0x24
 800a394:	e768      	b.n	800a268 <_vfiprintf_r+0x78>
 800a396:	fb0c 3202 	mla	r2, ip, r2, r3
 800a39a:	460c      	mov	r4, r1
 800a39c:	2001      	movs	r0, #1
 800a39e:	e7a6      	b.n	800a2ee <_vfiprintf_r+0xfe>
 800a3a0:	2300      	movs	r3, #0
 800a3a2:	3401      	adds	r4, #1
 800a3a4:	9305      	str	r3, [sp, #20]
 800a3a6:	4619      	mov	r1, r3
 800a3a8:	f04f 0c0a 	mov.w	ip, #10
 800a3ac:	4620      	mov	r0, r4
 800a3ae:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a3b2:	3a30      	subs	r2, #48	; 0x30
 800a3b4:	2a09      	cmp	r2, #9
 800a3b6:	d903      	bls.n	800a3c0 <_vfiprintf_r+0x1d0>
 800a3b8:	2b00      	cmp	r3, #0
 800a3ba:	d0c6      	beq.n	800a34a <_vfiprintf_r+0x15a>
 800a3bc:	9105      	str	r1, [sp, #20]
 800a3be:	e7c4      	b.n	800a34a <_vfiprintf_r+0x15a>
 800a3c0:	fb0c 2101 	mla	r1, ip, r1, r2
 800a3c4:	4604      	mov	r4, r0
 800a3c6:	2301      	movs	r3, #1
 800a3c8:	e7f0      	b.n	800a3ac <_vfiprintf_r+0x1bc>
 800a3ca:	ab03      	add	r3, sp, #12
 800a3cc:	9300      	str	r3, [sp, #0]
 800a3ce:	462a      	mov	r2, r5
 800a3d0:	4b12      	ldr	r3, [pc, #72]	; (800a41c <_vfiprintf_r+0x22c>)
 800a3d2:	a904      	add	r1, sp, #16
 800a3d4:	4630      	mov	r0, r6
 800a3d6:	f7fd fea1 	bl	800811c <_printf_float>
 800a3da:	4607      	mov	r7, r0
 800a3dc:	1c78      	adds	r0, r7, #1
 800a3de:	d1d6      	bne.n	800a38e <_vfiprintf_r+0x19e>
 800a3e0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a3e2:	07d9      	lsls	r1, r3, #31
 800a3e4:	d405      	bmi.n	800a3f2 <_vfiprintf_r+0x202>
 800a3e6:	89ab      	ldrh	r3, [r5, #12]
 800a3e8:	059a      	lsls	r2, r3, #22
 800a3ea:	d402      	bmi.n	800a3f2 <_vfiprintf_r+0x202>
 800a3ec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a3ee:	f7fe fbde 	bl	8008bae <__retarget_lock_release_recursive>
 800a3f2:	89ab      	ldrh	r3, [r5, #12]
 800a3f4:	065b      	lsls	r3, r3, #25
 800a3f6:	f53f af1d 	bmi.w	800a234 <_vfiprintf_r+0x44>
 800a3fa:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a3fc:	e71c      	b.n	800a238 <_vfiprintf_r+0x48>
 800a3fe:	ab03      	add	r3, sp, #12
 800a400:	9300      	str	r3, [sp, #0]
 800a402:	462a      	mov	r2, r5
 800a404:	4b05      	ldr	r3, [pc, #20]	; (800a41c <_vfiprintf_r+0x22c>)
 800a406:	a904      	add	r1, sp, #16
 800a408:	4630      	mov	r0, r6
 800a40a:	f7fe f92b 	bl	8008664 <_printf_i>
 800a40e:	e7e4      	b.n	800a3da <_vfiprintf_r+0x1ea>
 800a410:	0800ac1c 	.word	0x0800ac1c
 800a414:	0800ac26 	.word	0x0800ac26
 800a418:	0800811d 	.word	0x0800811d
 800a41c:	0800a1cb 	.word	0x0800a1cb
 800a420:	0800ac22 	.word	0x0800ac22

0800a424 <__sflush_r>:
 800a424:	898a      	ldrh	r2, [r1, #12]
 800a426:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a42a:	4605      	mov	r5, r0
 800a42c:	0710      	lsls	r0, r2, #28
 800a42e:	460c      	mov	r4, r1
 800a430:	d458      	bmi.n	800a4e4 <__sflush_r+0xc0>
 800a432:	684b      	ldr	r3, [r1, #4]
 800a434:	2b00      	cmp	r3, #0
 800a436:	dc05      	bgt.n	800a444 <__sflush_r+0x20>
 800a438:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a43a:	2b00      	cmp	r3, #0
 800a43c:	dc02      	bgt.n	800a444 <__sflush_r+0x20>
 800a43e:	2000      	movs	r0, #0
 800a440:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a444:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a446:	2e00      	cmp	r6, #0
 800a448:	d0f9      	beq.n	800a43e <__sflush_r+0x1a>
 800a44a:	2300      	movs	r3, #0
 800a44c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a450:	682f      	ldr	r7, [r5, #0]
 800a452:	6a21      	ldr	r1, [r4, #32]
 800a454:	602b      	str	r3, [r5, #0]
 800a456:	d032      	beq.n	800a4be <__sflush_r+0x9a>
 800a458:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a45a:	89a3      	ldrh	r3, [r4, #12]
 800a45c:	075a      	lsls	r2, r3, #29
 800a45e:	d505      	bpl.n	800a46c <__sflush_r+0x48>
 800a460:	6863      	ldr	r3, [r4, #4]
 800a462:	1ac0      	subs	r0, r0, r3
 800a464:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a466:	b10b      	cbz	r3, 800a46c <__sflush_r+0x48>
 800a468:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a46a:	1ac0      	subs	r0, r0, r3
 800a46c:	2300      	movs	r3, #0
 800a46e:	4602      	mov	r2, r0
 800a470:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a472:	6a21      	ldr	r1, [r4, #32]
 800a474:	4628      	mov	r0, r5
 800a476:	47b0      	blx	r6
 800a478:	1c43      	adds	r3, r0, #1
 800a47a:	89a3      	ldrh	r3, [r4, #12]
 800a47c:	d106      	bne.n	800a48c <__sflush_r+0x68>
 800a47e:	6829      	ldr	r1, [r5, #0]
 800a480:	291d      	cmp	r1, #29
 800a482:	d82b      	bhi.n	800a4dc <__sflush_r+0xb8>
 800a484:	4a29      	ldr	r2, [pc, #164]	; (800a52c <__sflush_r+0x108>)
 800a486:	410a      	asrs	r2, r1
 800a488:	07d6      	lsls	r6, r2, #31
 800a48a:	d427      	bmi.n	800a4dc <__sflush_r+0xb8>
 800a48c:	2200      	movs	r2, #0
 800a48e:	6062      	str	r2, [r4, #4]
 800a490:	04d9      	lsls	r1, r3, #19
 800a492:	6922      	ldr	r2, [r4, #16]
 800a494:	6022      	str	r2, [r4, #0]
 800a496:	d504      	bpl.n	800a4a2 <__sflush_r+0x7e>
 800a498:	1c42      	adds	r2, r0, #1
 800a49a:	d101      	bne.n	800a4a0 <__sflush_r+0x7c>
 800a49c:	682b      	ldr	r3, [r5, #0]
 800a49e:	b903      	cbnz	r3, 800a4a2 <__sflush_r+0x7e>
 800a4a0:	6560      	str	r0, [r4, #84]	; 0x54
 800a4a2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a4a4:	602f      	str	r7, [r5, #0]
 800a4a6:	2900      	cmp	r1, #0
 800a4a8:	d0c9      	beq.n	800a43e <__sflush_r+0x1a>
 800a4aa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a4ae:	4299      	cmp	r1, r3
 800a4b0:	d002      	beq.n	800a4b8 <__sflush_r+0x94>
 800a4b2:	4628      	mov	r0, r5
 800a4b4:	f7ff f9f6 	bl	80098a4 <_free_r>
 800a4b8:	2000      	movs	r0, #0
 800a4ba:	6360      	str	r0, [r4, #52]	; 0x34
 800a4bc:	e7c0      	b.n	800a440 <__sflush_r+0x1c>
 800a4be:	2301      	movs	r3, #1
 800a4c0:	4628      	mov	r0, r5
 800a4c2:	47b0      	blx	r6
 800a4c4:	1c41      	adds	r1, r0, #1
 800a4c6:	d1c8      	bne.n	800a45a <__sflush_r+0x36>
 800a4c8:	682b      	ldr	r3, [r5, #0]
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	d0c5      	beq.n	800a45a <__sflush_r+0x36>
 800a4ce:	2b1d      	cmp	r3, #29
 800a4d0:	d001      	beq.n	800a4d6 <__sflush_r+0xb2>
 800a4d2:	2b16      	cmp	r3, #22
 800a4d4:	d101      	bne.n	800a4da <__sflush_r+0xb6>
 800a4d6:	602f      	str	r7, [r5, #0]
 800a4d8:	e7b1      	b.n	800a43e <__sflush_r+0x1a>
 800a4da:	89a3      	ldrh	r3, [r4, #12]
 800a4dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a4e0:	81a3      	strh	r3, [r4, #12]
 800a4e2:	e7ad      	b.n	800a440 <__sflush_r+0x1c>
 800a4e4:	690f      	ldr	r7, [r1, #16]
 800a4e6:	2f00      	cmp	r7, #0
 800a4e8:	d0a9      	beq.n	800a43e <__sflush_r+0x1a>
 800a4ea:	0793      	lsls	r3, r2, #30
 800a4ec:	680e      	ldr	r6, [r1, #0]
 800a4ee:	bf08      	it	eq
 800a4f0:	694b      	ldreq	r3, [r1, #20]
 800a4f2:	600f      	str	r7, [r1, #0]
 800a4f4:	bf18      	it	ne
 800a4f6:	2300      	movne	r3, #0
 800a4f8:	eba6 0807 	sub.w	r8, r6, r7
 800a4fc:	608b      	str	r3, [r1, #8]
 800a4fe:	f1b8 0f00 	cmp.w	r8, #0
 800a502:	dd9c      	ble.n	800a43e <__sflush_r+0x1a>
 800a504:	6a21      	ldr	r1, [r4, #32]
 800a506:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a508:	4643      	mov	r3, r8
 800a50a:	463a      	mov	r2, r7
 800a50c:	4628      	mov	r0, r5
 800a50e:	47b0      	blx	r6
 800a510:	2800      	cmp	r0, #0
 800a512:	dc06      	bgt.n	800a522 <__sflush_r+0xfe>
 800a514:	89a3      	ldrh	r3, [r4, #12]
 800a516:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a51a:	81a3      	strh	r3, [r4, #12]
 800a51c:	f04f 30ff 	mov.w	r0, #4294967295
 800a520:	e78e      	b.n	800a440 <__sflush_r+0x1c>
 800a522:	4407      	add	r7, r0
 800a524:	eba8 0800 	sub.w	r8, r8, r0
 800a528:	e7e9      	b.n	800a4fe <__sflush_r+0xda>
 800a52a:	bf00      	nop
 800a52c:	dfbffffe 	.word	0xdfbffffe

0800a530 <_fflush_r>:
 800a530:	b538      	push	{r3, r4, r5, lr}
 800a532:	690b      	ldr	r3, [r1, #16]
 800a534:	4605      	mov	r5, r0
 800a536:	460c      	mov	r4, r1
 800a538:	b913      	cbnz	r3, 800a540 <_fflush_r+0x10>
 800a53a:	2500      	movs	r5, #0
 800a53c:	4628      	mov	r0, r5
 800a53e:	bd38      	pop	{r3, r4, r5, pc}
 800a540:	b118      	cbz	r0, 800a54a <_fflush_r+0x1a>
 800a542:	6a03      	ldr	r3, [r0, #32]
 800a544:	b90b      	cbnz	r3, 800a54a <_fflush_r+0x1a>
 800a546:	f7fe fa29 	bl	800899c <__sinit>
 800a54a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a54e:	2b00      	cmp	r3, #0
 800a550:	d0f3      	beq.n	800a53a <_fflush_r+0xa>
 800a552:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a554:	07d0      	lsls	r0, r2, #31
 800a556:	d404      	bmi.n	800a562 <_fflush_r+0x32>
 800a558:	0599      	lsls	r1, r3, #22
 800a55a:	d402      	bmi.n	800a562 <_fflush_r+0x32>
 800a55c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a55e:	f7fe fb25 	bl	8008bac <__retarget_lock_acquire_recursive>
 800a562:	4628      	mov	r0, r5
 800a564:	4621      	mov	r1, r4
 800a566:	f7ff ff5d 	bl	800a424 <__sflush_r>
 800a56a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a56c:	07da      	lsls	r2, r3, #31
 800a56e:	4605      	mov	r5, r0
 800a570:	d4e4      	bmi.n	800a53c <_fflush_r+0xc>
 800a572:	89a3      	ldrh	r3, [r4, #12]
 800a574:	059b      	lsls	r3, r3, #22
 800a576:	d4e1      	bmi.n	800a53c <_fflush_r+0xc>
 800a578:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a57a:	f7fe fb18 	bl	8008bae <__retarget_lock_release_recursive>
 800a57e:	e7dd      	b.n	800a53c <_fflush_r+0xc>

0800a580 <__swbuf_r>:
 800a580:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a582:	460e      	mov	r6, r1
 800a584:	4614      	mov	r4, r2
 800a586:	4605      	mov	r5, r0
 800a588:	b118      	cbz	r0, 800a592 <__swbuf_r+0x12>
 800a58a:	6a03      	ldr	r3, [r0, #32]
 800a58c:	b90b      	cbnz	r3, 800a592 <__swbuf_r+0x12>
 800a58e:	f7fe fa05 	bl	800899c <__sinit>
 800a592:	69a3      	ldr	r3, [r4, #24]
 800a594:	60a3      	str	r3, [r4, #8]
 800a596:	89a3      	ldrh	r3, [r4, #12]
 800a598:	071a      	lsls	r2, r3, #28
 800a59a:	d525      	bpl.n	800a5e8 <__swbuf_r+0x68>
 800a59c:	6923      	ldr	r3, [r4, #16]
 800a59e:	b31b      	cbz	r3, 800a5e8 <__swbuf_r+0x68>
 800a5a0:	6823      	ldr	r3, [r4, #0]
 800a5a2:	6922      	ldr	r2, [r4, #16]
 800a5a4:	1a98      	subs	r0, r3, r2
 800a5a6:	6963      	ldr	r3, [r4, #20]
 800a5a8:	b2f6      	uxtb	r6, r6
 800a5aa:	4283      	cmp	r3, r0
 800a5ac:	4637      	mov	r7, r6
 800a5ae:	dc04      	bgt.n	800a5ba <__swbuf_r+0x3a>
 800a5b0:	4621      	mov	r1, r4
 800a5b2:	4628      	mov	r0, r5
 800a5b4:	f7ff ffbc 	bl	800a530 <_fflush_r>
 800a5b8:	b9e0      	cbnz	r0, 800a5f4 <__swbuf_r+0x74>
 800a5ba:	68a3      	ldr	r3, [r4, #8]
 800a5bc:	3b01      	subs	r3, #1
 800a5be:	60a3      	str	r3, [r4, #8]
 800a5c0:	6823      	ldr	r3, [r4, #0]
 800a5c2:	1c5a      	adds	r2, r3, #1
 800a5c4:	6022      	str	r2, [r4, #0]
 800a5c6:	701e      	strb	r6, [r3, #0]
 800a5c8:	6962      	ldr	r2, [r4, #20]
 800a5ca:	1c43      	adds	r3, r0, #1
 800a5cc:	429a      	cmp	r2, r3
 800a5ce:	d004      	beq.n	800a5da <__swbuf_r+0x5a>
 800a5d0:	89a3      	ldrh	r3, [r4, #12]
 800a5d2:	07db      	lsls	r3, r3, #31
 800a5d4:	d506      	bpl.n	800a5e4 <__swbuf_r+0x64>
 800a5d6:	2e0a      	cmp	r6, #10
 800a5d8:	d104      	bne.n	800a5e4 <__swbuf_r+0x64>
 800a5da:	4621      	mov	r1, r4
 800a5dc:	4628      	mov	r0, r5
 800a5de:	f7ff ffa7 	bl	800a530 <_fflush_r>
 800a5e2:	b938      	cbnz	r0, 800a5f4 <__swbuf_r+0x74>
 800a5e4:	4638      	mov	r0, r7
 800a5e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a5e8:	4621      	mov	r1, r4
 800a5ea:	4628      	mov	r0, r5
 800a5ec:	f000 f806 	bl	800a5fc <__swsetup_r>
 800a5f0:	2800      	cmp	r0, #0
 800a5f2:	d0d5      	beq.n	800a5a0 <__swbuf_r+0x20>
 800a5f4:	f04f 37ff 	mov.w	r7, #4294967295
 800a5f8:	e7f4      	b.n	800a5e4 <__swbuf_r+0x64>
	...

0800a5fc <__swsetup_r>:
 800a5fc:	b538      	push	{r3, r4, r5, lr}
 800a5fe:	4b2a      	ldr	r3, [pc, #168]	; (800a6a8 <__swsetup_r+0xac>)
 800a600:	4605      	mov	r5, r0
 800a602:	6818      	ldr	r0, [r3, #0]
 800a604:	460c      	mov	r4, r1
 800a606:	b118      	cbz	r0, 800a610 <__swsetup_r+0x14>
 800a608:	6a03      	ldr	r3, [r0, #32]
 800a60a:	b90b      	cbnz	r3, 800a610 <__swsetup_r+0x14>
 800a60c:	f7fe f9c6 	bl	800899c <__sinit>
 800a610:	89a3      	ldrh	r3, [r4, #12]
 800a612:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a616:	0718      	lsls	r0, r3, #28
 800a618:	d422      	bmi.n	800a660 <__swsetup_r+0x64>
 800a61a:	06d9      	lsls	r1, r3, #27
 800a61c:	d407      	bmi.n	800a62e <__swsetup_r+0x32>
 800a61e:	2309      	movs	r3, #9
 800a620:	602b      	str	r3, [r5, #0]
 800a622:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a626:	81a3      	strh	r3, [r4, #12]
 800a628:	f04f 30ff 	mov.w	r0, #4294967295
 800a62c:	e034      	b.n	800a698 <__swsetup_r+0x9c>
 800a62e:	0758      	lsls	r0, r3, #29
 800a630:	d512      	bpl.n	800a658 <__swsetup_r+0x5c>
 800a632:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a634:	b141      	cbz	r1, 800a648 <__swsetup_r+0x4c>
 800a636:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a63a:	4299      	cmp	r1, r3
 800a63c:	d002      	beq.n	800a644 <__swsetup_r+0x48>
 800a63e:	4628      	mov	r0, r5
 800a640:	f7ff f930 	bl	80098a4 <_free_r>
 800a644:	2300      	movs	r3, #0
 800a646:	6363      	str	r3, [r4, #52]	; 0x34
 800a648:	89a3      	ldrh	r3, [r4, #12]
 800a64a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a64e:	81a3      	strh	r3, [r4, #12]
 800a650:	2300      	movs	r3, #0
 800a652:	6063      	str	r3, [r4, #4]
 800a654:	6923      	ldr	r3, [r4, #16]
 800a656:	6023      	str	r3, [r4, #0]
 800a658:	89a3      	ldrh	r3, [r4, #12]
 800a65a:	f043 0308 	orr.w	r3, r3, #8
 800a65e:	81a3      	strh	r3, [r4, #12]
 800a660:	6923      	ldr	r3, [r4, #16]
 800a662:	b94b      	cbnz	r3, 800a678 <__swsetup_r+0x7c>
 800a664:	89a3      	ldrh	r3, [r4, #12]
 800a666:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a66a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a66e:	d003      	beq.n	800a678 <__swsetup_r+0x7c>
 800a670:	4621      	mov	r1, r4
 800a672:	4628      	mov	r0, r5
 800a674:	f000 f8c4 	bl	800a800 <__smakebuf_r>
 800a678:	89a0      	ldrh	r0, [r4, #12]
 800a67a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a67e:	f010 0301 	ands.w	r3, r0, #1
 800a682:	d00a      	beq.n	800a69a <__swsetup_r+0x9e>
 800a684:	2300      	movs	r3, #0
 800a686:	60a3      	str	r3, [r4, #8]
 800a688:	6963      	ldr	r3, [r4, #20]
 800a68a:	425b      	negs	r3, r3
 800a68c:	61a3      	str	r3, [r4, #24]
 800a68e:	6923      	ldr	r3, [r4, #16]
 800a690:	b943      	cbnz	r3, 800a6a4 <__swsetup_r+0xa8>
 800a692:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a696:	d1c4      	bne.n	800a622 <__swsetup_r+0x26>
 800a698:	bd38      	pop	{r3, r4, r5, pc}
 800a69a:	0781      	lsls	r1, r0, #30
 800a69c:	bf58      	it	pl
 800a69e:	6963      	ldrpl	r3, [r4, #20]
 800a6a0:	60a3      	str	r3, [r4, #8]
 800a6a2:	e7f4      	b.n	800a68e <__swsetup_r+0x92>
 800a6a4:	2000      	movs	r0, #0
 800a6a6:	e7f7      	b.n	800a698 <__swsetup_r+0x9c>
 800a6a8:	20000064 	.word	0x20000064

0800a6ac <_sbrk_r>:
 800a6ac:	b538      	push	{r3, r4, r5, lr}
 800a6ae:	4d06      	ldr	r5, [pc, #24]	; (800a6c8 <_sbrk_r+0x1c>)
 800a6b0:	2300      	movs	r3, #0
 800a6b2:	4604      	mov	r4, r0
 800a6b4:	4608      	mov	r0, r1
 800a6b6:	602b      	str	r3, [r5, #0]
 800a6b8:	f7f7 f9ec 	bl	8001a94 <_sbrk>
 800a6bc:	1c43      	adds	r3, r0, #1
 800a6be:	d102      	bne.n	800a6c6 <_sbrk_r+0x1a>
 800a6c0:	682b      	ldr	r3, [r5, #0]
 800a6c2:	b103      	cbz	r3, 800a6c6 <_sbrk_r+0x1a>
 800a6c4:	6023      	str	r3, [r4, #0]
 800a6c6:	bd38      	pop	{r3, r4, r5, pc}
 800a6c8:	2000050c 	.word	0x2000050c

0800a6cc <memcpy>:
 800a6cc:	440a      	add	r2, r1
 800a6ce:	4291      	cmp	r1, r2
 800a6d0:	f100 33ff 	add.w	r3, r0, #4294967295
 800a6d4:	d100      	bne.n	800a6d8 <memcpy+0xc>
 800a6d6:	4770      	bx	lr
 800a6d8:	b510      	push	{r4, lr}
 800a6da:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a6de:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a6e2:	4291      	cmp	r1, r2
 800a6e4:	d1f9      	bne.n	800a6da <memcpy+0xe>
 800a6e6:	bd10      	pop	{r4, pc}

0800a6e8 <__assert_func>:
 800a6e8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a6ea:	4614      	mov	r4, r2
 800a6ec:	461a      	mov	r2, r3
 800a6ee:	4b09      	ldr	r3, [pc, #36]	; (800a714 <__assert_func+0x2c>)
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	4605      	mov	r5, r0
 800a6f4:	68d8      	ldr	r0, [r3, #12]
 800a6f6:	b14c      	cbz	r4, 800a70c <__assert_func+0x24>
 800a6f8:	4b07      	ldr	r3, [pc, #28]	; (800a718 <__assert_func+0x30>)
 800a6fa:	9100      	str	r1, [sp, #0]
 800a6fc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a700:	4906      	ldr	r1, [pc, #24]	; (800a71c <__assert_func+0x34>)
 800a702:	462b      	mov	r3, r5
 800a704:	f000 f844 	bl	800a790 <fiprintf>
 800a708:	f000 f8d8 	bl	800a8bc <abort>
 800a70c:	4b04      	ldr	r3, [pc, #16]	; (800a720 <__assert_func+0x38>)
 800a70e:	461c      	mov	r4, r3
 800a710:	e7f3      	b.n	800a6fa <__assert_func+0x12>
 800a712:	bf00      	nop
 800a714:	20000064 	.word	0x20000064
 800a718:	0800ac37 	.word	0x0800ac37
 800a71c:	0800ac44 	.word	0x0800ac44
 800a720:	0800ac72 	.word	0x0800ac72

0800a724 <_calloc_r>:
 800a724:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a726:	fba1 2402 	umull	r2, r4, r1, r2
 800a72a:	b94c      	cbnz	r4, 800a740 <_calloc_r+0x1c>
 800a72c:	4611      	mov	r1, r2
 800a72e:	9201      	str	r2, [sp, #4]
 800a730:	f7ff f92c 	bl	800998c <_malloc_r>
 800a734:	9a01      	ldr	r2, [sp, #4]
 800a736:	4605      	mov	r5, r0
 800a738:	b930      	cbnz	r0, 800a748 <_calloc_r+0x24>
 800a73a:	4628      	mov	r0, r5
 800a73c:	b003      	add	sp, #12
 800a73e:	bd30      	pop	{r4, r5, pc}
 800a740:	220c      	movs	r2, #12
 800a742:	6002      	str	r2, [r0, #0]
 800a744:	2500      	movs	r5, #0
 800a746:	e7f8      	b.n	800a73a <_calloc_r+0x16>
 800a748:	4621      	mov	r1, r4
 800a74a:	f7fe f9b2 	bl	8008ab2 <memset>
 800a74e:	e7f4      	b.n	800a73a <_calloc_r+0x16>

0800a750 <__ascii_mbtowc>:
 800a750:	b082      	sub	sp, #8
 800a752:	b901      	cbnz	r1, 800a756 <__ascii_mbtowc+0x6>
 800a754:	a901      	add	r1, sp, #4
 800a756:	b142      	cbz	r2, 800a76a <__ascii_mbtowc+0x1a>
 800a758:	b14b      	cbz	r3, 800a76e <__ascii_mbtowc+0x1e>
 800a75a:	7813      	ldrb	r3, [r2, #0]
 800a75c:	600b      	str	r3, [r1, #0]
 800a75e:	7812      	ldrb	r2, [r2, #0]
 800a760:	1e10      	subs	r0, r2, #0
 800a762:	bf18      	it	ne
 800a764:	2001      	movne	r0, #1
 800a766:	b002      	add	sp, #8
 800a768:	4770      	bx	lr
 800a76a:	4610      	mov	r0, r2
 800a76c:	e7fb      	b.n	800a766 <__ascii_mbtowc+0x16>
 800a76e:	f06f 0001 	mvn.w	r0, #1
 800a772:	e7f8      	b.n	800a766 <__ascii_mbtowc+0x16>

0800a774 <__ascii_wctomb>:
 800a774:	b149      	cbz	r1, 800a78a <__ascii_wctomb+0x16>
 800a776:	2aff      	cmp	r2, #255	; 0xff
 800a778:	bf85      	ittet	hi
 800a77a:	238a      	movhi	r3, #138	; 0x8a
 800a77c:	6003      	strhi	r3, [r0, #0]
 800a77e:	700a      	strbls	r2, [r1, #0]
 800a780:	f04f 30ff 	movhi.w	r0, #4294967295
 800a784:	bf98      	it	ls
 800a786:	2001      	movls	r0, #1
 800a788:	4770      	bx	lr
 800a78a:	4608      	mov	r0, r1
 800a78c:	4770      	bx	lr
	...

0800a790 <fiprintf>:
 800a790:	b40e      	push	{r1, r2, r3}
 800a792:	b503      	push	{r0, r1, lr}
 800a794:	4601      	mov	r1, r0
 800a796:	ab03      	add	r3, sp, #12
 800a798:	4805      	ldr	r0, [pc, #20]	; (800a7b0 <fiprintf+0x20>)
 800a79a:	f853 2b04 	ldr.w	r2, [r3], #4
 800a79e:	6800      	ldr	r0, [r0, #0]
 800a7a0:	9301      	str	r3, [sp, #4]
 800a7a2:	f7ff fd25 	bl	800a1f0 <_vfiprintf_r>
 800a7a6:	b002      	add	sp, #8
 800a7a8:	f85d eb04 	ldr.w	lr, [sp], #4
 800a7ac:	b003      	add	sp, #12
 800a7ae:	4770      	bx	lr
 800a7b0:	20000064 	.word	0x20000064

0800a7b4 <__swhatbuf_r>:
 800a7b4:	b570      	push	{r4, r5, r6, lr}
 800a7b6:	460c      	mov	r4, r1
 800a7b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a7bc:	2900      	cmp	r1, #0
 800a7be:	b096      	sub	sp, #88	; 0x58
 800a7c0:	4615      	mov	r5, r2
 800a7c2:	461e      	mov	r6, r3
 800a7c4:	da0d      	bge.n	800a7e2 <__swhatbuf_r+0x2e>
 800a7c6:	89a3      	ldrh	r3, [r4, #12]
 800a7c8:	f013 0f80 	tst.w	r3, #128	; 0x80
 800a7cc:	f04f 0100 	mov.w	r1, #0
 800a7d0:	bf0c      	ite	eq
 800a7d2:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800a7d6:	2340      	movne	r3, #64	; 0x40
 800a7d8:	2000      	movs	r0, #0
 800a7da:	6031      	str	r1, [r6, #0]
 800a7dc:	602b      	str	r3, [r5, #0]
 800a7de:	b016      	add	sp, #88	; 0x58
 800a7e0:	bd70      	pop	{r4, r5, r6, pc}
 800a7e2:	466a      	mov	r2, sp
 800a7e4:	f000 f848 	bl	800a878 <_fstat_r>
 800a7e8:	2800      	cmp	r0, #0
 800a7ea:	dbec      	blt.n	800a7c6 <__swhatbuf_r+0x12>
 800a7ec:	9901      	ldr	r1, [sp, #4]
 800a7ee:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800a7f2:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800a7f6:	4259      	negs	r1, r3
 800a7f8:	4159      	adcs	r1, r3
 800a7fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a7fe:	e7eb      	b.n	800a7d8 <__swhatbuf_r+0x24>

0800a800 <__smakebuf_r>:
 800a800:	898b      	ldrh	r3, [r1, #12]
 800a802:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a804:	079d      	lsls	r5, r3, #30
 800a806:	4606      	mov	r6, r0
 800a808:	460c      	mov	r4, r1
 800a80a:	d507      	bpl.n	800a81c <__smakebuf_r+0x1c>
 800a80c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a810:	6023      	str	r3, [r4, #0]
 800a812:	6123      	str	r3, [r4, #16]
 800a814:	2301      	movs	r3, #1
 800a816:	6163      	str	r3, [r4, #20]
 800a818:	b002      	add	sp, #8
 800a81a:	bd70      	pop	{r4, r5, r6, pc}
 800a81c:	ab01      	add	r3, sp, #4
 800a81e:	466a      	mov	r2, sp
 800a820:	f7ff ffc8 	bl	800a7b4 <__swhatbuf_r>
 800a824:	9900      	ldr	r1, [sp, #0]
 800a826:	4605      	mov	r5, r0
 800a828:	4630      	mov	r0, r6
 800a82a:	f7ff f8af 	bl	800998c <_malloc_r>
 800a82e:	b948      	cbnz	r0, 800a844 <__smakebuf_r+0x44>
 800a830:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a834:	059a      	lsls	r2, r3, #22
 800a836:	d4ef      	bmi.n	800a818 <__smakebuf_r+0x18>
 800a838:	f023 0303 	bic.w	r3, r3, #3
 800a83c:	f043 0302 	orr.w	r3, r3, #2
 800a840:	81a3      	strh	r3, [r4, #12]
 800a842:	e7e3      	b.n	800a80c <__smakebuf_r+0xc>
 800a844:	89a3      	ldrh	r3, [r4, #12]
 800a846:	6020      	str	r0, [r4, #0]
 800a848:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a84c:	81a3      	strh	r3, [r4, #12]
 800a84e:	9b00      	ldr	r3, [sp, #0]
 800a850:	6163      	str	r3, [r4, #20]
 800a852:	9b01      	ldr	r3, [sp, #4]
 800a854:	6120      	str	r0, [r4, #16]
 800a856:	b15b      	cbz	r3, 800a870 <__smakebuf_r+0x70>
 800a858:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a85c:	4630      	mov	r0, r6
 800a85e:	f000 f81d 	bl	800a89c <_isatty_r>
 800a862:	b128      	cbz	r0, 800a870 <__smakebuf_r+0x70>
 800a864:	89a3      	ldrh	r3, [r4, #12]
 800a866:	f023 0303 	bic.w	r3, r3, #3
 800a86a:	f043 0301 	orr.w	r3, r3, #1
 800a86e:	81a3      	strh	r3, [r4, #12]
 800a870:	89a3      	ldrh	r3, [r4, #12]
 800a872:	431d      	orrs	r5, r3
 800a874:	81a5      	strh	r5, [r4, #12]
 800a876:	e7cf      	b.n	800a818 <__smakebuf_r+0x18>

0800a878 <_fstat_r>:
 800a878:	b538      	push	{r3, r4, r5, lr}
 800a87a:	4d07      	ldr	r5, [pc, #28]	; (800a898 <_fstat_r+0x20>)
 800a87c:	2300      	movs	r3, #0
 800a87e:	4604      	mov	r4, r0
 800a880:	4608      	mov	r0, r1
 800a882:	4611      	mov	r1, r2
 800a884:	602b      	str	r3, [r5, #0]
 800a886:	f7f7 f8dc 	bl	8001a42 <_fstat>
 800a88a:	1c43      	adds	r3, r0, #1
 800a88c:	d102      	bne.n	800a894 <_fstat_r+0x1c>
 800a88e:	682b      	ldr	r3, [r5, #0]
 800a890:	b103      	cbz	r3, 800a894 <_fstat_r+0x1c>
 800a892:	6023      	str	r3, [r4, #0]
 800a894:	bd38      	pop	{r3, r4, r5, pc}
 800a896:	bf00      	nop
 800a898:	2000050c 	.word	0x2000050c

0800a89c <_isatty_r>:
 800a89c:	b538      	push	{r3, r4, r5, lr}
 800a89e:	4d06      	ldr	r5, [pc, #24]	; (800a8b8 <_isatty_r+0x1c>)
 800a8a0:	2300      	movs	r3, #0
 800a8a2:	4604      	mov	r4, r0
 800a8a4:	4608      	mov	r0, r1
 800a8a6:	602b      	str	r3, [r5, #0]
 800a8a8:	f7f7 f8db 	bl	8001a62 <_isatty>
 800a8ac:	1c43      	adds	r3, r0, #1
 800a8ae:	d102      	bne.n	800a8b6 <_isatty_r+0x1a>
 800a8b0:	682b      	ldr	r3, [r5, #0]
 800a8b2:	b103      	cbz	r3, 800a8b6 <_isatty_r+0x1a>
 800a8b4:	6023      	str	r3, [r4, #0]
 800a8b6:	bd38      	pop	{r3, r4, r5, pc}
 800a8b8:	2000050c 	.word	0x2000050c

0800a8bc <abort>:
 800a8bc:	b508      	push	{r3, lr}
 800a8be:	2006      	movs	r0, #6
 800a8c0:	f000 f82c 	bl	800a91c <raise>
 800a8c4:	2001      	movs	r0, #1
 800a8c6:	f7f7 f889 	bl	80019dc <_exit>

0800a8ca <_raise_r>:
 800a8ca:	291f      	cmp	r1, #31
 800a8cc:	b538      	push	{r3, r4, r5, lr}
 800a8ce:	4604      	mov	r4, r0
 800a8d0:	460d      	mov	r5, r1
 800a8d2:	d904      	bls.n	800a8de <_raise_r+0x14>
 800a8d4:	2316      	movs	r3, #22
 800a8d6:	6003      	str	r3, [r0, #0]
 800a8d8:	f04f 30ff 	mov.w	r0, #4294967295
 800a8dc:	bd38      	pop	{r3, r4, r5, pc}
 800a8de:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800a8e0:	b112      	cbz	r2, 800a8e8 <_raise_r+0x1e>
 800a8e2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a8e6:	b94b      	cbnz	r3, 800a8fc <_raise_r+0x32>
 800a8e8:	4620      	mov	r0, r4
 800a8ea:	f000 f831 	bl	800a950 <_getpid_r>
 800a8ee:	462a      	mov	r2, r5
 800a8f0:	4601      	mov	r1, r0
 800a8f2:	4620      	mov	r0, r4
 800a8f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a8f8:	f000 b818 	b.w	800a92c <_kill_r>
 800a8fc:	2b01      	cmp	r3, #1
 800a8fe:	d00a      	beq.n	800a916 <_raise_r+0x4c>
 800a900:	1c59      	adds	r1, r3, #1
 800a902:	d103      	bne.n	800a90c <_raise_r+0x42>
 800a904:	2316      	movs	r3, #22
 800a906:	6003      	str	r3, [r0, #0]
 800a908:	2001      	movs	r0, #1
 800a90a:	e7e7      	b.n	800a8dc <_raise_r+0x12>
 800a90c:	2400      	movs	r4, #0
 800a90e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a912:	4628      	mov	r0, r5
 800a914:	4798      	blx	r3
 800a916:	2000      	movs	r0, #0
 800a918:	e7e0      	b.n	800a8dc <_raise_r+0x12>
	...

0800a91c <raise>:
 800a91c:	4b02      	ldr	r3, [pc, #8]	; (800a928 <raise+0xc>)
 800a91e:	4601      	mov	r1, r0
 800a920:	6818      	ldr	r0, [r3, #0]
 800a922:	f7ff bfd2 	b.w	800a8ca <_raise_r>
 800a926:	bf00      	nop
 800a928:	20000064 	.word	0x20000064

0800a92c <_kill_r>:
 800a92c:	b538      	push	{r3, r4, r5, lr}
 800a92e:	4d07      	ldr	r5, [pc, #28]	; (800a94c <_kill_r+0x20>)
 800a930:	2300      	movs	r3, #0
 800a932:	4604      	mov	r4, r0
 800a934:	4608      	mov	r0, r1
 800a936:	4611      	mov	r1, r2
 800a938:	602b      	str	r3, [r5, #0]
 800a93a:	f7f7 f83f 	bl	80019bc <_kill>
 800a93e:	1c43      	adds	r3, r0, #1
 800a940:	d102      	bne.n	800a948 <_kill_r+0x1c>
 800a942:	682b      	ldr	r3, [r5, #0]
 800a944:	b103      	cbz	r3, 800a948 <_kill_r+0x1c>
 800a946:	6023      	str	r3, [r4, #0]
 800a948:	bd38      	pop	{r3, r4, r5, pc}
 800a94a:	bf00      	nop
 800a94c:	2000050c 	.word	0x2000050c

0800a950 <_getpid_r>:
 800a950:	f7f7 b82c 	b.w	80019ac <_getpid>

0800a954 <_init>:
 800a954:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a956:	bf00      	nop
 800a958:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a95a:	bc08      	pop	{r3}
 800a95c:	469e      	mov	lr, r3
 800a95e:	4770      	bx	lr

0800a960 <_fini>:
 800a960:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a962:	bf00      	nop
 800a964:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a966:	bc08      	pop	{r3}
 800a968:	469e      	mov	lr, r3
 800a96a:	4770      	bx	lr

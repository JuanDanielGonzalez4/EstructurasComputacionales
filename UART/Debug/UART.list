
UART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000055c4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000090  08005754  08005754  00015754  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080057e4  080057e4  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  080057e4  080057e4  000157e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080057ec  080057ec  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080057ec  080057ec  000157ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080057f0  080057f0  000157f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  080057f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000024c  20000068  0800585c  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002b4  0800585c  000202b4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000cab0  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001f94  00000000  00000000  0002cb8b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a90  00000000  00000000  0002eb20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000808  00000000  00000000  0002f5b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000267da  00000000  00000000  0002fdb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000cdcc  00000000  00000000  00056592  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e9677  00000000  00000000  0006335e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003178  00000000  00000000  0014c9d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000092  00000000  00000000  0014fb50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800573c 	.word	0x0800573c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	0800573c 	.word	0x0800573c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b970 	b.w	8000568 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	460d      	mov	r5, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	460f      	mov	r7, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4694      	mov	ip, r2
 80002b4:	d965      	bls.n	8000382 <__udivmoddi4+0xe2>
 80002b6:	fab2 f382 	clz	r3, r2
 80002ba:	b143      	cbz	r3, 80002ce <__udivmoddi4+0x2e>
 80002bc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002c0:	f1c3 0220 	rsb	r2, r3, #32
 80002c4:	409f      	lsls	r7, r3
 80002c6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ca:	4317      	orrs	r7, r2
 80002cc:	409c      	lsls	r4, r3
 80002ce:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002d2:	fa1f f58c 	uxth.w	r5, ip
 80002d6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002da:	0c22      	lsrs	r2, r4, #16
 80002dc:	fb0e 7711 	mls	r7, lr, r1, r7
 80002e0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002e4:	fb01 f005 	mul.w	r0, r1, r5
 80002e8:	4290      	cmp	r0, r2
 80002ea:	d90a      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ec:	eb1c 0202 	adds.w	r2, ip, r2
 80002f0:	f101 37ff 	add.w	r7, r1, #4294967295
 80002f4:	f080 811c 	bcs.w	8000530 <__udivmoddi4+0x290>
 80002f8:	4290      	cmp	r0, r2
 80002fa:	f240 8119 	bls.w	8000530 <__udivmoddi4+0x290>
 80002fe:	3902      	subs	r1, #2
 8000300:	4462      	add	r2, ip
 8000302:	1a12      	subs	r2, r2, r0
 8000304:	b2a4      	uxth	r4, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000312:	fb00 f505 	mul.w	r5, r0, r5
 8000316:	42a5      	cmp	r5, r4
 8000318:	d90a      	bls.n	8000330 <__udivmoddi4+0x90>
 800031a:	eb1c 0404 	adds.w	r4, ip, r4
 800031e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000322:	f080 8107 	bcs.w	8000534 <__udivmoddi4+0x294>
 8000326:	42a5      	cmp	r5, r4
 8000328:	f240 8104 	bls.w	8000534 <__udivmoddi4+0x294>
 800032c:	4464      	add	r4, ip
 800032e:	3802      	subs	r0, #2
 8000330:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000334:	1b64      	subs	r4, r4, r5
 8000336:	2100      	movs	r1, #0
 8000338:	b11e      	cbz	r6, 8000342 <__udivmoddi4+0xa2>
 800033a:	40dc      	lsrs	r4, r3
 800033c:	2300      	movs	r3, #0
 800033e:	e9c6 4300 	strd	r4, r3, [r6]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0xbc>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80ed 	beq.w	800052a <__udivmoddi4+0x28a>
 8000350:	2100      	movs	r1, #0
 8000352:	e9c6 0500 	strd	r0, r5, [r6]
 8000356:	4608      	mov	r0, r1
 8000358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035c:	fab3 f183 	clz	r1, r3
 8000360:	2900      	cmp	r1, #0
 8000362:	d149      	bne.n	80003f8 <__udivmoddi4+0x158>
 8000364:	42ab      	cmp	r3, r5
 8000366:	d302      	bcc.n	800036e <__udivmoddi4+0xce>
 8000368:	4282      	cmp	r2, r0
 800036a:	f200 80f8 	bhi.w	800055e <__udivmoddi4+0x2be>
 800036e:	1a84      	subs	r4, r0, r2
 8000370:	eb65 0203 	sbc.w	r2, r5, r3
 8000374:	2001      	movs	r0, #1
 8000376:	4617      	mov	r7, r2
 8000378:	2e00      	cmp	r6, #0
 800037a:	d0e2      	beq.n	8000342 <__udivmoddi4+0xa2>
 800037c:	e9c6 4700 	strd	r4, r7, [r6]
 8000380:	e7df      	b.n	8000342 <__udivmoddi4+0xa2>
 8000382:	b902      	cbnz	r2, 8000386 <__udivmoddi4+0xe6>
 8000384:	deff      	udf	#255	; 0xff
 8000386:	fab2 f382 	clz	r3, r2
 800038a:	2b00      	cmp	r3, #0
 800038c:	f040 8090 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000390:	1a8a      	subs	r2, r1, r2
 8000392:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000396:	fa1f fe8c 	uxth.w	lr, ip
 800039a:	2101      	movs	r1, #1
 800039c:	fbb2 f5f7 	udiv	r5, r2, r7
 80003a0:	fb07 2015 	mls	r0, r7, r5, r2
 80003a4:	0c22      	lsrs	r2, r4, #16
 80003a6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003aa:	fb0e f005 	mul.w	r0, lr, r5
 80003ae:	4290      	cmp	r0, r2
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b2:	eb1c 0202 	adds.w	r2, ip, r2
 80003b6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4290      	cmp	r0, r2
 80003be:	f200 80cb 	bhi.w	8000558 <__udivmoddi4+0x2b8>
 80003c2:	4645      	mov	r5, r8
 80003c4:	1a12      	subs	r2, r2, r0
 80003c6:	b2a4      	uxth	r4, r4
 80003c8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003cc:	fb07 2210 	mls	r2, r7, r0, r2
 80003d0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003d4:	fb0e fe00 	mul.w	lr, lr, r0
 80003d8:	45a6      	cmp	lr, r4
 80003da:	d908      	bls.n	80003ee <__udivmoddi4+0x14e>
 80003dc:	eb1c 0404 	adds.w	r4, ip, r4
 80003e0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003e4:	d202      	bcs.n	80003ec <__udivmoddi4+0x14c>
 80003e6:	45a6      	cmp	lr, r4
 80003e8:	f200 80bb 	bhi.w	8000562 <__udivmoddi4+0x2c2>
 80003ec:	4610      	mov	r0, r2
 80003ee:	eba4 040e 	sub.w	r4, r4, lr
 80003f2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003f6:	e79f      	b.n	8000338 <__udivmoddi4+0x98>
 80003f8:	f1c1 0720 	rsb	r7, r1, #32
 80003fc:	408b      	lsls	r3, r1
 80003fe:	fa22 fc07 	lsr.w	ip, r2, r7
 8000402:	ea4c 0c03 	orr.w	ip, ip, r3
 8000406:	fa05 f401 	lsl.w	r4, r5, r1
 800040a:	fa20 f307 	lsr.w	r3, r0, r7
 800040e:	40fd      	lsrs	r5, r7
 8000410:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000414:	4323      	orrs	r3, r4
 8000416:	fbb5 f8f9 	udiv	r8, r5, r9
 800041a:	fa1f fe8c 	uxth.w	lr, ip
 800041e:	fb09 5518 	mls	r5, r9, r8, r5
 8000422:	0c1c      	lsrs	r4, r3, #16
 8000424:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000428:	fb08 f50e 	mul.w	r5, r8, lr
 800042c:	42a5      	cmp	r5, r4
 800042e:	fa02 f201 	lsl.w	r2, r2, r1
 8000432:	fa00 f001 	lsl.w	r0, r0, r1
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1c 0404 	adds.w	r4, ip, r4
 800043c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000440:	f080 8088 	bcs.w	8000554 <__udivmoddi4+0x2b4>
 8000444:	42a5      	cmp	r5, r4
 8000446:	f240 8085 	bls.w	8000554 <__udivmoddi4+0x2b4>
 800044a:	f1a8 0802 	sub.w	r8, r8, #2
 800044e:	4464      	add	r4, ip
 8000450:	1b64      	subs	r4, r4, r5
 8000452:	b29d      	uxth	r5, r3
 8000454:	fbb4 f3f9 	udiv	r3, r4, r9
 8000458:	fb09 4413 	mls	r4, r9, r3, r4
 800045c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000460:	fb03 fe0e 	mul.w	lr, r3, lr
 8000464:	45a6      	cmp	lr, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000470:	d26c      	bcs.n	800054c <__udivmoddi4+0x2ac>
 8000472:	45a6      	cmp	lr, r4
 8000474:	d96a      	bls.n	800054c <__udivmoddi4+0x2ac>
 8000476:	3b02      	subs	r3, #2
 8000478:	4464      	add	r4, ip
 800047a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800047e:	fba3 9502 	umull	r9, r5, r3, r2
 8000482:	eba4 040e 	sub.w	r4, r4, lr
 8000486:	42ac      	cmp	r4, r5
 8000488:	46c8      	mov	r8, r9
 800048a:	46ae      	mov	lr, r5
 800048c:	d356      	bcc.n	800053c <__udivmoddi4+0x29c>
 800048e:	d053      	beq.n	8000538 <__udivmoddi4+0x298>
 8000490:	b156      	cbz	r6, 80004a8 <__udivmoddi4+0x208>
 8000492:	ebb0 0208 	subs.w	r2, r0, r8
 8000496:	eb64 040e 	sbc.w	r4, r4, lr
 800049a:	fa04 f707 	lsl.w	r7, r4, r7
 800049e:	40ca      	lsrs	r2, r1
 80004a0:	40cc      	lsrs	r4, r1
 80004a2:	4317      	orrs	r7, r2
 80004a4:	e9c6 7400 	strd	r7, r4, [r6]
 80004a8:	4618      	mov	r0, r3
 80004aa:	2100      	movs	r1, #0
 80004ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b0:	f1c3 0120 	rsb	r1, r3, #32
 80004b4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004b8:	fa20 f201 	lsr.w	r2, r0, r1
 80004bc:	fa25 f101 	lsr.w	r1, r5, r1
 80004c0:	409d      	lsls	r5, r3
 80004c2:	432a      	orrs	r2, r5
 80004c4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004c8:	fa1f fe8c 	uxth.w	lr, ip
 80004cc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004d0:	fb07 1510 	mls	r5, r7, r0, r1
 80004d4:	0c11      	lsrs	r1, r2, #16
 80004d6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004da:	fb00 f50e 	mul.w	r5, r0, lr
 80004de:	428d      	cmp	r5, r1
 80004e0:	fa04 f403 	lsl.w	r4, r4, r3
 80004e4:	d908      	bls.n	80004f8 <__udivmoddi4+0x258>
 80004e6:	eb1c 0101 	adds.w	r1, ip, r1
 80004ea:	f100 38ff 	add.w	r8, r0, #4294967295
 80004ee:	d22f      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 80004f0:	428d      	cmp	r5, r1
 80004f2:	d92d      	bls.n	8000550 <__udivmoddi4+0x2b0>
 80004f4:	3802      	subs	r0, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	1b49      	subs	r1, r1, r5
 80004fa:	b292      	uxth	r2, r2
 80004fc:	fbb1 f5f7 	udiv	r5, r1, r7
 8000500:	fb07 1115 	mls	r1, r7, r5, r1
 8000504:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000508:	fb05 f10e 	mul.w	r1, r5, lr
 800050c:	4291      	cmp	r1, r2
 800050e:	d908      	bls.n	8000522 <__udivmoddi4+0x282>
 8000510:	eb1c 0202 	adds.w	r2, ip, r2
 8000514:	f105 38ff 	add.w	r8, r5, #4294967295
 8000518:	d216      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 800051a:	4291      	cmp	r1, r2
 800051c:	d914      	bls.n	8000548 <__udivmoddi4+0x2a8>
 800051e:	3d02      	subs	r5, #2
 8000520:	4462      	add	r2, ip
 8000522:	1a52      	subs	r2, r2, r1
 8000524:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000528:	e738      	b.n	800039c <__udivmoddi4+0xfc>
 800052a:	4631      	mov	r1, r6
 800052c:	4630      	mov	r0, r6
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xa2>
 8000530:	4639      	mov	r1, r7
 8000532:	e6e6      	b.n	8000302 <__udivmoddi4+0x62>
 8000534:	4610      	mov	r0, r2
 8000536:	e6fb      	b.n	8000330 <__udivmoddi4+0x90>
 8000538:	4548      	cmp	r0, r9
 800053a:	d2a9      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 800053c:	ebb9 0802 	subs.w	r8, r9, r2
 8000540:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000544:	3b01      	subs	r3, #1
 8000546:	e7a3      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000548:	4645      	mov	r5, r8
 800054a:	e7ea      	b.n	8000522 <__udivmoddi4+0x282>
 800054c:	462b      	mov	r3, r5
 800054e:	e794      	b.n	800047a <__udivmoddi4+0x1da>
 8000550:	4640      	mov	r0, r8
 8000552:	e7d1      	b.n	80004f8 <__udivmoddi4+0x258>
 8000554:	46d0      	mov	r8, sl
 8000556:	e77b      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000558:	3d02      	subs	r5, #2
 800055a:	4462      	add	r2, ip
 800055c:	e732      	b.n	80003c4 <__udivmoddi4+0x124>
 800055e:	4608      	mov	r0, r1
 8000560:	e70a      	b.n	8000378 <__udivmoddi4+0xd8>
 8000562:	4464      	add	r4, ip
 8000564:	3802      	subs	r0, #2
 8000566:	e742      	b.n	80003ee <__udivmoddi4+0x14e>

08000568 <__aeabi_idiv0>:
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop

0800056c <_write>:
  * @brief  The application entry point.
  * @retval int
  */
uint8_t Rx_data[10];

int _write(int file, char *ptr, int len){
 800056c:	b580      	push	{r7, lr}
 800056e:	b084      	sub	sp, #16
 8000570:	af00      	add	r7, sp, #0
 8000572:	60f8      	str	r0, [r7, #12]
 8000574:	60b9      	str	r1, [r7, #8]
 8000576:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)ptr, len, 10);
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	b29a      	uxth	r2, r3
 800057c:	230a      	movs	r3, #10
 800057e:	68b9      	ldr	r1, [r7, #8]
 8000580:	4803      	ldr	r0, [pc, #12]	; (8000590 <_write+0x24>)
 8000582:	f002 fc37 	bl	8002df4 <HAL_UART_Transmit>
	return len;
 8000586:	687b      	ldr	r3, [r7, #4]
}
 8000588:	4618      	mov	r0, r3
 800058a:	3710      	adds	r7, #16
 800058c:	46bd      	mov	sp, r7
 800058e:	bd80      	pop	{r7, pc}
 8000590:	20000084 	.word	0x20000084

08000594 <HAL_UART_RxHalfCpltCallback>:

void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart){
 8000594:	b580      	push	{r7, lr}
 8000596:	b082      	sub	sp, #8
 8000598:	af00      	add	r7, sp, #0
 800059a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin (GPIOA,GPIO_PIN_5);
 800059c:	2120      	movs	r1, #32
 800059e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005a2:	f001 f89f 	bl	80016e4 <HAL_GPIO_TogglePin>

}
 80005a6:	bf00      	nop
 80005a8:	3708      	adds	r7, #8
 80005aa:	46bd      	mov	sp, r7
 80005ac:	bd80      	pop	{r7, pc}
	...

080005b0 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b082      	sub	sp, #8
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]
	printf("Received: [%s]\r\n", Rx_data);
 80005b8:	4906      	ldr	r1, [pc, #24]	; (80005d4 <HAL_UART_RxCpltCallback+0x24>)
 80005ba:	4807      	ldr	r0, [pc, #28]	; (80005d8 <HAL_UART_RxCpltCallback+0x28>)
 80005bc:	f004 fa4a 	bl	8004a54 <iprintf>
	HAL_UART_Receive_DMA(&huart2, Rx_data, 4);
 80005c0:	2204      	movs	r2, #4
 80005c2:	4904      	ldr	r1, [pc, #16]	; (80005d4 <HAL_UART_RxCpltCallback+0x24>)
 80005c4:	4805      	ldr	r0, [pc, #20]	; (80005dc <HAL_UART_RxCpltCallback+0x2c>)
 80005c6:	f002 fceb 	bl	8002fa0 <HAL_UART_Receive_DMA>
}
 80005ca:	bf00      	nop
 80005cc:	3708      	adds	r7, #8
 80005ce:	46bd      	mov	sp, r7
 80005d0:	bd80      	pop	{r7, pc}
 80005d2:	bf00      	nop
 80005d4:	20000154 	.word	0x20000154
 80005d8:	08005754 	.word	0x08005754
 80005dc:	20000084 	.word	0x20000084

080005e0 <main>:

int main(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005e4:	f000 fab8 	bl	8000b58 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005e8:	f000 f818 	bl	800061c <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ec:	f000 f8b6 	bl	800075c <MX_GPIO_Init>
  MX_DMA_Init();
 80005f0:	f000 f896 	bl	8000720 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80005f4:	f000 f864 	bl	80006c0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */
  HAL_UART_Receive_IT(&huart2, Rx_data, 4);
 80005f8:	2204      	movs	r2, #4
 80005fa:	4906      	ldr	r1, [pc, #24]	; (8000614 <main+0x34>)
 80005fc:	4806      	ldr	r0, [pc, #24]	; (8000618 <main+0x38>)
 80005fe:	f002 fc83 	bl	8002f08 <HAL_UART_Receive_IT>
  HAL_UART_Receive_DMA(&huart2, Rx_data, 4);
 8000602:	2204      	movs	r2, #4
 8000604:	4903      	ldr	r1, [pc, #12]	; (8000614 <main+0x34>)
 8000606:	4804      	ldr	r0, [pc, #16]	; (8000618 <main+0x38>)
 8000608:	f002 fcca 	bl	8002fa0 <HAL_UART_Receive_DMA>
 800060c:	2300      	movs	r3, #0
  /* USER CODE BEGIN WHILE */
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */
}
 800060e:	4618      	mov	r0, r3
 8000610:	bd80      	pop	{r7, pc}
 8000612:	bf00      	nop
 8000614:	20000154 	.word	0x20000154
 8000618:	20000084 	.word	0x20000084

0800061c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b096      	sub	sp, #88	; 0x58
 8000620:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000622:	f107 0314 	add.w	r3, r7, #20
 8000626:	2244      	movs	r2, #68	; 0x44
 8000628:	2100      	movs	r1, #0
 800062a:	4618      	mov	r0, r3
 800062c:	f004 fa67 	bl	8004afe <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000630:	463b      	mov	r3, r7
 8000632:	2200      	movs	r2, #0
 8000634:	601a      	str	r2, [r3, #0]
 8000636:	605a      	str	r2, [r3, #4]
 8000638:	609a      	str	r2, [r3, #8]
 800063a:	60da      	str	r2, [r3, #12]
 800063c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800063e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000642:	f001 f877 	bl	8001734 <HAL_PWREx_ControlVoltageScaling>
 8000646:	4603      	mov	r3, r0
 8000648:	2b00      	cmp	r3, #0
 800064a:	d001      	beq.n	8000650 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800064c:	f000 f8c4 	bl	80007d8 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000650:	2302      	movs	r3, #2
 8000652:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000654:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000658:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800065a:	2310      	movs	r3, #16
 800065c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800065e:	2302      	movs	r3, #2
 8000660:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000662:	2302      	movs	r3, #2
 8000664:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000666:	2301      	movs	r3, #1
 8000668:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800066a:	230a      	movs	r3, #10
 800066c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800066e:	2307      	movs	r3, #7
 8000670:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000672:	2302      	movs	r3, #2
 8000674:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000676:	2302      	movs	r3, #2
 8000678:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800067a:	f107 0314 	add.w	r3, r7, #20
 800067e:	4618      	mov	r0, r3
 8000680:	f001 f8ae 	bl	80017e0 <HAL_RCC_OscConfig>
 8000684:	4603      	mov	r3, r0
 8000686:	2b00      	cmp	r3, #0
 8000688:	d001      	beq.n	800068e <SystemClock_Config+0x72>
  {
    Error_Handler();
 800068a:	f000 f8a5 	bl	80007d8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800068e:	230f      	movs	r3, #15
 8000690:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000692:	2303      	movs	r3, #3
 8000694:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000696:	2300      	movs	r3, #0
 8000698:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800069a:	2300      	movs	r3, #0
 800069c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800069e:	2300      	movs	r3, #0
 80006a0:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80006a2:	463b      	mov	r3, r7
 80006a4:	2104      	movs	r1, #4
 80006a6:	4618      	mov	r0, r3
 80006a8:	f001 fc76 	bl	8001f98 <HAL_RCC_ClockConfig>
 80006ac:	4603      	mov	r3, r0
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d001      	beq.n	80006b6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80006b2:	f000 f891 	bl	80007d8 <Error_Handler>
  }
}
 80006b6:	bf00      	nop
 80006b8:	3758      	adds	r7, #88	; 0x58
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bd80      	pop	{r7, pc}
	...

080006c0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_Init 0 */
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */
  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006c4:	4b14      	ldr	r3, [pc, #80]	; (8000718 <MX_USART2_UART_Init+0x58>)
 80006c6:	4a15      	ldr	r2, [pc, #84]	; (800071c <MX_USART2_UART_Init+0x5c>)
 80006c8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 921600;
 80006ca:	4b13      	ldr	r3, [pc, #76]	; (8000718 <MX_USART2_UART_Init+0x58>)
 80006cc:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 80006d0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006d2:	4b11      	ldr	r3, [pc, #68]	; (8000718 <MX_USART2_UART_Init+0x58>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006d8:	4b0f      	ldr	r3, [pc, #60]	; (8000718 <MX_USART2_UART_Init+0x58>)
 80006da:	2200      	movs	r2, #0
 80006dc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006de:	4b0e      	ldr	r3, [pc, #56]	; (8000718 <MX_USART2_UART_Init+0x58>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006e4:	4b0c      	ldr	r3, [pc, #48]	; (8000718 <MX_USART2_UART_Init+0x58>)
 80006e6:	220c      	movs	r2, #12
 80006e8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006ea:	4b0b      	ldr	r3, [pc, #44]	; (8000718 <MX_USART2_UART_Init+0x58>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006f0:	4b09      	ldr	r3, [pc, #36]	; (8000718 <MX_USART2_UART_Init+0x58>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006f6:	4b08      	ldr	r3, [pc, #32]	; (8000718 <MX_USART2_UART_Init+0x58>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006fc:	4b06      	ldr	r3, [pc, #24]	; (8000718 <MX_USART2_UART_Init+0x58>)
 80006fe:	2200      	movs	r2, #0
 8000700:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000702:	4805      	ldr	r0, [pc, #20]	; (8000718 <MX_USART2_UART_Init+0x58>)
 8000704:	f002 fb28 	bl	8002d58 <HAL_UART_Init>
 8000708:	4603      	mov	r3, r0
 800070a:	2b00      	cmp	r3, #0
 800070c:	d001      	beq.n	8000712 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800070e:	f000 f863 	bl	80007d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */
  /* USER CODE END USART2_Init 2 */

}
 8000712:	bf00      	nop
 8000714:	bd80      	pop	{r7, pc}
 8000716:	bf00      	nop
 8000718:	20000084 	.word	0x20000084
 800071c:	40004400 	.word	0x40004400

08000720 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b082      	sub	sp, #8
 8000724:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000726:	4b0c      	ldr	r3, [pc, #48]	; (8000758 <MX_DMA_Init+0x38>)
 8000728:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800072a:	4a0b      	ldr	r2, [pc, #44]	; (8000758 <MX_DMA_Init+0x38>)
 800072c:	f043 0301 	orr.w	r3, r3, #1
 8000730:	6493      	str	r3, [r2, #72]	; 0x48
 8000732:	4b09      	ldr	r3, [pc, #36]	; (8000758 <MX_DMA_Init+0x38>)
 8000734:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000736:	f003 0301 	and.w	r3, r3, #1
 800073a:	607b      	str	r3, [r7, #4]
 800073c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 800073e:	2200      	movs	r2, #0
 8000740:	2100      	movs	r1, #0
 8000742:	2010      	movs	r0, #16
 8000744:	f000 fb5f 	bl	8000e06 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000748:	2010      	movs	r0, #16
 800074a:	f000 fb78 	bl	8000e3e <HAL_NVIC_EnableIRQ>

}
 800074e:	bf00      	nop
 8000750:	3708      	adds	r7, #8
 8000752:	46bd      	mov	sp, r7
 8000754:	bd80      	pop	{r7, pc}
 8000756:	bf00      	nop
 8000758:	40021000 	.word	0x40021000

0800075c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b088      	sub	sp, #32
 8000760:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000762:	f107 030c 	add.w	r3, r7, #12
 8000766:	2200      	movs	r2, #0
 8000768:	601a      	str	r2, [r3, #0]
 800076a:	605a      	str	r2, [r3, #4]
 800076c:	609a      	str	r2, [r3, #8]
 800076e:	60da      	str	r2, [r3, #12]
 8000770:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000772:	4b18      	ldr	r3, [pc, #96]	; (80007d4 <MX_GPIO_Init+0x78>)
 8000774:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000776:	4a17      	ldr	r2, [pc, #92]	; (80007d4 <MX_GPIO_Init+0x78>)
 8000778:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800077c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800077e:	4b15      	ldr	r3, [pc, #84]	; (80007d4 <MX_GPIO_Init+0x78>)
 8000780:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000782:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000786:	60bb      	str	r3, [r7, #8]
 8000788:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800078a:	4b12      	ldr	r3, [pc, #72]	; (80007d4 <MX_GPIO_Init+0x78>)
 800078c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800078e:	4a11      	ldr	r2, [pc, #68]	; (80007d4 <MX_GPIO_Init+0x78>)
 8000790:	f043 0301 	orr.w	r3, r3, #1
 8000794:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000796:	4b0f      	ldr	r3, [pc, #60]	; (80007d4 <MX_GPIO_Init+0x78>)
 8000798:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800079a:	f003 0301 	and.w	r3, r3, #1
 800079e:	607b      	str	r3, [r7, #4]
 80007a0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|LD2_Pin, GPIO_PIN_RESET);
 80007a2:	2200      	movs	r2, #0
 80007a4:	2121      	movs	r1, #33	; 0x21
 80007a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007aa:	f000 ff83 	bl	80016b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA0 LD2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|LD2_Pin;
 80007ae:	2321      	movs	r3, #33	; 0x21
 80007b0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007b2:	2301      	movs	r3, #1
 80007b4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b6:	2300      	movs	r3, #0
 80007b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ba:	2300      	movs	r3, #0
 80007bc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007be:	f107 030c 	add.w	r3, r7, #12
 80007c2:	4619      	mov	r1, r3
 80007c4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007c8:	f000 fdca 	bl	8001360 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007cc:	bf00      	nop
 80007ce:	3720      	adds	r7, #32
 80007d0:	46bd      	mov	sp, r7
 80007d2:	bd80      	pop	{r7, pc}
 80007d4:	40021000 	.word	0x40021000

080007d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007d8:	b480      	push	{r7}
 80007da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* USER CODE END Error_Handler_Debug */
}
 80007dc:	bf00      	nop
 80007de:	46bd      	mov	sp, r7
 80007e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e4:	4770      	bx	lr
	...

080007e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007e8:	b480      	push	{r7}
 80007ea:	b083      	sub	sp, #12
 80007ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007ee:	4b0f      	ldr	r3, [pc, #60]	; (800082c <HAL_MspInit+0x44>)
 80007f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80007f2:	4a0e      	ldr	r2, [pc, #56]	; (800082c <HAL_MspInit+0x44>)
 80007f4:	f043 0301 	orr.w	r3, r3, #1
 80007f8:	6613      	str	r3, [r2, #96]	; 0x60
 80007fa:	4b0c      	ldr	r3, [pc, #48]	; (800082c <HAL_MspInit+0x44>)
 80007fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80007fe:	f003 0301 	and.w	r3, r3, #1
 8000802:	607b      	str	r3, [r7, #4]
 8000804:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000806:	4b09      	ldr	r3, [pc, #36]	; (800082c <HAL_MspInit+0x44>)
 8000808:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800080a:	4a08      	ldr	r2, [pc, #32]	; (800082c <HAL_MspInit+0x44>)
 800080c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000810:	6593      	str	r3, [r2, #88]	; 0x58
 8000812:	4b06      	ldr	r3, [pc, #24]	; (800082c <HAL_MspInit+0x44>)
 8000814:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000816:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800081a:	603b      	str	r3, [r7, #0]
 800081c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800081e:	bf00      	nop
 8000820:	370c      	adds	r7, #12
 8000822:	46bd      	mov	sp, r7
 8000824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000828:	4770      	bx	lr
 800082a:	bf00      	nop
 800082c:	40021000 	.word	0x40021000

08000830 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b0ac      	sub	sp, #176	; 0xb0
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000838:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800083c:	2200      	movs	r2, #0
 800083e:	601a      	str	r2, [r3, #0]
 8000840:	605a      	str	r2, [r3, #4]
 8000842:	609a      	str	r2, [r3, #8]
 8000844:	60da      	str	r2, [r3, #12]
 8000846:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000848:	f107 0314 	add.w	r3, r7, #20
 800084c:	2288      	movs	r2, #136	; 0x88
 800084e:	2100      	movs	r1, #0
 8000850:	4618      	mov	r0, r3
 8000852:	f004 f954 	bl	8004afe <memset>
  if(huart->Instance==USART2)
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	4a3a      	ldr	r2, [pc, #232]	; (8000944 <HAL_UART_MspInit+0x114>)
 800085c:	4293      	cmp	r3, r2
 800085e:	d16c      	bne.n	800093a <HAL_UART_MspInit+0x10a>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000860:	2302      	movs	r3, #2
 8000862:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000864:	2300      	movs	r3, #0
 8000866:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000868:	f107 0314 	add.w	r3, r7, #20
 800086c:	4618      	mov	r0, r3
 800086e:	f001 fdb7 	bl	80023e0 <HAL_RCCEx_PeriphCLKConfig>
 8000872:	4603      	mov	r3, r0
 8000874:	2b00      	cmp	r3, #0
 8000876:	d001      	beq.n	800087c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000878:	f7ff ffae 	bl	80007d8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800087c:	4b32      	ldr	r3, [pc, #200]	; (8000948 <HAL_UART_MspInit+0x118>)
 800087e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000880:	4a31      	ldr	r2, [pc, #196]	; (8000948 <HAL_UART_MspInit+0x118>)
 8000882:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000886:	6593      	str	r3, [r2, #88]	; 0x58
 8000888:	4b2f      	ldr	r3, [pc, #188]	; (8000948 <HAL_UART_MspInit+0x118>)
 800088a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800088c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000890:	613b      	str	r3, [r7, #16]
 8000892:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000894:	4b2c      	ldr	r3, [pc, #176]	; (8000948 <HAL_UART_MspInit+0x118>)
 8000896:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000898:	4a2b      	ldr	r2, [pc, #172]	; (8000948 <HAL_UART_MspInit+0x118>)
 800089a:	f043 0301 	orr.w	r3, r3, #1
 800089e:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008a0:	4b29      	ldr	r3, [pc, #164]	; (8000948 <HAL_UART_MspInit+0x118>)
 80008a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008a4:	f003 0301 	and.w	r3, r3, #1
 80008a8:	60fb      	str	r3, [r7, #12]
 80008aa:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80008ac:	230c      	movs	r3, #12
 80008ae:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008b2:	2302      	movs	r3, #2
 80008b4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b8:	2300      	movs	r3, #0
 80008ba:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008be:	2303      	movs	r3, #3
 80008c0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80008c4:	2307      	movs	r3, #7
 80008c6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008ca:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80008ce:	4619      	mov	r1, r3
 80008d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008d4:	f000 fd44 	bl	8001360 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 80008d8:	4b1c      	ldr	r3, [pc, #112]	; (800094c <HAL_UART_MspInit+0x11c>)
 80008da:	4a1d      	ldr	r2, [pc, #116]	; (8000950 <HAL_UART_MspInit+0x120>)
 80008dc:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_2;
 80008de:	4b1b      	ldr	r3, [pc, #108]	; (800094c <HAL_UART_MspInit+0x11c>)
 80008e0:	2202      	movs	r2, #2
 80008e2:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80008e4:	4b19      	ldr	r3, [pc, #100]	; (800094c <HAL_UART_MspInit+0x11c>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80008ea:	4b18      	ldr	r3, [pc, #96]	; (800094c <HAL_UART_MspInit+0x11c>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80008f0:	4b16      	ldr	r3, [pc, #88]	; (800094c <HAL_UART_MspInit+0x11c>)
 80008f2:	2280      	movs	r2, #128	; 0x80
 80008f4:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80008f6:	4b15      	ldr	r3, [pc, #84]	; (800094c <HAL_UART_MspInit+0x11c>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80008fc:	4b13      	ldr	r3, [pc, #76]	; (800094c <HAL_UART_MspInit+0x11c>)
 80008fe:	2200      	movs	r2, #0
 8000900:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8000902:	4b12      	ldr	r3, [pc, #72]	; (800094c <HAL_UART_MspInit+0x11c>)
 8000904:	2200      	movs	r2, #0
 8000906:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000908:	4b10      	ldr	r3, [pc, #64]	; (800094c <HAL_UART_MspInit+0x11c>)
 800090a:	2200      	movs	r2, #0
 800090c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800090e:	480f      	ldr	r0, [pc, #60]	; (800094c <HAL_UART_MspInit+0x11c>)
 8000910:	f000 fab0 	bl	8000e74 <HAL_DMA_Init>
 8000914:	4603      	mov	r3, r0
 8000916:	2b00      	cmp	r3, #0
 8000918:	d001      	beq.n	800091e <HAL_UART_MspInit+0xee>
    {
      Error_Handler();
 800091a:	f7ff ff5d 	bl	80007d8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	4a0a      	ldr	r2, [pc, #40]	; (800094c <HAL_UART_MspInit+0x11c>)
 8000922:	675a      	str	r2, [r3, #116]	; 0x74
 8000924:	4a09      	ldr	r2, [pc, #36]	; (800094c <HAL_UART_MspInit+0x11c>)
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800092a:	2200      	movs	r2, #0
 800092c:	2100      	movs	r1, #0
 800092e:	2026      	movs	r0, #38	; 0x26
 8000930:	f000 fa69 	bl	8000e06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000934:	2026      	movs	r0, #38	; 0x26
 8000936:	f000 fa82 	bl	8000e3e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800093a:	bf00      	nop
 800093c:	37b0      	adds	r7, #176	; 0xb0
 800093e:	46bd      	mov	sp, r7
 8000940:	bd80      	pop	{r7, pc}
 8000942:	bf00      	nop
 8000944:	40004400 	.word	0x40004400
 8000948:	40021000 	.word	0x40021000
 800094c:	2000010c 	.word	0x2000010c
 8000950:	4002006c 	.word	0x4002006c

08000954 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000954:	b480      	push	{r7}
 8000956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000958:	e7fe      	b.n	8000958 <NMI_Handler+0x4>

0800095a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800095a:	b480      	push	{r7}
 800095c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800095e:	e7fe      	b.n	800095e <HardFault_Handler+0x4>

08000960 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000960:	b480      	push	{r7}
 8000962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000964:	e7fe      	b.n	8000964 <MemManage_Handler+0x4>

08000966 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000966:	b480      	push	{r7}
 8000968:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800096a:	e7fe      	b.n	800096a <BusFault_Handler+0x4>

0800096c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800096c:	b480      	push	{r7}
 800096e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000970:	e7fe      	b.n	8000970 <UsageFault_Handler+0x4>

08000972 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000972:	b480      	push	{r7}
 8000974:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000976:	bf00      	nop
 8000978:	46bd      	mov	sp, r7
 800097a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097e:	4770      	bx	lr

08000980 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000980:	b480      	push	{r7}
 8000982:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000984:	bf00      	nop
 8000986:	46bd      	mov	sp, r7
 8000988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098c:	4770      	bx	lr

0800098e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800098e:	b480      	push	{r7}
 8000990:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000992:	bf00      	nop
 8000994:	46bd      	mov	sp, r7
 8000996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099a:	4770      	bx	lr

0800099c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009a0:	f000 f936 	bl	8000c10 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009a4:	bf00      	nop
 80009a6:	bd80      	pop	{r7, pc}

080009a8 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80009ac:	4802      	ldr	r0, [pc, #8]	; (80009b8 <DMA1_Channel6_IRQHandler+0x10>)
 80009ae:	f000 fbf8 	bl	80011a2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 80009b2:	bf00      	nop
 80009b4:	bd80      	pop	{r7, pc}
 80009b6:	bf00      	nop
 80009b8:	2000010c 	.word	0x2000010c

080009bc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80009c0:	4802      	ldr	r0, [pc, #8]	; (80009cc <USART2_IRQHandler+0x10>)
 80009c2:	f002 fb39 	bl	8003038 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80009c6:	bf00      	nop
 80009c8:	bd80      	pop	{r7, pc}
 80009ca:	bf00      	nop
 80009cc:	20000084 	.word	0x20000084

080009d0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b086      	sub	sp, #24
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	60f8      	str	r0, [r7, #12]
 80009d8:	60b9      	str	r1, [r7, #8]
 80009da:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009dc:	2300      	movs	r3, #0
 80009de:	617b      	str	r3, [r7, #20]
 80009e0:	e00a      	b.n	80009f8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80009e2:	f3af 8000 	nop.w
 80009e6:	4601      	mov	r1, r0
 80009e8:	68bb      	ldr	r3, [r7, #8]
 80009ea:	1c5a      	adds	r2, r3, #1
 80009ec:	60ba      	str	r2, [r7, #8]
 80009ee:	b2ca      	uxtb	r2, r1
 80009f0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009f2:	697b      	ldr	r3, [r7, #20]
 80009f4:	3301      	adds	r3, #1
 80009f6:	617b      	str	r3, [r7, #20]
 80009f8:	697a      	ldr	r2, [r7, #20]
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	429a      	cmp	r2, r3
 80009fe:	dbf0      	blt.n	80009e2 <_read+0x12>
  }

  return len;
 8000a00:	687b      	ldr	r3, [r7, #4]
}
 8000a02:	4618      	mov	r0, r3
 8000a04:	3718      	adds	r7, #24
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bd80      	pop	{r7, pc}

08000a0a <_close>:
  }
  return len;
}

int _close(int file)
{
 8000a0a:	b480      	push	{r7}
 8000a0c:	b083      	sub	sp, #12
 8000a0e:	af00      	add	r7, sp, #0
 8000a10:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000a12:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000a16:	4618      	mov	r0, r3
 8000a18:	370c      	adds	r7, #12
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a20:	4770      	bx	lr

08000a22 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000a22:	b480      	push	{r7}
 8000a24:	b083      	sub	sp, #12
 8000a26:	af00      	add	r7, sp, #0
 8000a28:	6078      	str	r0, [r7, #4]
 8000a2a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000a2c:	683b      	ldr	r3, [r7, #0]
 8000a2e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a32:	605a      	str	r2, [r3, #4]
  return 0;
 8000a34:	2300      	movs	r3, #0
}
 8000a36:	4618      	mov	r0, r3
 8000a38:	370c      	adds	r7, #12
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a40:	4770      	bx	lr

08000a42 <_isatty>:

int _isatty(int file)
{
 8000a42:	b480      	push	{r7}
 8000a44:	b083      	sub	sp, #12
 8000a46:	af00      	add	r7, sp, #0
 8000a48:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000a4a:	2301      	movs	r3, #1
}
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	370c      	adds	r7, #12
 8000a50:	46bd      	mov	sp, r7
 8000a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a56:	4770      	bx	lr

08000a58 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	b085      	sub	sp, #20
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	60f8      	str	r0, [r7, #12]
 8000a60:	60b9      	str	r1, [r7, #8]
 8000a62:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000a64:	2300      	movs	r3, #0
}
 8000a66:	4618      	mov	r0, r3
 8000a68:	3714      	adds	r7, #20
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a70:	4770      	bx	lr
	...

08000a74 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b086      	sub	sp, #24
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a7c:	4a14      	ldr	r2, [pc, #80]	; (8000ad0 <_sbrk+0x5c>)
 8000a7e:	4b15      	ldr	r3, [pc, #84]	; (8000ad4 <_sbrk+0x60>)
 8000a80:	1ad3      	subs	r3, r2, r3
 8000a82:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a84:	697b      	ldr	r3, [r7, #20]
 8000a86:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a88:	4b13      	ldr	r3, [pc, #76]	; (8000ad8 <_sbrk+0x64>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d102      	bne.n	8000a96 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a90:	4b11      	ldr	r3, [pc, #68]	; (8000ad8 <_sbrk+0x64>)
 8000a92:	4a12      	ldr	r2, [pc, #72]	; (8000adc <_sbrk+0x68>)
 8000a94:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a96:	4b10      	ldr	r3, [pc, #64]	; (8000ad8 <_sbrk+0x64>)
 8000a98:	681a      	ldr	r2, [r3, #0]
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	4413      	add	r3, r2
 8000a9e:	693a      	ldr	r2, [r7, #16]
 8000aa0:	429a      	cmp	r2, r3
 8000aa2:	d207      	bcs.n	8000ab4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000aa4:	f004 f87a 	bl	8004b9c <__errno>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	220c      	movs	r2, #12
 8000aac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000aae:	f04f 33ff 	mov.w	r3, #4294967295
 8000ab2:	e009      	b.n	8000ac8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ab4:	4b08      	ldr	r3, [pc, #32]	; (8000ad8 <_sbrk+0x64>)
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000aba:	4b07      	ldr	r3, [pc, #28]	; (8000ad8 <_sbrk+0x64>)
 8000abc:	681a      	ldr	r2, [r3, #0]
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	4413      	add	r3, r2
 8000ac2:	4a05      	ldr	r2, [pc, #20]	; (8000ad8 <_sbrk+0x64>)
 8000ac4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ac6:	68fb      	ldr	r3, [r7, #12]
}
 8000ac8:	4618      	mov	r0, r3
 8000aca:	3718      	adds	r7, #24
 8000acc:	46bd      	mov	sp, r7
 8000ace:	bd80      	pop	{r7, pc}
 8000ad0:	20018000 	.word	0x20018000
 8000ad4:	00000400 	.word	0x00000400
 8000ad8:	20000160 	.word	0x20000160
 8000adc:	200002b8 	.word	0x200002b8

08000ae0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000ae4:	4b06      	ldr	r3, [pc, #24]	; (8000b00 <SystemInit+0x20>)
 8000ae6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000aea:	4a05      	ldr	r2, [pc, #20]	; (8000b00 <SystemInit+0x20>)
 8000aec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000af0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000af4:	bf00      	nop
 8000af6:	46bd      	mov	sp, r7
 8000af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop
 8000b00:	e000ed00 	.word	0xe000ed00

08000b04 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000b04:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b3c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000b08:	f7ff ffea 	bl	8000ae0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b0c:	480c      	ldr	r0, [pc, #48]	; (8000b40 <LoopForever+0x6>)
  ldr r1, =_edata
 8000b0e:	490d      	ldr	r1, [pc, #52]	; (8000b44 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b10:	4a0d      	ldr	r2, [pc, #52]	; (8000b48 <LoopForever+0xe>)
  movs r3, #0
 8000b12:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b14:	e002      	b.n	8000b1c <LoopCopyDataInit>

08000b16 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b16:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b18:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b1a:	3304      	adds	r3, #4

08000b1c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b1c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b1e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b20:	d3f9      	bcc.n	8000b16 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b22:	4a0a      	ldr	r2, [pc, #40]	; (8000b4c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b24:	4c0a      	ldr	r4, [pc, #40]	; (8000b50 <LoopForever+0x16>)
  movs r3, #0
 8000b26:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b28:	e001      	b.n	8000b2e <LoopFillZerobss>

08000b2a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b2a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b2c:	3204      	adds	r2, #4

08000b2e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b2e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b30:	d3fb      	bcc.n	8000b2a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b32:	f004 f839 	bl	8004ba8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000b36:	f7ff fd53 	bl	80005e0 <main>

08000b3a <LoopForever>:

LoopForever:
    b LoopForever
 8000b3a:	e7fe      	b.n	8000b3a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000b3c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000b40:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b44:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000b48:	080057f4 	.word	0x080057f4
  ldr r2, =_sbss
 8000b4c:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000b50:	200002b4 	.word	0x200002b4

08000b54 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000b54:	e7fe      	b.n	8000b54 <ADC1_2_IRQHandler>
	...

08000b58 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b082      	sub	sp, #8
 8000b5c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b62:	4b0c      	ldr	r3, [pc, #48]	; (8000b94 <HAL_Init+0x3c>)
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	4a0b      	ldr	r2, [pc, #44]	; (8000b94 <HAL_Init+0x3c>)
 8000b68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b6c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b6e:	2003      	movs	r0, #3
 8000b70:	f000 f93e 	bl	8000df0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b74:	2000      	movs	r0, #0
 8000b76:	f000 f80f 	bl	8000b98 <HAL_InitTick>
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d002      	beq.n	8000b86 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000b80:	2301      	movs	r3, #1
 8000b82:	71fb      	strb	r3, [r7, #7]
 8000b84:	e001      	b.n	8000b8a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000b86:	f7ff fe2f 	bl	80007e8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000b8a:	79fb      	ldrb	r3, [r7, #7]
}
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	3708      	adds	r7, #8
 8000b90:	46bd      	mov	sp, r7
 8000b92:	bd80      	pop	{r7, pc}
 8000b94:	40022000 	.word	0x40022000

08000b98 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b084      	sub	sp, #16
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000ba4:	4b17      	ldr	r3, [pc, #92]	; (8000c04 <HAL_InitTick+0x6c>)
 8000ba6:	781b      	ldrb	r3, [r3, #0]
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d023      	beq.n	8000bf4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000bac:	4b16      	ldr	r3, [pc, #88]	; (8000c08 <HAL_InitTick+0x70>)
 8000bae:	681a      	ldr	r2, [r3, #0]
 8000bb0:	4b14      	ldr	r3, [pc, #80]	; (8000c04 <HAL_InitTick+0x6c>)
 8000bb2:	781b      	ldrb	r3, [r3, #0]
 8000bb4:	4619      	mov	r1, r3
 8000bb6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bba:	fbb3 f3f1 	udiv	r3, r3, r1
 8000bbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	f000 f949 	bl	8000e5a <HAL_SYSTICK_Config>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d10f      	bne.n	8000bee <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	2b0f      	cmp	r3, #15
 8000bd2:	d809      	bhi.n	8000be8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	6879      	ldr	r1, [r7, #4]
 8000bd8:	f04f 30ff 	mov.w	r0, #4294967295
 8000bdc:	f000 f913 	bl	8000e06 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000be0:	4a0a      	ldr	r2, [pc, #40]	; (8000c0c <HAL_InitTick+0x74>)
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	6013      	str	r3, [r2, #0]
 8000be6:	e007      	b.n	8000bf8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000be8:	2301      	movs	r3, #1
 8000bea:	73fb      	strb	r3, [r7, #15]
 8000bec:	e004      	b.n	8000bf8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000bee:	2301      	movs	r3, #1
 8000bf0:	73fb      	strb	r3, [r7, #15]
 8000bf2:	e001      	b.n	8000bf8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000bf4:	2301      	movs	r3, #1
 8000bf6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000bf8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	3710      	adds	r7, #16
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	bf00      	nop
 8000c04:	20000008 	.word	0x20000008
 8000c08:	20000000 	.word	0x20000000
 8000c0c:	20000004 	.word	0x20000004

08000c10 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c10:	b480      	push	{r7}
 8000c12:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000c14:	4b06      	ldr	r3, [pc, #24]	; (8000c30 <HAL_IncTick+0x20>)
 8000c16:	781b      	ldrb	r3, [r3, #0]
 8000c18:	461a      	mov	r2, r3
 8000c1a:	4b06      	ldr	r3, [pc, #24]	; (8000c34 <HAL_IncTick+0x24>)
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	4413      	add	r3, r2
 8000c20:	4a04      	ldr	r2, [pc, #16]	; (8000c34 <HAL_IncTick+0x24>)
 8000c22:	6013      	str	r3, [r2, #0]
}
 8000c24:	bf00      	nop
 8000c26:	46bd      	mov	sp, r7
 8000c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2c:	4770      	bx	lr
 8000c2e:	bf00      	nop
 8000c30:	20000008 	.word	0x20000008
 8000c34:	20000164 	.word	0x20000164

08000c38 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	af00      	add	r7, sp, #0
  return uwTick;
 8000c3c:	4b03      	ldr	r3, [pc, #12]	; (8000c4c <HAL_GetTick+0x14>)
 8000c3e:	681b      	ldr	r3, [r3, #0]
}
 8000c40:	4618      	mov	r0, r3
 8000c42:	46bd      	mov	sp, r7
 8000c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c48:	4770      	bx	lr
 8000c4a:	bf00      	nop
 8000c4c:	20000164 	.word	0x20000164

08000c50 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c50:	b480      	push	{r7}
 8000c52:	b085      	sub	sp, #20
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	f003 0307 	and.w	r3, r3, #7
 8000c5e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c60:	4b0c      	ldr	r3, [pc, #48]	; (8000c94 <__NVIC_SetPriorityGrouping+0x44>)
 8000c62:	68db      	ldr	r3, [r3, #12]
 8000c64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c66:	68ba      	ldr	r2, [r7, #8]
 8000c68:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c6c:	4013      	ands	r3, r2
 8000c6e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c70:	68fb      	ldr	r3, [r7, #12]
 8000c72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c74:	68bb      	ldr	r3, [r7, #8]
 8000c76:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c78:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c82:	4a04      	ldr	r2, [pc, #16]	; (8000c94 <__NVIC_SetPriorityGrouping+0x44>)
 8000c84:	68bb      	ldr	r3, [r7, #8]
 8000c86:	60d3      	str	r3, [r2, #12]
}
 8000c88:	bf00      	nop
 8000c8a:	3714      	adds	r7, #20
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c92:	4770      	bx	lr
 8000c94:	e000ed00 	.word	0xe000ed00

08000c98 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c9c:	4b04      	ldr	r3, [pc, #16]	; (8000cb0 <__NVIC_GetPriorityGrouping+0x18>)
 8000c9e:	68db      	ldr	r3, [r3, #12]
 8000ca0:	0a1b      	lsrs	r3, r3, #8
 8000ca2:	f003 0307 	and.w	r3, r3, #7
}
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cae:	4770      	bx	lr
 8000cb0:	e000ed00 	.word	0xe000ed00

08000cb4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	b083      	sub	sp, #12
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	4603      	mov	r3, r0
 8000cbc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	db0b      	blt.n	8000cde <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cc6:	79fb      	ldrb	r3, [r7, #7]
 8000cc8:	f003 021f 	and.w	r2, r3, #31
 8000ccc:	4907      	ldr	r1, [pc, #28]	; (8000cec <__NVIC_EnableIRQ+0x38>)
 8000cce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cd2:	095b      	lsrs	r3, r3, #5
 8000cd4:	2001      	movs	r0, #1
 8000cd6:	fa00 f202 	lsl.w	r2, r0, r2
 8000cda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000cde:	bf00      	nop
 8000ce0:	370c      	adds	r7, #12
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce8:	4770      	bx	lr
 8000cea:	bf00      	nop
 8000cec:	e000e100 	.word	0xe000e100

08000cf0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	b083      	sub	sp, #12
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	6039      	str	r1, [r7, #0]
 8000cfa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cfc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	db0a      	blt.n	8000d1a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d04:	683b      	ldr	r3, [r7, #0]
 8000d06:	b2da      	uxtb	r2, r3
 8000d08:	490c      	ldr	r1, [pc, #48]	; (8000d3c <__NVIC_SetPriority+0x4c>)
 8000d0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d0e:	0112      	lsls	r2, r2, #4
 8000d10:	b2d2      	uxtb	r2, r2
 8000d12:	440b      	add	r3, r1
 8000d14:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d18:	e00a      	b.n	8000d30 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d1a:	683b      	ldr	r3, [r7, #0]
 8000d1c:	b2da      	uxtb	r2, r3
 8000d1e:	4908      	ldr	r1, [pc, #32]	; (8000d40 <__NVIC_SetPriority+0x50>)
 8000d20:	79fb      	ldrb	r3, [r7, #7]
 8000d22:	f003 030f 	and.w	r3, r3, #15
 8000d26:	3b04      	subs	r3, #4
 8000d28:	0112      	lsls	r2, r2, #4
 8000d2a:	b2d2      	uxtb	r2, r2
 8000d2c:	440b      	add	r3, r1
 8000d2e:	761a      	strb	r2, [r3, #24]
}
 8000d30:	bf00      	nop
 8000d32:	370c      	adds	r7, #12
 8000d34:	46bd      	mov	sp, r7
 8000d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3a:	4770      	bx	lr
 8000d3c:	e000e100 	.word	0xe000e100
 8000d40:	e000ed00 	.word	0xe000ed00

08000d44 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d44:	b480      	push	{r7}
 8000d46:	b089      	sub	sp, #36	; 0x24
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	60f8      	str	r0, [r7, #12]
 8000d4c:	60b9      	str	r1, [r7, #8]
 8000d4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d50:	68fb      	ldr	r3, [r7, #12]
 8000d52:	f003 0307 	and.w	r3, r3, #7
 8000d56:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d58:	69fb      	ldr	r3, [r7, #28]
 8000d5a:	f1c3 0307 	rsb	r3, r3, #7
 8000d5e:	2b04      	cmp	r3, #4
 8000d60:	bf28      	it	cs
 8000d62:	2304      	movcs	r3, #4
 8000d64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d66:	69fb      	ldr	r3, [r7, #28]
 8000d68:	3304      	adds	r3, #4
 8000d6a:	2b06      	cmp	r3, #6
 8000d6c:	d902      	bls.n	8000d74 <NVIC_EncodePriority+0x30>
 8000d6e:	69fb      	ldr	r3, [r7, #28]
 8000d70:	3b03      	subs	r3, #3
 8000d72:	e000      	b.n	8000d76 <NVIC_EncodePriority+0x32>
 8000d74:	2300      	movs	r3, #0
 8000d76:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d78:	f04f 32ff 	mov.w	r2, #4294967295
 8000d7c:	69bb      	ldr	r3, [r7, #24]
 8000d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d82:	43da      	mvns	r2, r3
 8000d84:	68bb      	ldr	r3, [r7, #8]
 8000d86:	401a      	ands	r2, r3
 8000d88:	697b      	ldr	r3, [r7, #20]
 8000d8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d8c:	f04f 31ff 	mov.w	r1, #4294967295
 8000d90:	697b      	ldr	r3, [r7, #20]
 8000d92:	fa01 f303 	lsl.w	r3, r1, r3
 8000d96:	43d9      	mvns	r1, r3
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d9c:	4313      	orrs	r3, r2
         );
}
 8000d9e:	4618      	mov	r0, r3
 8000da0:	3724      	adds	r7, #36	; 0x24
 8000da2:	46bd      	mov	sp, r7
 8000da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da8:	4770      	bx	lr
	...

08000dac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b082      	sub	sp, #8
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	3b01      	subs	r3, #1
 8000db8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000dbc:	d301      	bcc.n	8000dc2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000dbe:	2301      	movs	r3, #1
 8000dc0:	e00f      	b.n	8000de2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000dc2:	4a0a      	ldr	r2, [pc, #40]	; (8000dec <SysTick_Config+0x40>)
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	3b01      	subs	r3, #1
 8000dc8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000dca:	210f      	movs	r1, #15
 8000dcc:	f04f 30ff 	mov.w	r0, #4294967295
 8000dd0:	f7ff ff8e 	bl	8000cf0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000dd4:	4b05      	ldr	r3, [pc, #20]	; (8000dec <SysTick_Config+0x40>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000dda:	4b04      	ldr	r3, [pc, #16]	; (8000dec <SysTick_Config+0x40>)
 8000ddc:	2207      	movs	r2, #7
 8000dde:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000de0:	2300      	movs	r3, #0
}
 8000de2:	4618      	mov	r0, r3
 8000de4:	3708      	adds	r7, #8
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bd80      	pop	{r7, pc}
 8000dea:	bf00      	nop
 8000dec:	e000e010 	.word	0xe000e010

08000df0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b082      	sub	sp, #8
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000df8:	6878      	ldr	r0, [r7, #4]
 8000dfa:	f7ff ff29 	bl	8000c50 <__NVIC_SetPriorityGrouping>
}
 8000dfe:	bf00      	nop
 8000e00:	3708      	adds	r7, #8
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}

08000e06 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e06:	b580      	push	{r7, lr}
 8000e08:	b086      	sub	sp, #24
 8000e0a:	af00      	add	r7, sp, #0
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	60b9      	str	r1, [r7, #8]
 8000e10:	607a      	str	r2, [r7, #4]
 8000e12:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000e14:	2300      	movs	r3, #0
 8000e16:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000e18:	f7ff ff3e 	bl	8000c98 <__NVIC_GetPriorityGrouping>
 8000e1c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e1e:	687a      	ldr	r2, [r7, #4]
 8000e20:	68b9      	ldr	r1, [r7, #8]
 8000e22:	6978      	ldr	r0, [r7, #20]
 8000e24:	f7ff ff8e 	bl	8000d44 <NVIC_EncodePriority>
 8000e28:	4602      	mov	r2, r0
 8000e2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e2e:	4611      	mov	r1, r2
 8000e30:	4618      	mov	r0, r3
 8000e32:	f7ff ff5d 	bl	8000cf0 <__NVIC_SetPriority>
}
 8000e36:	bf00      	nop
 8000e38:	3718      	adds	r7, #24
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd80      	pop	{r7, pc}

08000e3e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e3e:	b580      	push	{r7, lr}
 8000e40:	b082      	sub	sp, #8
 8000e42:	af00      	add	r7, sp, #0
 8000e44:	4603      	mov	r3, r0
 8000e46:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	f7ff ff31 	bl	8000cb4 <__NVIC_EnableIRQ>
}
 8000e52:	bf00      	nop
 8000e54:	3708      	adds	r7, #8
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd80      	pop	{r7, pc}

08000e5a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e5a:	b580      	push	{r7, lr}
 8000e5c:	b082      	sub	sp, #8
 8000e5e:	af00      	add	r7, sp, #0
 8000e60:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e62:	6878      	ldr	r0, [r7, #4]
 8000e64:	f7ff ffa2 	bl	8000dac <SysTick_Config>
 8000e68:	4603      	mov	r3, r0
}
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	3708      	adds	r7, #8
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd80      	pop	{r7, pc}
	...

08000e74 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000e74:	b480      	push	{r7}
 8000e76:	b085      	sub	sp, #20
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d101      	bne.n	8000e86 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8000e82:	2301      	movs	r3, #1
 8000e84:	e098      	b.n	8000fb8 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	461a      	mov	r2, r3
 8000e8c:	4b4d      	ldr	r3, [pc, #308]	; (8000fc4 <HAL_DMA_Init+0x150>)
 8000e8e:	429a      	cmp	r2, r3
 8000e90:	d80f      	bhi.n	8000eb2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	461a      	mov	r2, r3
 8000e98:	4b4b      	ldr	r3, [pc, #300]	; (8000fc8 <HAL_DMA_Init+0x154>)
 8000e9a:	4413      	add	r3, r2
 8000e9c:	4a4b      	ldr	r2, [pc, #300]	; (8000fcc <HAL_DMA_Init+0x158>)
 8000e9e:	fba2 2303 	umull	r2, r3, r2, r3
 8000ea2:	091b      	lsrs	r3, r3, #4
 8000ea4:	009a      	lsls	r2, r3, #2
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	4a48      	ldr	r2, [pc, #288]	; (8000fd0 <HAL_DMA_Init+0x15c>)
 8000eae:	641a      	str	r2, [r3, #64]	; 0x40
 8000eb0:	e00e      	b.n	8000ed0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	461a      	mov	r2, r3
 8000eb8:	4b46      	ldr	r3, [pc, #280]	; (8000fd4 <HAL_DMA_Init+0x160>)
 8000eba:	4413      	add	r3, r2
 8000ebc:	4a43      	ldr	r2, [pc, #268]	; (8000fcc <HAL_DMA_Init+0x158>)
 8000ebe:	fba2 2303 	umull	r2, r3, r2, r3
 8000ec2:	091b      	lsrs	r3, r3, #4
 8000ec4:	009a      	lsls	r2, r3, #2
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	4a42      	ldr	r2, [pc, #264]	; (8000fd8 <HAL_DMA_Init+0x164>)
 8000ece:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	2202      	movs	r2, #2
 8000ed4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8000ee6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000eea:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8000ef4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	691b      	ldr	r3, [r3, #16]
 8000efa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000f00:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	699b      	ldr	r3, [r3, #24]
 8000f06:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000f0c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	6a1b      	ldr	r3, [r3, #32]
 8000f12:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000f14:	68fa      	ldr	r2, [r7, #12]
 8000f16:	4313      	orrs	r3, r2
 8000f18:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	68fa      	ldr	r2, [r7, #12]
 8000f20:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	689b      	ldr	r3, [r3, #8]
 8000f26:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000f2a:	d039      	beq.n	8000fa0 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f30:	4a27      	ldr	r2, [pc, #156]	; (8000fd0 <HAL_DMA_Init+0x15c>)
 8000f32:	4293      	cmp	r3, r2
 8000f34:	d11a      	bne.n	8000f6c <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8000f36:	4b29      	ldr	r3, [pc, #164]	; (8000fdc <HAL_DMA_Init+0x168>)
 8000f38:	681a      	ldr	r2, [r3, #0]
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f3e:	f003 031c 	and.w	r3, r3, #28
 8000f42:	210f      	movs	r1, #15
 8000f44:	fa01 f303 	lsl.w	r3, r1, r3
 8000f48:	43db      	mvns	r3, r3
 8000f4a:	4924      	ldr	r1, [pc, #144]	; (8000fdc <HAL_DMA_Init+0x168>)
 8000f4c:	4013      	ands	r3, r2
 8000f4e:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8000f50:	4b22      	ldr	r3, [pc, #136]	; (8000fdc <HAL_DMA_Init+0x168>)
 8000f52:	681a      	ldr	r2, [r3, #0]
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	6859      	ldr	r1, [r3, #4]
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f5c:	f003 031c 	and.w	r3, r3, #28
 8000f60:	fa01 f303 	lsl.w	r3, r1, r3
 8000f64:	491d      	ldr	r1, [pc, #116]	; (8000fdc <HAL_DMA_Init+0x168>)
 8000f66:	4313      	orrs	r3, r2
 8000f68:	600b      	str	r3, [r1, #0]
 8000f6a:	e019      	b.n	8000fa0 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8000f6c:	4b1c      	ldr	r3, [pc, #112]	; (8000fe0 <HAL_DMA_Init+0x16c>)
 8000f6e:	681a      	ldr	r2, [r3, #0]
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f74:	f003 031c 	and.w	r3, r3, #28
 8000f78:	210f      	movs	r1, #15
 8000f7a:	fa01 f303 	lsl.w	r3, r1, r3
 8000f7e:	43db      	mvns	r3, r3
 8000f80:	4917      	ldr	r1, [pc, #92]	; (8000fe0 <HAL_DMA_Init+0x16c>)
 8000f82:	4013      	ands	r3, r2
 8000f84:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8000f86:	4b16      	ldr	r3, [pc, #88]	; (8000fe0 <HAL_DMA_Init+0x16c>)
 8000f88:	681a      	ldr	r2, [r3, #0]
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	6859      	ldr	r1, [r3, #4]
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f92:	f003 031c 	and.w	r3, r3, #28
 8000f96:	fa01 f303 	lsl.w	r3, r1, r3
 8000f9a:	4911      	ldr	r1, [pc, #68]	; (8000fe0 <HAL_DMA_Init+0x16c>)
 8000f9c:	4313      	orrs	r3, r2
 8000f9e:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	2201      	movs	r2, #1
 8000faa:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8000fb6:	2300      	movs	r3, #0
}
 8000fb8:	4618      	mov	r0, r3
 8000fba:	3714      	adds	r7, #20
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc2:	4770      	bx	lr
 8000fc4:	40020407 	.word	0x40020407
 8000fc8:	bffdfff8 	.word	0xbffdfff8
 8000fcc:	cccccccd 	.word	0xcccccccd
 8000fd0:	40020000 	.word	0x40020000
 8000fd4:	bffdfbf8 	.word	0xbffdfbf8
 8000fd8:	40020400 	.word	0x40020400
 8000fdc:	400200a8 	.word	0x400200a8
 8000fe0:	400204a8 	.word	0x400204a8

08000fe4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b086      	sub	sp, #24
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	60f8      	str	r0, [r7, #12]
 8000fec:	60b9      	str	r1, [r7, #8]
 8000fee:	607a      	str	r2, [r7, #4]
 8000ff0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000ffc:	2b01      	cmp	r3, #1
 8000ffe:	d101      	bne.n	8001004 <HAL_DMA_Start_IT+0x20>
 8001000:	2302      	movs	r3, #2
 8001002:	e04b      	b.n	800109c <HAL_DMA_Start_IT+0xb8>
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	2201      	movs	r2, #1
 8001008:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001012:	b2db      	uxtb	r3, r3
 8001014:	2b01      	cmp	r3, #1
 8001016:	d13a      	bne.n	800108e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	2202      	movs	r2, #2
 800101c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	2200      	movs	r2, #0
 8001024:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001026:	68fb      	ldr	r3, [r7, #12]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	681a      	ldr	r2, [r3, #0]
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	f022 0201 	bic.w	r2, r2, #1
 8001034:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001036:	683b      	ldr	r3, [r7, #0]
 8001038:	687a      	ldr	r2, [r7, #4]
 800103a:	68b9      	ldr	r1, [r7, #8]
 800103c:	68f8      	ldr	r0, [r7, #12]
 800103e:	f000 f95f 	bl	8001300 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001046:	2b00      	cmp	r3, #0
 8001048:	d008      	beq.n	800105c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	681a      	ldr	r2, [r3, #0]
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	f042 020e 	orr.w	r2, r2, #14
 8001058:	601a      	str	r2, [r3, #0]
 800105a:	e00f      	b.n	800107c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	681a      	ldr	r2, [r3, #0]
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	f022 0204 	bic.w	r2, r2, #4
 800106a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	681a      	ldr	r2, [r3, #0]
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	f042 020a 	orr.w	r2, r2, #10
 800107a:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	681a      	ldr	r2, [r3, #0]
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	f042 0201 	orr.w	r2, r2, #1
 800108a:	601a      	str	r2, [r3, #0]
 800108c:	e005      	b.n	800109a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	2200      	movs	r2, #0
 8001092:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8001096:	2302      	movs	r3, #2
 8001098:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800109a:	7dfb      	ldrb	r3, [r7, #23]
}
 800109c:	4618      	mov	r0, r3
 800109e:	3718      	adds	r7, #24
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd80      	pop	{r7, pc}

080010a4 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80010a4:	b480      	push	{r7}
 80010a6:	b085      	sub	sp, #20
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80010ac:	2300      	movs	r3, #0
 80010ae:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80010b6:	b2db      	uxtb	r3, r3
 80010b8:	2b02      	cmp	r3, #2
 80010ba:	d008      	beq.n	80010ce <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	2204      	movs	r2, #4
 80010c0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	2200      	movs	r2, #0
 80010c6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80010ca:	2301      	movs	r3, #1
 80010cc:	e022      	b.n	8001114 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	681a      	ldr	r2, [r3, #0]
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	f022 020e 	bic.w	r2, r2, #14
 80010dc:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	681a      	ldr	r2, [r3, #0]
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	f022 0201 	bic.w	r2, r2, #1
 80010ec:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010f2:	f003 021c 	and.w	r2, r3, #28
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010fa:	2101      	movs	r1, #1
 80010fc:	fa01 f202 	lsl.w	r2, r1, r2
 8001100:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	2201      	movs	r2, #1
 8001106:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	2200      	movs	r2, #0
 800110e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8001112:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001114:	4618      	mov	r0, r3
 8001116:	3714      	adds	r7, #20
 8001118:	46bd      	mov	sp, r7
 800111a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111e:	4770      	bx	lr

08001120 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b084      	sub	sp, #16
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001128:	2300      	movs	r3, #0
 800112a:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001132:	b2db      	uxtb	r3, r3
 8001134:	2b02      	cmp	r3, #2
 8001136:	d005      	beq.n	8001144 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	2204      	movs	r2, #4
 800113c:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800113e:	2301      	movs	r3, #1
 8001140:	73fb      	strb	r3, [r7, #15]
 8001142:	e029      	b.n	8001198 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	681a      	ldr	r2, [r3, #0]
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	f022 020e 	bic.w	r2, r2, #14
 8001152:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	681a      	ldr	r2, [r3, #0]
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	f022 0201 	bic.w	r2, r2, #1
 8001162:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001168:	f003 021c 	and.w	r2, r3, #28
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001170:	2101      	movs	r1, #1
 8001172:	fa01 f202 	lsl.w	r2, r1, r2
 8001176:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	2201      	movs	r2, #1
 800117c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	2200      	movs	r2, #0
 8001184:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800118c:	2b00      	cmp	r3, #0
 800118e:	d003      	beq.n	8001198 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001194:	6878      	ldr	r0, [r7, #4]
 8001196:	4798      	blx	r3
    }
  }
  return status;
 8001198:	7bfb      	ldrb	r3, [r7, #15]
}
 800119a:	4618      	mov	r0, r3
 800119c:	3710      	adds	r7, #16
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}

080011a2 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80011a2:	b580      	push	{r7, lr}
 80011a4:	b084      	sub	sp, #16
 80011a6:	af00      	add	r7, sp, #0
 80011a8:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011be:	f003 031c 	and.w	r3, r3, #28
 80011c2:	2204      	movs	r2, #4
 80011c4:	409a      	lsls	r2, r3
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	4013      	ands	r3, r2
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d026      	beq.n	800121c <HAL_DMA_IRQHandler+0x7a>
 80011ce:	68bb      	ldr	r3, [r7, #8]
 80011d0:	f003 0304 	and.w	r3, r3, #4
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d021      	beq.n	800121c <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	f003 0320 	and.w	r3, r3, #32
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d107      	bne.n	80011f6 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	681a      	ldr	r2, [r3, #0]
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	f022 0204 	bic.w	r2, r2, #4
 80011f4:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011fa:	f003 021c 	and.w	r2, r3, #28
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001202:	2104      	movs	r1, #4
 8001204:	fa01 f202 	lsl.w	r2, r1, r2
 8001208:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800120e:	2b00      	cmp	r3, #0
 8001210:	d071      	beq.n	80012f6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001216:	6878      	ldr	r0, [r7, #4]
 8001218:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800121a:	e06c      	b.n	80012f6 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001220:	f003 031c 	and.w	r3, r3, #28
 8001224:	2202      	movs	r2, #2
 8001226:	409a      	lsls	r2, r3
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	4013      	ands	r3, r2
 800122c:	2b00      	cmp	r3, #0
 800122e:	d02e      	beq.n	800128e <HAL_DMA_IRQHandler+0xec>
 8001230:	68bb      	ldr	r3, [r7, #8]
 8001232:	f003 0302 	and.w	r3, r3, #2
 8001236:	2b00      	cmp	r3, #0
 8001238:	d029      	beq.n	800128e <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	f003 0320 	and.w	r3, r3, #32
 8001244:	2b00      	cmp	r3, #0
 8001246:	d10b      	bne.n	8001260 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	681a      	ldr	r2, [r3, #0]
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	f022 020a 	bic.w	r2, r2, #10
 8001256:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	2201      	movs	r2, #1
 800125c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001264:	f003 021c 	and.w	r2, r3, #28
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800126c:	2102      	movs	r1, #2
 800126e:	fa01 f202 	lsl.w	r2, r1, r2
 8001272:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	2200      	movs	r2, #0
 8001278:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001280:	2b00      	cmp	r3, #0
 8001282:	d038      	beq.n	80012f6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001288:	6878      	ldr	r0, [r7, #4]
 800128a:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800128c:	e033      	b.n	80012f6 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001292:	f003 031c 	and.w	r3, r3, #28
 8001296:	2208      	movs	r2, #8
 8001298:	409a      	lsls	r2, r3
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	4013      	ands	r3, r2
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d02a      	beq.n	80012f8 <HAL_DMA_IRQHandler+0x156>
 80012a2:	68bb      	ldr	r3, [r7, #8]
 80012a4:	f003 0308 	and.w	r3, r3, #8
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d025      	beq.n	80012f8 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	681a      	ldr	r2, [r3, #0]
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	f022 020e 	bic.w	r2, r2, #14
 80012ba:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012c0:	f003 021c 	and.w	r2, r3, #28
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012c8:	2101      	movs	r1, #1
 80012ca:	fa01 f202 	lsl.w	r2, r1, r2
 80012ce:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	2201      	movs	r2, #1
 80012d4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	2201      	movs	r2, #1
 80012da:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	2200      	movs	r2, #0
 80012e2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d004      	beq.n	80012f8 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012f2:	6878      	ldr	r0, [r7, #4]
 80012f4:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80012f6:	bf00      	nop
 80012f8:	bf00      	nop
}
 80012fa:	3710      	adds	r7, #16
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd80      	pop	{r7, pc}

08001300 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001300:	b480      	push	{r7}
 8001302:	b085      	sub	sp, #20
 8001304:	af00      	add	r7, sp, #0
 8001306:	60f8      	str	r0, [r7, #12]
 8001308:	60b9      	str	r1, [r7, #8]
 800130a:	607a      	str	r2, [r7, #4]
 800130c:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001312:	f003 021c 	and.w	r2, r3, #28
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800131a:	2101      	movs	r1, #1
 800131c:	fa01 f202 	lsl.w	r2, r1, r2
 8001320:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	683a      	ldr	r2, [r7, #0]
 8001328:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	689b      	ldr	r3, [r3, #8]
 800132e:	2b10      	cmp	r3, #16
 8001330:	d108      	bne.n	8001344 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	687a      	ldr	r2, [r7, #4]
 8001338:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	68ba      	ldr	r2, [r7, #8]
 8001340:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001342:	e007      	b.n	8001354 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	68ba      	ldr	r2, [r7, #8]
 800134a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	687a      	ldr	r2, [r7, #4]
 8001352:	60da      	str	r2, [r3, #12]
}
 8001354:	bf00      	nop
 8001356:	3714      	adds	r7, #20
 8001358:	46bd      	mov	sp, r7
 800135a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135e:	4770      	bx	lr

08001360 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001360:	b480      	push	{r7}
 8001362:	b087      	sub	sp, #28
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
 8001368:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800136a:	2300      	movs	r3, #0
 800136c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800136e:	e17f      	b.n	8001670 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	681a      	ldr	r2, [r3, #0]
 8001374:	2101      	movs	r1, #1
 8001376:	697b      	ldr	r3, [r7, #20]
 8001378:	fa01 f303 	lsl.w	r3, r1, r3
 800137c:	4013      	ands	r3, r2
 800137e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	2b00      	cmp	r3, #0
 8001384:	f000 8171 	beq.w	800166a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001388:	683b      	ldr	r3, [r7, #0]
 800138a:	685b      	ldr	r3, [r3, #4]
 800138c:	f003 0303 	and.w	r3, r3, #3
 8001390:	2b01      	cmp	r3, #1
 8001392:	d005      	beq.n	80013a0 <HAL_GPIO_Init+0x40>
 8001394:	683b      	ldr	r3, [r7, #0]
 8001396:	685b      	ldr	r3, [r3, #4]
 8001398:	f003 0303 	and.w	r3, r3, #3
 800139c:	2b02      	cmp	r3, #2
 800139e:	d130      	bne.n	8001402 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	689b      	ldr	r3, [r3, #8]
 80013a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80013a6:	697b      	ldr	r3, [r7, #20]
 80013a8:	005b      	lsls	r3, r3, #1
 80013aa:	2203      	movs	r2, #3
 80013ac:	fa02 f303 	lsl.w	r3, r2, r3
 80013b0:	43db      	mvns	r3, r3
 80013b2:	693a      	ldr	r2, [r7, #16]
 80013b4:	4013      	ands	r3, r2
 80013b6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	68da      	ldr	r2, [r3, #12]
 80013bc:	697b      	ldr	r3, [r7, #20]
 80013be:	005b      	lsls	r3, r3, #1
 80013c0:	fa02 f303 	lsl.w	r3, r2, r3
 80013c4:	693a      	ldr	r2, [r7, #16]
 80013c6:	4313      	orrs	r3, r2
 80013c8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	693a      	ldr	r2, [r7, #16]
 80013ce:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	685b      	ldr	r3, [r3, #4]
 80013d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80013d6:	2201      	movs	r2, #1
 80013d8:	697b      	ldr	r3, [r7, #20]
 80013da:	fa02 f303 	lsl.w	r3, r2, r3
 80013de:	43db      	mvns	r3, r3
 80013e0:	693a      	ldr	r2, [r7, #16]
 80013e2:	4013      	ands	r3, r2
 80013e4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80013e6:	683b      	ldr	r3, [r7, #0]
 80013e8:	685b      	ldr	r3, [r3, #4]
 80013ea:	091b      	lsrs	r3, r3, #4
 80013ec:	f003 0201 	and.w	r2, r3, #1
 80013f0:	697b      	ldr	r3, [r7, #20]
 80013f2:	fa02 f303 	lsl.w	r3, r2, r3
 80013f6:	693a      	ldr	r2, [r7, #16]
 80013f8:	4313      	orrs	r3, r2
 80013fa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	693a      	ldr	r2, [r7, #16]
 8001400:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001402:	683b      	ldr	r3, [r7, #0]
 8001404:	685b      	ldr	r3, [r3, #4]
 8001406:	f003 0303 	and.w	r3, r3, #3
 800140a:	2b03      	cmp	r3, #3
 800140c:	d118      	bne.n	8001440 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001412:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001414:	2201      	movs	r2, #1
 8001416:	697b      	ldr	r3, [r7, #20]
 8001418:	fa02 f303 	lsl.w	r3, r2, r3
 800141c:	43db      	mvns	r3, r3
 800141e:	693a      	ldr	r2, [r7, #16]
 8001420:	4013      	ands	r3, r2
 8001422:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	685b      	ldr	r3, [r3, #4]
 8001428:	08db      	lsrs	r3, r3, #3
 800142a:	f003 0201 	and.w	r2, r3, #1
 800142e:	697b      	ldr	r3, [r7, #20]
 8001430:	fa02 f303 	lsl.w	r3, r2, r3
 8001434:	693a      	ldr	r2, [r7, #16]
 8001436:	4313      	orrs	r3, r2
 8001438:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	693a      	ldr	r2, [r7, #16]
 800143e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	685b      	ldr	r3, [r3, #4]
 8001444:	f003 0303 	and.w	r3, r3, #3
 8001448:	2b03      	cmp	r3, #3
 800144a:	d017      	beq.n	800147c <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	68db      	ldr	r3, [r3, #12]
 8001450:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001452:	697b      	ldr	r3, [r7, #20]
 8001454:	005b      	lsls	r3, r3, #1
 8001456:	2203      	movs	r2, #3
 8001458:	fa02 f303 	lsl.w	r3, r2, r3
 800145c:	43db      	mvns	r3, r3
 800145e:	693a      	ldr	r2, [r7, #16]
 8001460:	4013      	ands	r3, r2
 8001462:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	689a      	ldr	r2, [r3, #8]
 8001468:	697b      	ldr	r3, [r7, #20]
 800146a:	005b      	lsls	r3, r3, #1
 800146c:	fa02 f303 	lsl.w	r3, r2, r3
 8001470:	693a      	ldr	r2, [r7, #16]
 8001472:	4313      	orrs	r3, r2
 8001474:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	693a      	ldr	r2, [r7, #16]
 800147a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	685b      	ldr	r3, [r3, #4]
 8001480:	f003 0303 	and.w	r3, r3, #3
 8001484:	2b02      	cmp	r3, #2
 8001486:	d123      	bne.n	80014d0 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001488:	697b      	ldr	r3, [r7, #20]
 800148a:	08da      	lsrs	r2, r3, #3
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	3208      	adds	r2, #8
 8001490:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001494:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001496:	697b      	ldr	r3, [r7, #20]
 8001498:	f003 0307 	and.w	r3, r3, #7
 800149c:	009b      	lsls	r3, r3, #2
 800149e:	220f      	movs	r2, #15
 80014a0:	fa02 f303 	lsl.w	r3, r2, r3
 80014a4:	43db      	mvns	r3, r3
 80014a6:	693a      	ldr	r2, [r7, #16]
 80014a8:	4013      	ands	r3, r2
 80014aa:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80014ac:	683b      	ldr	r3, [r7, #0]
 80014ae:	691a      	ldr	r2, [r3, #16]
 80014b0:	697b      	ldr	r3, [r7, #20]
 80014b2:	f003 0307 	and.w	r3, r3, #7
 80014b6:	009b      	lsls	r3, r3, #2
 80014b8:	fa02 f303 	lsl.w	r3, r2, r3
 80014bc:	693a      	ldr	r2, [r7, #16]
 80014be:	4313      	orrs	r3, r2
 80014c0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80014c2:	697b      	ldr	r3, [r7, #20]
 80014c4:	08da      	lsrs	r2, r3, #3
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	3208      	adds	r2, #8
 80014ca:	6939      	ldr	r1, [r7, #16]
 80014cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80014d6:	697b      	ldr	r3, [r7, #20]
 80014d8:	005b      	lsls	r3, r3, #1
 80014da:	2203      	movs	r2, #3
 80014dc:	fa02 f303 	lsl.w	r3, r2, r3
 80014e0:	43db      	mvns	r3, r3
 80014e2:	693a      	ldr	r2, [r7, #16]
 80014e4:	4013      	ands	r3, r2
 80014e6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80014e8:	683b      	ldr	r3, [r7, #0]
 80014ea:	685b      	ldr	r3, [r3, #4]
 80014ec:	f003 0203 	and.w	r2, r3, #3
 80014f0:	697b      	ldr	r3, [r7, #20]
 80014f2:	005b      	lsls	r3, r3, #1
 80014f4:	fa02 f303 	lsl.w	r3, r2, r3
 80014f8:	693a      	ldr	r2, [r7, #16]
 80014fa:	4313      	orrs	r3, r2
 80014fc:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	693a      	ldr	r2, [r7, #16]
 8001502:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	685b      	ldr	r3, [r3, #4]
 8001508:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800150c:	2b00      	cmp	r3, #0
 800150e:	f000 80ac 	beq.w	800166a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001512:	4b5f      	ldr	r3, [pc, #380]	; (8001690 <HAL_GPIO_Init+0x330>)
 8001514:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001516:	4a5e      	ldr	r2, [pc, #376]	; (8001690 <HAL_GPIO_Init+0x330>)
 8001518:	f043 0301 	orr.w	r3, r3, #1
 800151c:	6613      	str	r3, [r2, #96]	; 0x60
 800151e:	4b5c      	ldr	r3, [pc, #368]	; (8001690 <HAL_GPIO_Init+0x330>)
 8001520:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001522:	f003 0301 	and.w	r3, r3, #1
 8001526:	60bb      	str	r3, [r7, #8]
 8001528:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800152a:	4a5a      	ldr	r2, [pc, #360]	; (8001694 <HAL_GPIO_Init+0x334>)
 800152c:	697b      	ldr	r3, [r7, #20]
 800152e:	089b      	lsrs	r3, r3, #2
 8001530:	3302      	adds	r3, #2
 8001532:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001536:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001538:	697b      	ldr	r3, [r7, #20]
 800153a:	f003 0303 	and.w	r3, r3, #3
 800153e:	009b      	lsls	r3, r3, #2
 8001540:	220f      	movs	r2, #15
 8001542:	fa02 f303 	lsl.w	r3, r2, r3
 8001546:	43db      	mvns	r3, r3
 8001548:	693a      	ldr	r2, [r7, #16]
 800154a:	4013      	ands	r3, r2
 800154c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001554:	d025      	beq.n	80015a2 <HAL_GPIO_Init+0x242>
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	4a4f      	ldr	r2, [pc, #316]	; (8001698 <HAL_GPIO_Init+0x338>)
 800155a:	4293      	cmp	r3, r2
 800155c:	d01f      	beq.n	800159e <HAL_GPIO_Init+0x23e>
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	4a4e      	ldr	r2, [pc, #312]	; (800169c <HAL_GPIO_Init+0x33c>)
 8001562:	4293      	cmp	r3, r2
 8001564:	d019      	beq.n	800159a <HAL_GPIO_Init+0x23a>
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	4a4d      	ldr	r2, [pc, #308]	; (80016a0 <HAL_GPIO_Init+0x340>)
 800156a:	4293      	cmp	r3, r2
 800156c:	d013      	beq.n	8001596 <HAL_GPIO_Init+0x236>
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	4a4c      	ldr	r2, [pc, #304]	; (80016a4 <HAL_GPIO_Init+0x344>)
 8001572:	4293      	cmp	r3, r2
 8001574:	d00d      	beq.n	8001592 <HAL_GPIO_Init+0x232>
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	4a4b      	ldr	r2, [pc, #300]	; (80016a8 <HAL_GPIO_Init+0x348>)
 800157a:	4293      	cmp	r3, r2
 800157c:	d007      	beq.n	800158e <HAL_GPIO_Init+0x22e>
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	4a4a      	ldr	r2, [pc, #296]	; (80016ac <HAL_GPIO_Init+0x34c>)
 8001582:	4293      	cmp	r3, r2
 8001584:	d101      	bne.n	800158a <HAL_GPIO_Init+0x22a>
 8001586:	2306      	movs	r3, #6
 8001588:	e00c      	b.n	80015a4 <HAL_GPIO_Init+0x244>
 800158a:	2307      	movs	r3, #7
 800158c:	e00a      	b.n	80015a4 <HAL_GPIO_Init+0x244>
 800158e:	2305      	movs	r3, #5
 8001590:	e008      	b.n	80015a4 <HAL_GPIO_Init+0x244>
 8001592:	2304      	movs	r3, #4
 8001594:	e006      	b.n	80015a4 <HAL_GPIO_Init+0x244>
 8001596:	2303      	movs	r3, #3
 8001598:	e004      	b.n	80015a4 <HAL_GPIO_Init+0x244>
 800159a:	2302      	movs	r3, #2
 800159c:	e002      	b.n	80015a4 <HAL_GPIO_Init+0x244>
 800159e:	2301      	movs	r3, #1
 80015a0:	e000      	b.n	80015a4 <HAL_GPIO_Init+0x244>
 80015a2:	2300      	movs	r3, #0
 80015a4:	697a      	ldr	r2, [r7, #20]
 80015a6:	f002 0203 	and.w	r2, r2, #3
 80015aa:	0092      	lsls	r2, r2, #2
 80015ac:	4093      	lsls	r3, r2
 80015ae:	693a      	ldr	r2, [r7, #16]
 80015b0:	4313      	orrs	r3, r2
 80015b2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80015b4:	4937      	ldr	r1, [pc, #220]	; (8001694 <HAL_GPIO_Init+0x334>)
 80015b6:	697b      	ldr	r3, [r7, #20]
 80015b8:	089b      	lsrs	r3, r3, #2
 80015ba:	3302      	adds	r3, #2
 80015bc:	693a      	ldr	r2, [r7, #16]
 80015be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80015c2:	4b3b      	ldr	r3, [pc, #236]	; (80016b0 <HAL_GPIO_Init+0x350>)
 80015c4:	689b      	ldr	r3, [r3, #8]
 80015c6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	43db      	mvns	r3, r3
 80015cc:	693a      	ldr	r2, [r7, #16]
 80015ce:	4013      	ands	r3, r2
 80015d0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80015d2:	683b      	ldr	r3, [r7, #0]
 80015d4:	685b      	ldr	r3, [r3, #4]
 80015d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d003      	beq.n	80015e6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80015de:	693a      	ldr	r2, [r7, #16]
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	4313      	orrs	r3, r2
 80015e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80015e6:	4a32      	ldr	r2, [pc, #200]	; (80016b0 <HAL_GPIO_Init+0x350>)
 80015e8:	693b      	ldr	r3, [r7, #16]
 80015ea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80015ec:	4b30      	ldr	r3, [pc, #192]	; (80016b0 <HAL_GPIO_Init+0x350>)
 80015ee:	68db      	ldr	r3, [r3, #12]
 80015f0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	43db      	mvns	r3, r3
 80015f6:	693a      	ldr	r2, [r7, #16]
 80015f8:	4013      	ands	r3, r2
 80015fa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	685b      	ldr	r3, [r3, #4]
 8001600:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001604:	2b00      	cmp	r3, #0
 8001606:	d003      	beq.n	8001610 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001608:	693a      	ldr	r2, [r7, #16]
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	4313      	orrs	r3, r2
 800160e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001610:	4a27      	ldr	r2, [pc, #156]	; (80016b0 <HAL_GPIO_Init+0x350>)
 8001612:	693b      	ldr	r3, [r7, #16]
 8001614:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001616:	4b26      	ldr	r3, [pc, #152]	; (80016b0 <HAL_GPIO_Init+0x350>)
 8001618:	685b      	ldr	r3, [r3, #4]
 800161a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	43db      	mvns	r3, r3
 8001620:	693a      	ldr	r2, [r7, #16]
 8001622:	4013      	ands	r3, r2
 8001624:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	685b      	ldr	r3, [r3, #4]
 800162a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800162e:	2b00      	cmp	r3, #0
 8001630:	d003      	beq.n	800163a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001632:	693a      	ldr	r2, [r7, #16]
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	4313      	orrs	r3, r2
 8001638:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800163a:	4a1d      	ldr	r2, [pc, #116]	; (80016b0 <HAL_GPIO_Init+0x350>)
 800163c:	693b      	ldr	r3, [r7, #16]
 800163e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001640:	4b1b      	ldr	r3, [pc, #108]	; (80016b0 <HAL_GPIO_Init+0x350>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	43db      	mvns	r3, r3
 800164a:	693a      	ldr	r2, [r7, #16]
 800164c:	4013      	ands	r3, r2
 800164e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001650:	683b      	ldr	r3, [r7, #0]
 8001652:	685b      	ldr	r3, [r3, #4]
 8001654:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001658:	2b00      	cmp	r3, #0
 800165a:	d003      	beq.n	8001664 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 800165c:	693a      	ldr	r2, [r7, #16]
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	4313      	orrs	r3, r2
 8001662:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001664:	4a12      	ldr	r2, [pc, #72]	; (80016b0 <HAL_GPIO_Init+0x350>)
 8001666:	693b      	ldr	r3, [r7, #16]
 8001668:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800166a:	697b      	ldr	r3, [r7, #20]
 800166c:	3301      	adds	r3, #1
 800166e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001670:	683b      	ldr	r3, [r7, #0]
 8001672:	681a      	ldr	r2, [r3, #0]
 8001674:	697b      	ldr	r3, [r7, #20]
 8001676:	fa22 f303 	lsr.w	r3, r2, r3
 800167a:	2b00      	cmp	r3, #0
 800167c:	f47f ae78 	bne.w	8001370 <HAL_GPIO_Init+0x10>
  }
}
 8001680:	bf00      	nop
 8001682:	bf00      	nop
 8001684:	371c      	adds	r7, #28
 8001686:	46bd      	mov	sp, r7
 8001688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168c:	4770      	bx	lr
 800168e:	bf00      	nop
 8001690:	40021000 	.word	0x40021000
 8001694:	40010000 	.word	0x40010000
 8001698:	48000400 	.word	0x48000400
 800169c:	48000800 	.word	0x48000800
 80016a0:	48000c00 	.word	0x48000c00
 80016a4:	48001000 	.word	0x48001000
 80016a8:	48001400 	.word	0x48001400
 80016ac:	48001800 	.word	0x48001800
 80016b0:	40010400 	.word	0x40010400

080016b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016b4:	b480      	push	{r7}
 80016b6:	b083      	sub	sp, #12
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
 80016bc:	460b      	mov	r3, r1
 80016be:	807b      	strh	r3, [r7, #2]
 80016c0:	4613      	mov	r3, r2
 80016c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80016c4:	787b      	ldrb	r3, [r7, #1]
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d003      	beq.n	80016d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80016ca:	887a      	ldrh	r2, [r7, #2]
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80016d0:	e002      	b.n	80016d8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80016d2:	887a      	ldrh	r2, [r7, #2]
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80016d8:	bf00      	nop
 80016da:	370c      	adds	r7, #12
 80016dc:	46bd      	mov	sp, r7
 80016de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e2:	4770      	bx	lr

080016e4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80016e4:	b480      	push	{r7}
 80016e6:	b085      	sub	sp, #20
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
 80016ec:	460b      	mov	r3, r1
 80016ee:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	695b      	ldr	r3, [r3, #20]
 80016f4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80016f6:	887a      	ldrh	r2, [r7, #2]
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	4013      	ands	r3, r2
 80016fc:	041a      	lsls	r2, r3, #16
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	43d9      	mvns	r1, r3
 8001702:	887b      	ldrh	r3, [r7, #2]
 8001704:	400b      	ands	r3, r1
 8001706:	431a      	orrs	r2, r3
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	619a      	str	r2, [r3, #24]
}
 800170c:	bf00      	nop
 800170e:	3714      	adds	r7, #20
 8001710:	46bd      	mov	sp, r7
 8001712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001716:	4770      	bx	lr

08001718 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001718:	b480      	push	{r7}
 800171a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800171c:	4b04      	ldr	r3, [pc, #16]	; (8001730 <HAL_PWREx_GetVoltageRange+0x18>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001724:	4618      	mov	r0, r3
 8001726:	46bd      	mov	sp, r7
 8001728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172c:	4770      	bx	lr
 800172e:	bf00      	nop
 8001730:	40007000 	.word	0x40007000

08001734 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001734:	b480      	push	{r7}
 8001736:	b085      	sub	sp, #20
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001742:	d130      	bne.n	80017a6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001744:	4b23      	ldr	r3, [pc, #140]	; (80017d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800174c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001750:	d038      	beq.n	80017c4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001752:	4b20      	ldr	r3, [pc, #128]	; (80017d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800175a:	4a1e      	ldr	r2, [pc, #120]	; (80017d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800175c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001760:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001762:	4b1d      	ldr	r3, [pc, #116]	; (80017d8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	2232      	movs	r2, #50	; 0x32
 8001768:	fb02 f303 	mul.w	r3, r2, r3
 800176c:	4a1b      	ldr	r2, [pc, #108]	; (80017dc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800176e:	fba2 2303 	umull	r2, r3, r2, r3
 8001772:	0c9b      	lsrs	r3, r3, #18
 8001774:	3301      	adds	r3, #1
 8001776:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001778:	e002      	b.n	8001780 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	3b01      	subs	r3, #1
 800177e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001780:	4b14      	ldr	r3, [pc, #80]	; (80017d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001782:	695b      	ldr	r3, [r3, #20]
 8001784:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001788:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800178c:	d102      	bne.n	8001794 <HAL_PWREx_ControlVoltageScaling+0x60>
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	2b00      	cmp	r3, #0
 8001792:	d1f2      	bne.n	800177a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001794:	4b0f      	ldr	r3, [pc, #60]	; (80017d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001796:	695b      	ldr	r3, [r3, #20]
 8001798:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800179c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80017a0:	d110      	bne.n	80017c4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80017a2:	2303      	movs	r3, #3
 80017a4:	e00f      	b.n	80017c6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80017a6:	4b0b      	ldr	r3, [pc, #44]	; (80017d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80017ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80017b2:	d007      	beq.n	80017c4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80017b4:	4b07      	ldr	r3, [pc, #28]	; (80017d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80017bc:	4a05      	ldr	r2, [pc, #20]	; (80017d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80017be:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80017c2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80017c4:	2300      	movs	r3, #0
}
 80017c6:	4618      	mov	r0, r3
 80017c8:	3714      	adds	r7, #20
 80017ca:	46bd      	mov	sp, r7
 80017cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d0:	4770      	bx	lr
 80017d2:	bf00      	nop
 80017d4:	40007000 	.word	0x40007000
 80017d8:	20000000 	.word	0x20000000
 80017dc:	431bde83 	.word	0x431bde83

080017e0 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b088      	sub	sp, #32
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d101      	bne.n	80017f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80017ee:	2301      	movs	r3, #1
 80017f0:	e3ca      	b.n	8001f88 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80017f2:	4b97      	ldr	r3, [pc, #604]	; (8001a50 <HAL_RCC_OscConfig+0x270>)
 80017f4:	689b      	ldr	r3, [r3, #8]
 80017f6:	f003 030c 	and.w	r3, r3, #12
 80017fa:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80017fc:	4b94      	ldr	r3, [pc, #592]	; (8001a50 <HAL_RCC_OscConfig+0x270>)
 80017fe:	68db      	ldr	r3, [r3, #12]
 8001800:	f003 0303 	and.w	r3, r3, #3
 8001804:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f003 0310 	and.w	r3, r3, #16
 800180e:	2b00      	cmp	r3, #0
 8001810:	f000 80e4 	beq.w	80019dc <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001814:	69bb      	ldr	r3, [r7, #24]
 8001816:	2b00      	cmp	r3, #0
 8001818:	d007      	beq.n	800182a <HAL_RCC_OscConfig+0x4a>
 800181a:	69bb      	ldr	r3, [r7, #24]
 800181c:	2b0c      	cmp	r3, #12
 800181e:	f040 808b 	bne.w	8001938 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001822:	697b      	ldr	r3, [r7, #20]
 8001824:	2b01      	cmp	r3, #1
 8001826:	f040 8087 	bne.w	8001938 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800182a:	4b89      	ldr	r3, [pc, #548]	; (8001a50 <HAL_RCC_OscConfig+0x270>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f003 0302 	and.w	r3, r3, #2
 8001832:	2b00      	cmp	r3, #0
 8001834:	d005      	beq.n	8001842 <HAL_RCC_OscConfig+0x62>
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	699b      	ldr	r3, [r3, #24]
 800183a:	2b00      	cmp	r3, #0
 800183c:	d101      	bne.n	8001842 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800183e:	2301      	movs	r3, #1
 8001840:	e3a2      	b.n	8001f88 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	6a1a      	ldr	r2, [r3, #32]
 8001846:	4b82      	ldr	r3, [pc, #520]	; (8001a50 <HAL_RCC_OscConfig+0x270>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f003 0308 	and.w	r3, r3, #8
 800184e:	2b00      	cmp	r3, #0
 8001850:	d004      	beq.n	800185c <HAL_RCC_OscConfig+0x7c>
 8001852:	4b7f      	ldr	r3, [pc, #508]	; (8001a50 <HAL_RCC_OscConfig+0x270>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800185a:	e005      	b.n	8001868 <HAL_RCC_OscConfig+0x88>
 800185c:	4b7c      	ldr	r3, [pc, #496]	; (8001a50 <HAL_RCC_OscConfig+0x270>)
 800185e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001862:	091b      	lsrs	r3, r3, #4
 8001864:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001868:	4293      	cmp	r3, r2
 800186a:	d223      	bcs.n	80018b4 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	6a1b      	ldr	r3, [r3, #32]
 8001870:	4618      	mov	r0, r3
 8001872:	f000 fd55 	bl	8002320 <RCC_SetFlashLatencyFromMSIRange>
 8001876:	4603      	mov	r3, r0
 8001878:	2b00      	cmp	r3, #0
 800187a:	d001      	beq.n	8001880 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800187c:	2301      	movs	r3, #1
 800187e:	e383      	b.n	8001f88 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001880:	4b73      	ldr	r3, [pc, #460]	; (8001a50 <HAL_RCC_OscConfig+0x270>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	4a72      	ldr	r2, [pc, #456]	; (8001a50 <HAL_RCC_OscConfig+0x270>)
 8001886:	f043 0308 	orr.w	r3, r3, #8
 800188a:	6013      	str	r3, [r2, #0]
 800188c:	4b70      	ldr	r3, [pc, #448]	; (8001a50 <HAL_RCC_OscConfig+0x270>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	6a1b      	ldr	r3, [r3, #32]
 8001898:	496d      	ldr	r1, [pc, #436]	; (8001a50 <HAL_RCC_OscConfig+0x270>)
 800189a:	4313      	orrs	r3, r2
 800189c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800189e:	4b6c      	ldr	r3, [pc, #432]	; (8001a50 <HAL_RCC_OscConfig+0x270>)
 80018a0:	685b      	ldr	r3, [r3, #4]
 80018a2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	69db      	ldr	r3, [r3, #28]
 80018aa:	021b      	lsls	r3, r3, #8
 80018ac:	4968      	ldr	r1, [pc, #416]	; (8001a50 <HAL_RCC_OscConfig+0x270>)
 80018ae:	4313      	orrs	r3, r2
 80018b0:	604b      	str	r3, [r1, #4]
 80018b2:	e025      	b.n	8001900 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80018b4:	4b66      	ldr	r3, [pc, #408]	; (8001a50 <HAL_RCC_OscConfig+0x270>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	4a65      	ldr	r2, [pc, #404]	; (8001a50 <HAL_RCC_OscConfig+0x270>)
 80018ba:	f043 0308 	orr.w	r3, r3, #8
 80018be:	6013      	str	r3, [r2, #0]
 80018c0:	4b63      	ldr	r3, [pc, #396]	; (8001a50 <HAL_RCC_OscConfig+0x270>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	6a1b      	ldr	r3, [r3, #32]
 80018cc:	4960      	ldr	r1, [pc, #384]	; (8001a50 <HAL_RCC_OscConfig+0x270>)
 80018ce:	4313      	orrs	r3, r2
 80018d0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80018d2:	4b5f      	ldr	r3, [pc, #380]	; (8001a50 <HAL_RCC_OscConfig+0x270>)
 80018d4:	685b      	ldr	r3, [r3, #4]
 80018d6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	69db      	ldr	r3, [r3, #28]
 80018de:	021b      	lsls	r3, r3, #8
 80018e0:	495b      	ldr	r1, [pc, #364]	; (8001a50 <HAL_RCC_OscConfig+0x270>)
 80018e2:	4313      	orrs	r3, r2
 80018e4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80018e6:	69bb      	ldr	r3, [r7, #24]
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d109      	bne.n	8001900 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	6a1b      	ldr	r3, [r3, #32]
 80018f0:	4618      	mov	r0, r3
 80018f2:	f000 fd15 	bl	8002320 <RCC_SetFlashLatencyFromMSIRange>
 80018f6:	4603      	mov	r3, r0
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d001      	beq.n	8001900 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80018fc:	2301      	movs	r3, #1
 80018fe:	e343      	b.n	8001f88 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001900:	f000 fc4a 	bl	8002198 <HAL_RCC_GetSysClockFreq>
 8001904:	4602      	mov	r2, r0
 8001906:	4b52      	ldr	r3, [pc, #328]	; (8001a50 <HAL_RCC_OscConfig+0x270>)
 8001908:	689b      	ldr	r3, [r3, #8]
 800190a:	091b      	lsrs	r3, r3, #4
 800190c:	f003 030f 	and.w	r3, r3, #15
 8001910:	4950      	ldr	r1, [pc, #320]	; (8001a54 <HAL_RCC_OscConfig+0x274>)
 8001912:	5ccb      	ldrb	r3, [r1, r3]
 8001914:	f003 031f 	and.w	r3, r3, #31
 8001918:	fa22 f303 	lsr.w	r3, r2, r3
 800191c:	4a4e      	ldr	r2, [pc, #312]	; (8001a58 <HAL_RCC_OscConfig+0x278>)
 800191e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001920:	4b4e      	ldr	r3, [pc, #312]	; (8001a5c <HAL_RCC_OscConfig+0x27c>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	4618      	mov	r0, r3
 8001926:	f7ff f937 	bl	8000b98 <HAL_InitTick>
 800192a:	4603      	mov	r3, r0
 800192c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800192e:	7bfb      	ldrb	r3, [r7, #15]
 8001930:	2b00      	cmp	r3, #0
 8001932:	d052      	beq.n	80019da <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001934:	7bfb      	ldrb	r3, [r7, #15]
 8001936:	e327      	b.n	8001f88 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	699b      	ldr	r3, [r3, #24]
 800193c:	2b00      	cmp	r3, #0
 800193e:	d032      	beq.n	80019a6 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001940:	4b43      	ldr	r3, [pc, #268]	; (8001a50 <HAL_RCC_OscConfig+0x270>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	4a42      	ldr	r2, [pc, #264]	; (8001a50 <HAL_RCC_OscConfig+0x270>)
 8001946:	f043 0301 	orr.w	r3, r3, #1
 800194a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800194c:	f7ff f974 	bl	8000c38 <HAL_GetTick>
 8001950:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001952:	e008      	b.n	8001966 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001954:	f7ff f970 	bl	8000c38 <HAL_GetTick>
 8001958:	4602      	mov	r2, r0
 800195a:	693b      	ldr	r3, [r7, #16]
 800195c:	1ad3      	subs	r3, r2, r3
 800195e:	2b02      	cmp	r3, #2
 8001960:	d901      	bls.n	8001966 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001962:	2303      	movs	r3, #3
 8001964:	e310      	b.n	8001f88 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001966:	4b3a      	ldr	r3, [pc, #232]	; (8001a50 <HAL_RCC_OscConfig+0x270>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f003 0302 	and.w	r3, r3, #2
 800196e:	2b00      	cmp	r3, #0
 8001970:	d0f0      	beq.n	8001954 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001972:	4b37      	ldr	r3, [pc, #220]	; (8001a50 <HAL_RCC_OscConfig+0x270>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	4a36      	ldr	r2, [pc, #216]	; (8001a50 <HAL_RCC_OscConfig+0x270>)
 8001978:	f043 0308 	orr.w	r3, r3, #8
 800197c:	6013      	str	r3, [r2, #0]
 800197e:	4b34      	ldr	r3, [pc, #208]	; (8001a50 <HAL_RCC_OscConfig+0x270>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	6a1b      	ldr	r3, [r3, #32]
 800198a:	4931      	ldr	r1, [pc, #196]	; (8001a50 <HAL_RCC_OscConfig+0x270>)
 800198c:	4313      	orrs	r3, r2
 800198e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001990:	4b2f      	ldr	r3, [pc, #188]	; (8001a50 <HAL_RCC_OscConfig+0x270>)
 8001992:	685b      	ldr	r3, [r3, #4]
 8001994:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	69db      	ldr	r3, [r3, #28]
 800199c:	021b      	lsls	r3, r3, #8
 800199e:	492c      	ldr	r1, [pc, #176]	; (8001a50 <HAL_RCC_OscConfig+0x270>)
 80019a0:	4313      	orrs	r3, r2
 80019a2:	604b      	str	r3, [r1, #4]
 80019a4:	e01a      	b.n	80019dc <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80019a6:	4b2a      	ldr	r3, [pc, #168]	; (8001a50 <HAL_RCC_OscConfig+0x270>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	4a29      	ldr	r2, [pc, #164]	; (8001a50 <HAL_RCC_OscConfig+0x270>)
 80019ac:	f023 0301 	bic.w	r3, r3, #1
 80019b0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80019b2:	f7ff f941 	bl	8000c38 <HAL_GetTick>
 80019b6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80019b8:	e008      	b.n	80019cc <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80019ba:	f7ff f93d 	bl	8000c38 <HAL_GetTick>
 80019be:	4602      	mov	r2, r0
 80019c0:	693b      	ldr	r3, [r7, #16]
 80019c2:	1ad3      	subs	r3, r2, r3
 80019c4:	2b02      	cmp	r3, #2
 80019c6:	d901      	bls.n	80019cc <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80019c8:	2303      	movs	r3, #3
 80019ca:	e2dd      	b.n	8001f88 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80019cc:	4b20      	ldr	r3, [pc, #128]	; (8001a50 <HAL_RCC_OscConfig+0x270>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f003 0302 	and.w	r3, r3, #2
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d1f0      	bne.n	80019ba <HAL_RCC_OscConfig+0x1da>
 80019d8:	e000      	b.n	80019dc <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80019da:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f003 0301 	and.w	r3, r3, #1
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d074      	beq.n	8001ad2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80019e8:	69bb      	ldr	r3, [r7, #24]
 80019ea:	2b08      	cmp	r3, #8
 80019ec:	d005      	beq.n	80019fa <HAL_RCC_OscConfig+0x21a>
 80019ee:	69bb      	ldr	r3, [r7, #24]
 80019f0:	2b0c      	cmp	r3, #12
 80019f2:	d10e      	bne.n	8001a12 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80019f4:	697b      	ldr	r3, [r7, #20]
 80019f6:	2b03      	cmp	r3, #3
 80019f8:	d10b      	bne.n	8001a12 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019fa:	4b15      	ldr	r3, [pc, #84]	; (8001a50 <HAL_RCC_OscConfig+0x270>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d064      	beq.n	8001ad0 <HAL_RCC_OscConfig+0x2f0>
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	685b      	ldr	r3, [r3, #4]
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d160      	bne.n	8001ad0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001a0e:	2301      	movs	r3, #1
 8001a10:	e2ba      	b.n	8001f88 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	685b      	ldr	r3, [r3, #4]
 8001a16:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a1a:	d106      	bne.n	8001a2a <HAL_RCC_OscConfig+0x24a>
 8001a1c:	4b0c      	ldr	r3, [pc, #48]	; (8001a50 <HAL_RCC_OscConfig+0x270>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	4a0b      	ldr	r2, [pc, #44]	; (8001a50 <HAL_RCC_OscConfig+0x270>)
 8001a22:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a26:	6013      	str	r3, [r2, #0]
 8001a28:	e026      	b.n	8001a78 <HAL_RCC_OscConfig+0x298>
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	685b      	ldr	r3, [r3, #4]
 8001a2e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a32:	d115      	bne.n	8001a60 <HAL_RCC_OscConfig+0x280>
 8001a34:	4b06      	ldr	r3, [pc, #24]	; (8001a50 <HAL_RCC_OscConfig+0x270>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	4a05      	ldr	r2, [pc, #20]	; (8001a50 <HAL_RCC_OscConfig+0x270>)
 8001a3a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a3e:	6013      	str	r3, [r2, #0]
 8001a40:	4b03      	ldr	r3, [pc, #12]	; (8001a50 <HAL_RCC_OscConfig+0x270>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	4a02      	ldr	r2, [pc, #8]	; (8001a50 <HAL_RCC_OscConfig+0x270>)
 8001a46:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a4a:	6013      	str	r3, [r2, #0]
 8001a4c:	e014      	b.n	8001a78 <HAL_RCC_OscConfig+0x298>
 8001a4e:	bf00      	nop
 8001a50:	40021000 	.word	0x40021000
 8001a54:	08005768 	.word	0x08005768
 8001a58:	20000000 	.word	0x20000000
 8001a5c:	20000004 	.word	0x20000004
 8001a60:	4ba0      	ldr	r3, [pc, #640]	; (8001ce4 <HAL_RCC_OscConfig+0x504>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	4a9f      	ldr	r2, [pc, #636]	; (8001ce4 <HAL_RCC_OscConfig+0x504>)
 8001a66:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a6a:	6013      	str	r3, [r2, #0]
 8001a6c:	4b9d      	ldr	r3, [pc, #628]	; (8001ce4 <HAL_RCC_OscConfig+0x504>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	4a9c      	ldr	r2, [pc, #624]	; (8001ce4 <HAL_RCC_OscConfig+0x504>)
 8001a72:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a76:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	685b      	ldr	r3, [r3, #4]
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d013      	beq.n	8001aa8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a80:	f7ff f8da 	bl	8000c38 <HAL_GetTick>
 8001a84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a86:	e008      	b.n	8001a9a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a88:	f7ff f8d6 	bl	8000c38 <HAL_GetTick>
 8001a8c:	4602      	mov	r2, r0
 8001a8e:	693b      	ldr	r3, [r7, #16]
 8001a90:	1ad3      	subs	r3, r2, r3
 8001a92:	2b64      	cmp	r3, #100	; 0x64
 8001a94:	d901      	bls.n	8001a9a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001a96:	2303      	movs	r3, #3
 8001a98:	e276      	b.n	8001f88 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a9a:	4b92      	ldr	r3, [pc, #584]	; (8001ce4 <HAL_RCC_OscConfig+0x504>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d0f0      	beq.n	8001a88 <HAL_RCC_OscConfig+0x2a8>
 8001aa6:	e014      	b.n	8001ad2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001aa8:	f7ff f8c6 	bl	8000c38 <HAL_GetTick>
 8001aac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001aae:	e008      	b.n	8001ac2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ab0:	f7ff f8c2 	bl	8000c38 <HAL_GetTick>
 8001ab4:	4602      	mov	r2, r0
 8001ab6:	693b      	ldr	r3, [r7, #16]
 8001ab8:	1ad3      	subs	r3, r2, r3
 8001aba:	2b64      	cmp	r3, #100	; 0x64
 8001abc:	d901      	bls.n	8001ac2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001abe:	2303      	movs	r3, #3
 8001ac0:	e262      	b.n	8001f88 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001ac2:	4b88      	ldr	r3, [pc, #544]	; (8001ce4 <HAL_RCC_OscConfig+0x504>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d1f0      	bne.n	8001ab0 <HAL_RCC_OscConfig+0x2d0>
 8001ace:	e000      	b.n	8001ad2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ad0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f003 0302 	and.w	r3, r3, #2
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d060      	beq.n	8001ba0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001ade:	69bb      	ldr	r3, [r7, #24]
 8001ae0:	2b04      	cmp	r3, #4
 8001ae2:	d005      	beq.n	8001af0 <HAL_RCC_OscConfig+0x310>
 8001ae4:	69bb      	ldr	r3, [r7, #24]
 8001ae6:	2b0c      	cmp	r3, #12
 8001ae8:	d119      	bne.n	8001b1e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001aea:	697b      	ldr	r3, [r7, #20]
 8001aec:	2b02      	cmp	r3, #2
 8001aee:	d116      	bne.n	8001b1e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001af0:	4b7c      	ldr	r3, [pc, #496]	; (8001ce4 <HAL_RCC_OscConfig+0x504>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d005      	beq.n	8001b08 <HAL_RCC_OscConfig+0x328>
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	68db      	ldr	r3, [r3, #12]
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d101      	bne.n	8001b08 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001b04:	2301      	movs	r3, #1
 8001b06:	e23f      	b.n	8001f88 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b08:	4b76      	ldr	r3, [pc, #472]	; (8001ce4 <HAL_RCC_OscConfig+0x504>)
 8001b0a:	685b      	ldr	r3, [r3, #4]
 8001b0c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	691b      	ldr	r3, [r3, #16]
 8001b14:	061b      	lsls	r3, r3, #24
 8001b16:	4973      	ldr	r1, [pc, #460]	; (8001ce4 <HAL_RCC_OscConfig+0x504>)
 8001b18:	4313      	orrs	r3, r2
 8001b1a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001b1c:	e040      	b.n	8001ba0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	68db      	ldr	r3, [r3, #12]
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d023      	beq.n	8001b6e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b26:	4b6f      	ldr	r3, [pc, #444]	; (8001ce4 <HAL_RCC_OscConfig+0x504>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	4a6e      	ldr	r2, [pc, #440]	; (8001ce4 <HAL_RCC_OscConfig+0x504>)
 8001b2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b30:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b32:	f7ff f881 	bl	8000c38 <HAL_GetTick>
 8001b36:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b38:	e008      	b.n	8001b4c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b3a:	f7ff f87d 	bl	8000c38 <HAL_GetTick>
 8001b3e:	4602      	mov	r2, r0
 8001b40:	693b      	ldr	r3, [r7, #16]
 8001b42:	1ad3      	subs	r3, r2, r3
 8001b44:	2b02      	cmp	r3, #2
 8001b46:	d901      	bls.n	8001b4c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001b48:	2303      	movs	r3, #3
 8001b4a:	e21d      	b.n	8001f88 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b4c:	4b65      	ldr	r3, [pc, #404]	; (8001ce4 <HAL_RCC_OscConfig+0x504>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d0f0      	beq.n	8001b3a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b58:	4b62      	ldr	r3, [pc, #392]	; (8001ce4 <HAL_RCC_OscConfig+0x504>)
 8001b5a:	685b      	ldr	r3, [r3, #4]
 8001b5c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	691b      	ldr	r3, [r3, #16]
 8001b64:	061b      	lsls	r3, r3, #24
 8001b66:	495f      	ldr	r1, [pc, #380]	; (8001ce4 <HAL_RCC_OscConfig+0x504>)
 8001b68:	4313      	orrs	r3, r2
 8001b6a:	604b      	str	r3, [r1, #4]
 8001b6c:	e018      	b.n	8001ba0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b6e:	4b5d      	ldr	r3, [pc, #372]	; (8001ce4 <HAL_RCC_OscConfig+0x504>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	4a5c      	ldr	r2, [pc, #368]	; (8001ce4 <HAL_RCC_OscConfig+0x504>)
 8001b74:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001b78:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b7a:	f7ff f85d 	bl	8000c38 <HAL_GetTick>
 8001b7e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001b80:	e008      	b.n	8001b94 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b82:	f7ff f859 	bl	8000c38 <HAL_GetTick>
 8001b86:	4602      	mov	r2, r0
 8001b88:	693b      	ldr	r3, [r7, #16]
 8001b8a:	1ad3      	subs	r3, r2, r3
 8001b8c:	2b02      	cmp	r3, #2
 8001b8e:	d901      	bls.n	8001b94 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001b90:	2303      	movs	r3, #3
 8001b92:	e1f9      	b.n	8001f88 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001b94:	4b53      	ldr	r3, [pc, #332]	; (8001ce4 <HAL_RCC_OscConfig+0x504>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d1f0      	bne.n	8001b82 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f003 0308 	and.w	r3, r3, #8
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d03c      	beq.n	8001c26 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	695b      	ldr	r3, [r3, #20]
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d01c      	beq.n	8001bee <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001bb4:	4b4b      	ldr	r3, [pc, #300]	; (8001ce4 <HAL_RCC_OscConfig+0x504>)
 8001bb6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001bba:	4a4a      	ldr	r2, [pc, #296]	; (8001ce4 <HAL_RCC_OscConfig+0x504>)
 8001bbc:	f043 0301 	orr.w	r3, r3, #1
 8001bc0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bc4:	f7ff f838 	bl	8000c38 <HAL_GetTick>
 8001bc8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001bca:	e008      	b.n	8001bde <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bcc:	f7ff f834 	bl	8000c38 <HAL_GetTick>
 8001bd0:	4602      	mov	r2, r0
 8001bd2:	693b      	ldr	r3, [r7, #16]
 8001bd4:	1ad3      	subs	r3, r2, r3
 8001bd6:	2b02      	cmp	r3, #2
 8001bd8:	d901      	bls.n	8001bde <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001bda:	2303      	movs	r3, #3
 8001bdc:	e1d4      	b.n	8001f88 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001bde:	4b41      	ldr	r3, [pc, #260]	; (8001ce4 <HAL_RCC_OscConfig+0x504>)
 8001be0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001be4:	f003 0302 	and.w	r3, r3, #2
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d0ef      	beq.n	8001bcc <HAL_RCC_OscConfig+0x3ec>
 8001bec:	e01b      	b.n	8001c26 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001bee:	4b3d      	ldr	r3, [pc, #244]	; (8001ce4 <HAL_RCC_OscConfig+0x504>)
 8001bf0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001bf4:	4a3b      	ldr	r2, [pc, #236]	; (8001ce4 <HAL_RCC_OscConfig+0x504>)
 8001bf6:	f023 0301 	bic.w	r3, r3, #1
 8001bfa:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bfe:	f7ff f81b 	bl	8000c38 <HAL_GetTick>
 8001c02:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001c04:	e008      	b.n	8001c18 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c06:	f7ff f817 	bl	8000c38 <HAL_GetTick>
 8001c0a:	4602      	mov	r2, r0
 8001c0c:	693b      	ldr	r3, [r7, #16]
 8001c0e:	1ad3      	subs	r3, r2, r3
 8001c10:	2b02      	cmp	r3, #2
 8001c12:	d901      	bls.n	8001c18 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001c14:	2303      	movs	r3, #3
 8001c16:	e1b7      	b.n	8001f88 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001c18:	4b32      	ldr	r3, [pc, #200]	; (8001ce4 <HAL_RCC_OscConfig+0x504>)
 8001c1a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c1e:	f003 0302 	and.w	r3, r3, #2
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d1ef      	bne.n	8001c06 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f003 0304 	and.w	r3, r3, #4
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	f000 80a6 	beq.w	8001d80 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c34:	2300      	movs	r3, #0
 8001c36:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001c38:	4b2a      	ldr	r3, [pc, #168]	; (8001ce4 <HAL_RCC_OscConfig+0x504>)
 8001c3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d10d      	bne.n	8001c60 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c44:	4b27      	ldr	r3, [pc, #156]	; (8001ce4 <HAL_RCC_OscConfig+0x504>)
 8001c46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c48:	4a26      	ldr	r2, [pc, #152]	; (8001ce4 <HAL_RCC_OscConfig+0x504>)
 8001c4a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c4e:	6593      	str	r3, [r2, #88]	; 0x58
 8001c50:	4b24      	ldr	r3, [pc, #144]	; (8001ce4 <HAL_RCC_OscConfig+0x504>)
 8001c52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c58:	60bb      	str	r3, [r7, #8]
 8001c5a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c5c:	2301      	movs	r3, #1
 8001c5e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c60:	4b21      	ldr	r3, [pc, #132]	; (8001ce8 <HAL_RCC_OscConfig+0x508>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d118      	bne.n	8001c9e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001c6c:	4b1e      	ldr	r3, [pc, #120]	; (8001ce8 <HAL_RCC_OscConfig+0x508>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	4a1d      	ldr	r2, [pc, #116]	; (8001ce8 <HAL_RCC_OscConfig+0x508>)
 8001c72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c76:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c78:	f7fe ffde 	bl	8000c38 <HAL_GetTick>
 8001c7c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c7e:	e008      	b.n	8001c92 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c80:	f7fe ffda 	bl	8000c38 <HAL_GetTick>
 8001c84:	4602      	mov	r2, r0
 8001c86:	693b      	ldr	r3, [r7, #16]
 8001c88:	1ad3      	subs	r3, r2, r3
 8001c8a:	2b02      	cmp	r3, #2
 8001c8c:	d901      	bls.n	8001c92 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001c8e:	2303      	movs	r3, #3
 8001c90:	e17a      	b.n	8001f88 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c92:	4b15      	ldr	r3, [pc, #84]	; (8001ce8 <HAL_RCC_OscConfig+0x508>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d0f0      	beq.n	8001c80 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	689b      	ldr	r3, [r3, #8]
 8001ca2:	2b01      	cmp	r3, #1
 8001ca4:	d108      	bne.n	8001cb8 <HAL_RCC_OscConfig+0x4d8>
 8001ca6:	4b0f      	ldr	r3, [pc, #60]	; (8001ce4 <HAL_RCC_OscConfig+0x504>)
 8001ca8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cac:	4a0d      	ldr	r2, [pc, #52]	; (8001ce4 <HAL_RCC_OscConfig+0x504>)
 8001cae:	f043 0301 	orr.w	r3, r3, #1
 8001cb2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001cb6:	e029      	b.n	8001d0c <HAL_RCC_OscConfig+0x52c>
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	689b      	ldr	r3, [r3, #8]
 8001cbc:	2b05      	cmp	r3, #5
 8001cbe:	d115      	bne.n	8001cec <HAL_RCC_OscConfig+0x50c>
 8001cc0:	4b08      	ldr	r3, [pc, #32]	; (8001ce4 <HAL_RCC_OscConfig+0x504>)
 8001cc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cc6:	4a07      	ldr	r2, [pc, #28]	; (8001ce4 <HAL_RCC_OscConfig+0x504>)
 8001cc8:	f043 0304 	orr.w	r3, r3, #4
 8001ccc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001cd0:	4b04      	ldr	r3, [pc, #16]	; (8001ce4 <HAL_RCC_OscConfig+0x504>)
 8001cd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cd6:	4a03      	ldr	r2, [pc, #12]	; (8001ce4 <HAL_RCC_OscConfig+0x504>)
 8001cd8:	f043 0301 	orr.w	r3, r3, #1
 8001cdc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001ce0:	e014      	b.n	8001d0c <HAL_RCC_OscConfig+0x52c>
 8001ce2:	bf00      	nop
 8001ce4:	40021000 	.word	0x40021000
 8001ce8:	40007000 	.word	0x40007000
 8001cec:	4b9c      	ldr	r3, [pc, #624]	; (8001f60 <HAL_RCC_OscConfig+0x780>)
 8001cee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cf2:	4a9b      	ldr	r2, [pc, #620]	; (8001f60 <HAL_RCC_OscConfig+0x780>)
 8001cf4:	f023 0301 	bic.w	r3, r3, #1
 8001cf8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001cfc:	4b98      	ldr	r3, [pc, #608]	; (8001f60 <HAL_RCC_OscConfig+0x780>)
 8001cfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d02:	4a97      	ldr	r2, [pc, #604]	; (8001f60 <HAL_RCC_OscConfig+0x780>)
 8001d04:	f023 0304 	bic.w	r3, r3, #4
 8001d08:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	689b      	ldr	r3, [r3, #8]
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d016      	beq.n	8001d42 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d14:	f7fe ff90 	bl	8000c38 <HAL_GetTick>
 8001d18:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001d1a:	e00a      	b.n	8001d32 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d1c:	f7fe ff8c 	bl	8000c38 <HAL_GetTick>
 8001d20:	4602      	mov	r2, r0
 8001d22:	693b      	ldr	r3, [r7, #16]
 8001d24:	1ad3      	subs	r3, r2, r3
 8001d26:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d2a:	4293      	cmp	r3, r2
 8001d2c:	d901      	bls.n	8001d32 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001d2e:	2303      	movs	r3, #3
 8001d30:	e12a      	b.n	8001f88 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001d32:	4b8b      	ldr	r3, [pc, #556]	; (8001f60 <HAL_RCC_OscConfig+0x780>)
 8001d34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d38:	f003 0302 	and.w	r3, r3, #2
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d0ed      	beq.n	8001d1c <HAL_RCC_OscConfig+0x53c>
 8001d40:	e015      	b.n	8001d6e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d42:	f7fe ff79 	bl	8000c38 <HAL_GetTick>
 8001d46:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001d48:	e00a      	b.n	8001d60 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d4a:	f7fe ff75 	bl	8000c38 <HAL_GetTick>
 8001d4e:	4602      	mov	r2, r0
 8001d50:	693b      	ldr	r3, [r7, #16]
 8001d52:	1ad3      	subs	r3, r2, r3
 8001d54:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d58:	4293      	cmp	r3, r2
 8001d5a:	d901      	bls.n	8001d60 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001d5c:	2303      	movs	r3, #3
 8001d5e:	e113      	b.n	8001f88 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001d60:	4b7f      	ldr	r3, [pc, #508]	; (8001f60 <HAL_RCC_OscConfig+0x780>)
 8001d62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d66:	f003 0302 	and.w	r3, r3, #2
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d1ed      	bne.n	8001d4a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001d6e:	7ffb      	ldrb	r3, [r7, #31]
 8001d70:	2b01      	cmp	r3, #1
 8001d72:	d105      	bne.n	8001d80 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d74:	4b7a      	ldr	r3, [pc, #488]	; (8001f60 <HAL_RCC_OscConfig+0x780>)
 8001d76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d78:	4a79      	ldr	r2, [pc, #484]	; (8001f60 <HAL_RCC_OscConfig+0x780>)
 8001d7a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d7e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	f000 80fe 	beq.w	8001f86 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d8e:	2b02      	cmp	r3, #2
 8001d90:	f040 80d0 	bne.w	8001f34 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001d94:	4b72      	ldr	r3, [pc, #456]	; (8001f60 <HAL_RCC_OscConfig+0x780>)
 8001d96:	68db      	ldr	r3, [r3, #12]
 8001d98:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d9a:	697b      	ldr	r3, [r7, #20]
 8001d9c:	f003 0203 	and.w	r2, r3, #3
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001da4:	429a      	cmp	r2, r3
 8001da6:	d130      	bne.n	8001e0a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001da8:	697b      	ldr	r3, [r7, #20]
 8001daa:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001db2:	3b01      	subs	r3, #1
 8001db4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001db6:	429a      	cmp	r2, r3
 8001db8:	d127      	bne.n	8001e0a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001dba:	697b      	ldr	r3, [r7, #20]
 8001dbc:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001dc4:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001dc6:	429a      	cmp	r2, r3
 8001dc8:	d11f      	bne.n	8001e0a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001dca:	697b      	ldr	r3, [r7, #20]
 8001dcc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dd0:	687a      	ldr	r2, [r7, #4]
 8001dd2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001dd4:	2a07      	cmp	r2, #7
 8001dd6:	bf14      	ite	ne
 8001dd8:	2201      	movne	r2, #1
 8001dda:	2200      	moveq	r2, #0
 8001ddc:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d113      	bne.n	8001e0a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001de2:	697b      	ldr	r3, [r7, #20]
 8001de4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001dec:	085b      	lsrs	r3, r3, #1
 8001dee:	3b01      	subs	r3, #1
 8001df0:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001df2:	429a      	cmp	r2, r3
 8001df4:	d109      	bne.n	8001e0a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001df6:	697b      	ldr	r3, [r7, #20]
 8001df8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e00:	085b      	lsrs	r3, r3, #1
 8001e02:	3b01      	subs	r3, #1
 8001e04:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001e06:	429a      	cmp	r2, r3
 8001e08:	d06e      	beq.n	8001ee8 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001e0a:	69bb      	ldr	r3, [r7, #24]
 8001e0c:	2b0c      	cmp	r3, #12
 8001e0e:	d069      	beq.n	8001ee4 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001e10:	4b53      	ldr	r3, [pc, #332]	; (8001f60 <HAL_RCC_OscConfig+0x780>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d105      	bne.n	8001e28 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001e1c:	4b50      	ldr	r3, [pc, #320]	; (8001f60 <HAL_RCC_OscConfig+0x780>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d001      	beq.n	8001e2c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001e28:	2301      	movs	r3, #1
 8001e2a:	e0ad      	b.n	8001f88 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001e2c:	4b4c      	ldr	r3, [pc, #304]	; (8001f60 <HAL_RCC_OscConfig+0x780>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	4a4b      	ldr	r2, [pc, #300]	; (8001f60 <HAL_RCC_OscConfig+0x780>)
 8001e32:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001e36:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001e38:	f7fe fefe 	bl	8000c38 <HAL_GetTick>
 8001e3c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e3e:	e008      	b.n	8001e52 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e40:	f7fe fefa 	bl	8000c38 <HAL_GetTick>
 8001e44:	4602      	mov	r2, r0
 8001e46:	693b      	ldr	r3, [r7, #16]
 8001e48:	1ad3      	subs	r3, r2, r3
 8001e4a:	2b02      	cmp	r3, #2
 8001e4c:	d901      	bls.n	8001e52 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001e4e:	2303      	movs	r3, #3
 8001e50:	e09a      	b.n	8001f88 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e52:	4b43      	ldr	r3, [pc, #268]	; (8001f60 <HAL_RCC_OscConfig+0x780>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d1f0      	bne.n	8001e40 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e5e:	4b40      	ldr	r3, [pc, #256]	; (8001f60 <HAL_RCC_OscConfig+0x780>)
 8001e60:	68da      	ldr	r2, [r3, #12]
 8001e62:	4b40      	ldr	r3, [pc, #256]	; (8001f64 <HAL_RCC_OscConfig+0x784>)
 8001e64:	4013      	ands	r3, r2
 8001e66:	687a      	ldr	r2, [r7, #4]
 8001e68:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001e6a:	687a      	ldr	r2, [r7, #4]
 8001e6c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001e6e:	3a01      	subs	r2, #1
 8001e70:	0112      	lsls	r2, r2, #4
 8001e72:	4311      	orrs	r1, r2
 8001e74:	687a      	ldr	r2, [r7, #4]
 8001e76:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001e78:	0212      	lsls	r2, r2, #8
 8001e7a:	4311      	orrs	r1, r2
 8001e7c:	687a      	ldr	r2, [r7, #4]
 8001e7e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001e80:	0852      	lsrs	r2, r2, #1
 8001e82:	3a01      	subs	r2, #1
 8001e84:	0552      	lsls	r2, r2, #21
 8001e86:	4311      	orrs	r1, r2
 8001e88:	687a      	ldr	r2, [r7, #4]
 8001e8a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001e8c:	0852      	lsrs	r2, r2, #1
 8001e8e:	3a01      	subs	r2, #1
 8001e90:	0652      	lsls	r2, r2, #25
 8001e92:	4311      	orrs	r1, r2
 8001e94:	687a      	ldr	r2, [r7, #4]
 8001e96:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001e98:	0912      	lsrs	r2, r2, #4
 8001e9a:	0452      	lsls	r2, r2, #17
 8001e9c:	430a      	orrs	r2, r1
 8001e9e:	4930      	ldr	r1, [pc, #192]	; (8001f60 <HAL_RCC_OscConfig+0x780>)
 8001ea0:	4313      	orrs	r3, r2
 8001ea2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001ea4:	4b2e      	ldr	r3, [pc, #184]	; (8001f60 <HAL_RCC_OscConfig+0x780>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	4a2d      	ldr	r2, [pc, #180]	; (8001f60 <HAL_RCC_OscConfig+0x780>)
 8001eaa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001eae:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001eb0:	4b2b      	ldr	r3, [pc, #172]	; (8001f60 <HAL_RCC_OscConfig+0x780>)
 8001eb2:	68db      	ldr	r3, [r3, #12]
 8001eb4:	4a2a      	ldr	r2, [pc, #168]	; (8001f60 <HAL_RCC_OscConfig+0x780>)
 8001eb6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001eba:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001ebc:	f7fe febc 	bl	8000c38 <HAL_GetTick>
 8001ec0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ec2:	e008      	b.n	8001ed6 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ec4:	f7fe feb8 	bl	8000c38 <HAL_GetTick>
 8001ec8:	4602      	mov	r2, r0
 8001eca:	693b      	ldr	r3, [r7, #16]
 8001ecc:	1ad3      	subs	r3, r2, r3
 8001ece:	2b02      	cmp	r3, #2
 8001ed0:	d901      	bls.n	8001ed6 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001ed2:	2303      	movs	r3, #3
 8001ed4:	e058      	b.n	8001f88 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ed6:	4b22      	ldr	r3, [pc, #136]	; (8001f60 <HAL_RCC_OscConfig+0x780>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d0f0      	beq.n	8001ec4 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001ee2:	e050      	b.n	8001f86 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001ee4:	2301      	movs	r3, #1
 8001ee6:	e04f      	b.n	8001f88 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ee8:	4b1d      	ldr	r3, [pc, #116]	; (8001f60 <HAL_RCC_OscConfig+0x780>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d148      	bne.n	8001f86 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001ef4:	4b1a      	ldr	r3, [pc, #104]	; (8001f60 <HAL_RCC_OscConfig+0x780>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	4a19      	ldr	r2, [pc, #100]	; (8001f60 <HAL_RCC_OscConfig+0x780>)
 8001efa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001efe:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001f00:	4b17      	ldr	r3, [pc, #92]	; (8001f60 <HAL_RCC_OscConfig+0x780>)
 8001f02:	68db      	ldr	r3, [r3, #12]
 8001f04:	4a16      	ldr	r2, [pc, #88]	; (8001f60 <HAL_RCC_OscConfig+0x780>)
 8001f06:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f0a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001f0c:	f7fe fe94 	bl	8000c38 <HAL_GetTick>
 8001f10:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f12:	e008      	b.n	8001f26 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f14:	f7fe fe90 	bl	8000c38 <HAL_GetTick>
 8001f18:	4602      	mov	r2, r0
 8001f1a:	693b      	ldr	r3, [r7, #16]
 8001f1c:	1ad3      	subs	r3, r2, r3
 8001f1e:	2b02      	cmp	r3, #2
 8001f20:	d901      	bls.n	8001f26 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001f22:	2303      	movs	r3, #3
 8001f24:	e030      	b.n	8001f88 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f26:	4b0e      	ldr	r3, [pc, #56]	; (8001f60 <HAL_RCC_OscConfig+0x780>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d0f0      	beq.n	8001f14 <HAL_RCC_OscConfig+0x734>
 8001f32:	e028      	b.n	8001f86 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001f34:	69bb      	ldr	r3, [r7, #24]
 8001f36:	2b0c      	cmp	r3, #12
 8001f38:	d023      	beq.n	8001f82 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f3a:	4b09      	ldr	r3, [pc, #36]	; (8001f60 <HAL_RCC_OscConfig+0x780>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	4a08      	ldr	r2, [pc, #32]	; (8001f60 <HAL_RCC_OscConfig+0x780>)
 8001f40:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001f44:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f46:	f7fe fe77 	bl	8000c38 <HAL_GetTick>
 8001f4a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f4c:	e00c      	b.n	8001f68 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f4e:	f7fe fe73 	bl	8000c38 <HAL_GetTick>
 8001f52:	4602      	mov	r2, r0
 8001f54:	693b      	ldr	r3, [r7, #16]
 8001f56:	1ad3      	subs	r3, r2, r3
 8001f58:	2b02      	cmp	r3, #2
 8001f5a:	d905      	bls.n	8001f68 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001f5c:	2303      	movs	r3, #3
 8001f5e:	e013      	b.n	8001f88 <HAL_RCC_OscConfig+0x7a8>
 8001f60:	40021000 	.word	0x40021000
 8001f64:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f68:	4b09      	ldr	r3, [pc, #36]	; (8001f90 <HAL_RCC_OscConfig+0x7b0>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d1ec      	bne.n	8001f4e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001f74:	4b06      	ldr	r3, [pc, #24]	; (8001f90 <HAL_RCC_OscConfig+0x7b0>)
 8001f76:	68da      	ldr	r2, [r3, #12]
 8001f78:	4905      	ldr	r1, [pc, #20]	; (8001f90 <HAL_RCC_OscConfig+0x7b0>)
 8001f7a:	4b06      	ldr	r3, [pc, #24]	; (8001f94 <HAL_RCC_OscConfig+0x7b4>)
 8001f7c:	4013      	ands	r3, r2
 8001f7e:	60cb      	str	r3, [r1, #12]
 8001f80:	e001      	b.n	8001f86 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001f82:	2301      	movs	r3, #1
 8001f84:	e000      	b.n	8001f88 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8001f86:	2300      	movs	r3, #0
}
 8001f88:	4618      	mov	r0, r3
 8001f8a:	3720      	adds	r7, #32
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	bd80      	pop	{r7, pc}
 8001f90:	40021000 	.word	0x40021000
 8001f94:	feeefffc 	.word	0xfeeefffc

08001f98 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b084      	sub	sp, #16
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
 8001fa0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d101      	bne.n	8001fac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001fa8:	2301      	movs	r3, #1
 8001faa:	e0e7      	b.n	800217c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001fac:	4b75      	ldr	r3, [pc, #468]	; (8002184 <HAL_RCC_ClockConfig+0x1ec>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f003 0307 	and.w	r3, r3, #7
 8001fb4:	683a      	ldr	r2, [r7, #0]
 8001fb6:	429a      	cmp	r2, r3
 8001fb8:	d910      	bls.n	8001fdc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fba:	4b72      	ldr	r3, [pc, #456]	; (8002184 <HAL_RCC_ClockConfig+0x1ec>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f023 0207 	bic.w	r2, r3, #7
 8001fc2:	4970      	ldr	r1, [pc, #448]	; (8002184 <HAL_RCC_ClockConfig+0x1ec>)
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	4313      	orrs	r3, r2
 8001fc8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fca:	4b6e      	ldr	r3, [pc, #440]	; (8002184 <HAL_RCC_ClockConfig+0x1ec>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f003 0307 	and.w	r3, r3, #7
 8001fd2:	683a      	ldr	r2, [r7, #0]
 8001fd4:	429a      	cmp	r2, r3
 8001fd6:	d001      	beq.n	8001fdc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001fd8:	2301      	movs	r3, #1
 8001fda:	e0cf      	b.n	800217c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f003 0302 	and.w	r3, r3, #2
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d010      	beq.n	800200a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	689a      	ldr	r2, [r3, #8]
 8001fec:	4b66      	ldr	r3, [pc, #408]	; (8002188 <HAL_RCC_ClockConfig+0x1f0>)
 8001fee:	689b      	ldr	r3, [r3, #8]
 8001ff0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001ff4:	429a      	cmp	r2, r3
 8001ff6:	d908      	bls.n	800200a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ff8:	4b63      	ldr	r3, [pc, #396]	; (8002188 <HAL_RCC_ClockConfig+0x1f0>)
 8001ffa:	689b      	ldr	r3, [r3, #8]
 8001ffc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	689b      	ldr	r3, [r3, #8]
 8002004:	4960      	ldr	r1, [pc, #384]	; (8002188 <HAL_RCC_ClockConfig+0x1f0>)
 8002006:	4313      	orrs	r3, r2
 8002008:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f003 0301 	and.w	r3, r3, #1
 8002012:	2b00      	cmp	r3, #0
 8002014:	d04c      	beq.n	80020b0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	685b      	ldr	r3, [r3, #4]
 800201a:	2b03      	cmp	r3, #3
 800201c:	d107      	bne.n	800202e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800201e:	4b5a      	ldr	r3, [pc, #360]	; (8002188 <HAL_RCC_ClockConfig+0x1f0>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002026:	2b00      	cmp	r3, #0
 8002028:	d121      	bne.n	800206e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800202a:	2301      	movs	r3, #1
 800202c:	e0a6      	b.n	800217c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	685b      	ldr	r3, [r3, #4]
 8002032:	2b02      	cmp	r3, #2
 8002034:	d107      	bne.n	8002046 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002036:	4b54      	ldr	r3, [pc, #336]	; (8002188 <HAL_RCC_ClockConfig+0x1f0>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800203e:	2b00      	cmp	r3, #0
 8002040:	d115      	bne.n	800206e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002042:	2301      	movs	r3, #1
 8002044:	e09a      	b.n	800217c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	685b      	ldr	r3, [r3, #4]
 800204a:	2b00      	cmp	r3, #0
 800204c:	d107      	bne.n	800205e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800204e:	4b4e      	ldr	r3, [pc, #312]	; (8002188 <HAL_RCC_ClockConfig+0x1f0>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f003 0302 	and.w	r3, r3, #2
 8002056:	2b00      	cmp	r3, #0
 8002058:	d109      	bne.n	800206e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800205a:	2301      	movs	r3, #1
 800205c:	e08e      	b.n	800217c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800205e:	4b4a      	ldr	r3, [pc, #296]	; (8002188 <HAL_RCC_ClockConfig+0x1f0>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002066:	2b00      	cmp	r3, #0
 8002068:	d101      	bne.n	800206e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800206a:	2301      	movs	r3, #1
 800206c:	e086      	b.n	800217c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800206e:	4b46      	ldr	r3, [pc, #280]	; (8002188 <HAL_RCC_ClockConfig+0x1f0>)
 8002070:	689b      	ldr	r3, [r3, #8]
 8002072:	f023 0203 	bic.w	r2, r3, #3
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	685b      	ldr	r3, [r3, #4]
 800207a:	4943      	ldr	r1, [pc, #268]	; (8002188 <HAL_RCC_ClockConfig+0x1f0>)
 800207c:	4313      	orrs	r3, r2
 800207e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002080:	f7fe fdda 	bl	8000c38 <HAL_GetTick>
 8002084:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002086:	e00a      	b.n	800209e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002088:	f7fe fdd6 	bl	8000c38 <HAL_GetTick>
 800208c:	4602      	mov	r2, r0
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	1ad3      	subs	r3, r2, r3
 8002092:	f241 3288 	movw	r2, #5000	; 0x1388
 8002096:	4293      	cmp	r3, r2
 8002098:	d901      	bls.n	800209e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800209a:	2303      	movs	r3, #3
 800209c:	e06e      	b.n	800217c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800209e:	4b3a      	ldr	r3, [pc, #232]	; (8002188 <HAL_RCC_ClockConfig+0x1f0>)
 80020a0:	689b      	ldr	r3, [r3, #8]
 80020a2:	f003 020c 	and.w	r2, r3, #12
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	685b      	ldr	r3, [r3, #4]
 80020aa:	009b      	lsls	r3, r3, #2
 80020ac:	429a      	cmp	r2, r3
 80020ae:	d1eb      	bne.n	8002088 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f003 0302 	and.w	r3, r3, #2
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d010      	beq.n	80020de <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	689a      	ldr	r2, [r3, #8]
 80020c0:	4b31      	ldr	r3, [pc, #196]	; (8002188 <HAL_RCC_ClockConfig+0x1f0>)
 80020c2:	689b      	ldr	r3, [r3, #8]
 80020c4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80020c8:	429a      	cmp	r2, r3
 80020ca:	d208      	bcs.n	80020de <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020cc:	4b2e      	ldr	r3, [pc, #184]	; (8002188 <HAL_RCC_ClockConfig+0x1f0>)
 80020ce:	689b      	ldr	r3, [r3, #8]
 80020d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	689b      	ldr	r3, [r3, #8]
 80020d8:	492b      	ldr	r1, [pc, #172]	; (8002188 <HAL_RCC_ClockConfig+0x1f0>)
 80020da:	4313      	orrs	r3, r2
 80020dc:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80020de:	4b29      	ldr	r3, [pc, #164]	; (8002184 <HAL_RCC_ClockConfig+0x1ec>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f003 0307 	and.w	r3, r3, #7
 80020e6:	683a      	ldr	r2, [r7, #0]
 80020e8:	429a      	cmp	r2, r3
 80020ea:	d210      	bcs.n	800210e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020ec:	4b25      	ldr	r3, [pc, #148]	; (8002184 <HAL_RCC_ClockConfig+0x1ec>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f023 0207 	bic.w	r2, r3, #7
 80020f4:	4923      	ldr	r1, [pc, #140]	; (8002184 <HAL_RCC_ClockConfig+0x1ec>)
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	4313      	orrs	r3, r2
 80020fa:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80020fc:	4b21      	ldr	r3, [pc, #132]	; (8002184 <HAL_RCC_ClockConfig+0x1ec>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f003 0307 	and.w	r3, r3, #7
 8002104:	683a      	ldr	r2, [r7, #0]
 8002106:	429a      	cmp	r2, r3
 8002108:	d001      	beq.n	800210e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800210a:	2301      	movs	r3, #1
 800210c:	e036      	b.n	800217c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f003 0304 	and.w	r3, r3, #4
 8002116:	2b00      	cmp	r3, #0
 8002118:	d008      	beq.n	800212c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800211a:	4b1b      	ldr	r3, [pc, #108]	; (8002188 <HAL_RCC_ClockConfig+0x1f0>)
 800211c:	689b      	ldr	r3, [r3, #8]
 800211e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	68db      	ldr	r3, [r3, #12]
 8002126:	4918      	ldr	r1, [pc, #96]	; (8002188 <HAL_RCC_ClockConfig+0x1f0>)
 8002128:	4313      	orrs	r3, r2
 800212a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f003 0308 	and.w	r3, r3, #8
 8002134:	2b00      	cmp	r3, #0
 8002136:	d009      	beq.n	800214c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002138:	4b13      	ldr	r3, [pc, #76]	; (8002188 <HAL_RCC_ClockConfig+0x1f0>)
 800213a:	689b      	ldr	r3, [r3, #8]
 800213c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	691b      	ldr	r3, [r3, #16]
 8002144:	00db      	lsls	r3, r3, #3
 8002146:	4910      	ldr	r1, [pc, #64]	; (8002188 <HAL_RCC_ClockConfig+0x1f0>)
 8002148:	4313      	orrs	r3, r2
 800214a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800214c:	f000 f824 	bl	8002198 <HAL_RCC_GetSysClockFreq>
 8002150:	4602      	mov	r2, r0
 8002152:	4b0d      	ldr	r3, [pc, #52]	; (8002188 <HAL_RCC_ClockConfig+0x1f0>)
 8002154:	689b      	ldr	r3, [r3, #8]
 8002156:	091b      	lsrs	r3, r3, #4
 8002158:	f003 030f 	and.w	r3, r3, #15
 800215c:	490b      	ldr	r1, [pc, #44]	; (800218c <HAL_RCC_ClockConfig+0x1f4>)
 800215e:	5ccb      	ldrb	r3, [r1, r3]
 8002160:	f003 031f 	and.w	r3, r3, #31
 8002164:	fa22 f303 	lsr.w	r3, r2, r3
 8002168:	4a09      	ldr	r2, [pc, #36]	; (8002190 <HAL_RCC_ClockConfig+0x1f8>)
 800216a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800216c:	4b09      	ldr	r3, [pc, #36]	; (8002194 <HAL_RCC_ClockConfig+0x1fc>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	4618      	mov	r0, r3
 8002172:	f7fe fd11 	bl	8000b98 <HAL_InitTick>
 8002176:	4603      	mov	r3, r0
 8002178:	72fb      	strb	r3, [r7, #11]

  return status;
 800217a:	7afb      	ldrb	r3, [r7, #11]
}
 800217c:	4618      	mov	r0, r3
 800217e:	3710      	adds	r7, #16
 8002180:	46bd      	mov	sp, r7
 8002182:	bd80      	pop	{r7, pc}
 8002184:	40022000 	.word	0x40022000
 8002188:	40021000 	.word	0x40021000
 800218c:	08005768 	.word	0x08005768
 8002190:	20000000 	.word	0x20000000
 8002194:	20000004 	.word	0x20000004

08002198 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002198:	b480      	push	{r7}
 800219a:	b089      	sub	sp, #36	; 0x24
 800219c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800219e:	2300      	movs	r3, #0
 80021a0:	61fb      	str	r3, [r7, #28]
 80021a2:	2300      	movs	r3, #0
 80021a4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80021a6:	4b3e      	ldr	r3, [pc, #248]	; (80022a0 <HAL_RCC_GetSysClockFreq+0x108>)
 80021a8:	689b      	ldr	r3, [r3, #8]
 80021aa:	f003 030c 	and.w	r3, r3, #12
 80021ae:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80021b0:	4b3b      	ldr	r3, [pc, #236]	; (80022a0 <HAL_RCC_GetSysClockFreq+0x108>)
 80021b2:	68db      	ldr	r3, [r3, #12]
 80021b4:	f003 0303 	and.w	r3, r3, #3
 80021b8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80021ba:	693b      	ldr	r3, [r7, #16]
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d005      	beq.n	80021cc <HAL_RCC_GetSysClockFreq+0x34>
 80021c0:	693b      	ldr	r3, [r7, #16]
 80021c2:	2b0c      	cmp	r3, #12
 80021c4:	d121      	bne.n	800220a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	2b01      	cmp	r3, #1
 80021ca:	d11e      	bne.n	800220a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80021cc:	4b34      	ldr	r3, [pc, #208]	; (80022a0 <HAL_RCC_GetSysClockFreq+0x108>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f003 0308 	and.w	r3, r3, #8
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d107      	bne.n	80021e8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80021d8:	4b31      	ldr	r3, [pc, #196]	; (80022a0 <HAL_RCC_GetSysClockFreq+0x108>)
 80021da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80021de:	0a1b      	lsrs	r3, r3, #8
 80021e0:	f003 030f 	and.w	r3, r3, #15
 80021e4:	61fb      	str	r3, [r7, #28]
 80021e6:	e005      	b.n	80021f4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80021e8:	4b2d      	ldr	r3, [pc, #180]	; (80022a0 <HAL_RCC_GetSysClockFreq+0x108>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	091b      	lsrs	r3, r3, #4
 80021ee:	f003 030f 	and.w	r3, r3, #15
 80021f2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80021f4:	4a2b      	ldr	r2, [pc, #172]	; (80022a4 <HAL_RCC_GetSysClockFreq+0x10c>)
 80021f6:	69fb      	ldr	r3, [r7, #28]
 80021f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021fc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80021fe:	693b      	ldr	r3, [r7, #16]
 8002200:	2b00      	cmp	r3, #0
 8002202:	d10d      	bne.n	8002220 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002204:	69fb      	ldr	r3, [r7, #28]
 8002206:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002208:	e00a      	b.n	8002220 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800220a:	693b      	ldr	r3, [r7, #16]
 800220c:	2b04      	cmp	r3, #4
 800220e:	d102      	bne.n	8002216 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002210:	4b25      	ldr	r3, [pc, #148]	; (80022a8 <HAL_RCC_GetSysClockFreq+0x110>)
 8002212:	61bb      	str	r3, [r7, #24]
 8002214:	e004      	b.n	8002220 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002216:	693b      	ldr	r3, [r7, #16]
 8002218:	2b08      	cmp	r3, #8
 800221a:	d101      	bne.n	8002220 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800221c:	4b23      	ldr	r3, [pc, #140]	; (80022ac <HAL_RCC_GetSysClockFreq+0x114>)
 800221e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002220:	693b      	ldr	r3, [r7, #16]
 8002222:	2b0c      	cmp	r3, #12
 8002224:	d134      	bne.n	8002290 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002226:	4b1e      	ldr	r3, [pc, #120]	; (80022a0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002228:	68db      	ldr	r3, [r3, #12]
 800222a:	f003 0303 	and.w	r3, r3, #3
 800222e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002230:	68bb      	ldr	r3, [r7, #8]
 8002232:	2b02      	cmp	r3, #2
 8002234:	d003      	beq.n	800223e <HAL_RCC_GetSysClockFreq+0xa6>
 8002236:	68bb      	ldr	r3, [r7, #8]
 8002238:	2b03      	cmp	r3, #3
 800223a:	d003      	beq.n	8002244 <HAL_RCC_GetSysClockFreq+0xac>
 800223c:	e005      	b.n	800224a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800223e:	4b1a      	ldr	r3, [pc, #104]	; (80022a8 <HAL_RCC_GetSysClockFreq+0x110>)
 8002240:	617b      	str	r3, [r7, #20]
      break;
 8002242:	e005      	b.n	8002250 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002244:	4b19      	ldr	r3, [pc, #100]	; (80022ac <HAL_RCC_GetSysClockFreq+0x114>)
 8002246:	617b      	str	r3, [r7, #20]
      break;
 8002248:	e002      	b.n	8002250 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800224a:	69fb      	ldr	r3, [r7, #28]
 800224c:	617b      	str	r3, [r7, #20]
      break;
 800224e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002250:	4b13      	ldr	r3, [pc, #76]	; (80022a0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002252:	68db      	ldr	r3, [r3, #12]
 8002254:	091b      	lsrs	r3, r3, #4
 8002256:	f003 0307 	and.w	r3, r3, #7
 800225a:	3301      	adds	r3, #1
 800225c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800225e:	4b10      	ldr	r3, [pc, #64]	; (80022a0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002260:	68db      	ldr	r3, [r3, #12]
 8002262:	0a1b      	lsrs	r3, r3, #8
 8002264:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002268:	697a      	ldr	r2, [r7, #20]
 800226a:	fb03 f202 	mul.w	r2, r3, r2
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	fbb2 f3f3 	udiv	r3, r2, r3
 8002274:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002276:	4b0a      	ldr	r3, [pc, #40]	; (80022a0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002278:	68db      	ldr	r3, [r3, #12]
 800227a:	0e5b      	lsrs	r3, r3, #25
 800227c:	f003 0303 	and.w	r3, r3, #3
 8002280:	3301      	adds	r3, #1
 8002282:	005b      	lsls	r3, r3, #1
 8002284:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002286:	697a      	ldr	r2, [r7, #20]
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	fbb2 f3f3 	udiv	r3, r2, r3
 800228e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002290:	69bb      	ldr	r3, [r7, #24]
}
 8002292:	4618      	mov	r0, r3
 8002294:	3724      	adds	r7, #36	; 0x24
 8002296:	46bd      	mov	sp, r7
 8002298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229c:	4770      	bx	lr
 800229e:	bf00      	nop
 80022a0:	40021000 	.word	0x40021000
 80022a4:	08005780 	.word	0x08005780
 80022a8:	00f42400 	.word	0x00f42400
 80022ac:	007a1200 	.word	0x007a1200

080022b0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80022b0:	b480      	push	{r7}
 80022b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80022b4:	4b03      	ldr	r3, [pc, #12]	; (80022c4 <HAL_RCC_GetHCLKFreq+0x14>)
 80022b6:	681b      	ldr	r3, [r3, #0]
}
 80022b8:	4618      	mov	r0, r3
 80022ba:	46bd      	mov	sp, r7
 80022bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c0:	4770      	bx	lr
 80022c2:	bf00      	nop
 80022c4:	20000000 	.word	0x20000000

080022c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80022cc:	f7ff fff0 	bl	80022b0 <HAL_RCC_GetHCLKFreq>
 80022d0:	4602      	mov	r2, r0
 80022d2:	4b06      	ldr	r3, [pc, #24]	; (80022ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80022d4:	689b      	ldr	r3, [r3, #8]
 80022d6:	0a1b      	lsrs	r3, r3, #8
 80022d8:	f003 0307 	and.w	r3, r3, #7
 80022dc:	4904      	ldr	r1, [pc, #16]	; (80022f0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80022de:	5ccb      	ldrb	r3, [r1, r3]
 80022e0:	f003 031f 	and.w	r3, r3, #31
 80022e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80022e8:	4618      	mov	r0, r3
 80022ea:	bd80      	pop	{r7, pc}
 80022ec:	40021000 	.word	0x40021000
 80022f0:	08005778 	.word	0x08005778

080022f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80022f8:	f7ff ffda 	bl	80022b0 <HAL_RCC_GetHCLKFreq>
 80022fc:	4602      	mov	r2, r0
 80022fe:	4b06      	ldr	r3, [pc, #24]	; (8002318 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002300:	689b      	ldr	r3, [r3, #8]
 8002302:	0adb      	lsrs	r3, r3, #11
 8002304:	f003 0307 	and.w	r3, r3, #7
 8002308:	4904      	ldr	r1, [pc, #16]	; (800231c <HAL_RCC_GetPCLK2Freq+0x28>)
 800230a:	5ccb      	ldrb	r3, [r1, r3]
 800230c:	f003 031f 	and.w	r3, r3, #31
 8002310:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002314:	4618      	mov	r0, r3
 8002316:	bd80      	pop	{r7, pc}
 8002318:	40021000 	.word	0x40021000
 800231c:	08005778 	.word	0x08005778

08002320 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b086      	sub	sp, #24
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002328:	2300      	movs	r3, #0
 800232a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800232c:	4b2a      	ldr	r3, [pc, #168]	; (80023d8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800232e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002330:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002334:	2b00      	cmp	r3, #0
 8002336:	d003      	beq.n	8002340 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002338:	f7ff f9ee 	bl	8001718 <HAL_PWREx_GetVoltageRange>
 800233c:	6178      	str	r0, [r7, #20]
 800233e:	e014      	b.n	800236a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002340:	4b25      	ldr	r3, [pc, #148]	; (80023d8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002342:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002344:	4a24      	ldr	r2, [pc, #144]	; (80023d8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002346:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800234a:	6593      	str	r3, [r2, #88]	; 0x58
 800234c:	4b22      	ldr	r3, [pc, #136]	; (80023d8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800234e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002350:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002354:	60fb      	str	r3, [r7, #12]
 8002356:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002358:	f7ff f9de 	bl	8001718 <HAL_PWREx_GetVoltageRange>
 800235c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800235e:	4b1e      	ldr	r3, [pc, #120]	; (80023d8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002360:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002362:	4a1d      	ldr	r2, [pc, #116]	; (80023d8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002364:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002368:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800236a:	697b      	ldr	r3, [r7, #20]
 800236c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002370:	d10b      	bne.n	800238a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	2b80      	cmp	r3, #128	; 0x80
 8002376:	d919      	bls.n	80023ac <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	2ba0      	cmp	r3, #160	; 0xa0
 800237c:	d902      	bls.n	8002384 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800237e:	2302      	movs	r3, #2
 8002380:	613b      	str	r3, [r7, #16]
 8002382:	e013      	b.n	80023ac <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002384:	2301      	movs	r3, #1
 8002386:	613b      	str	r3, [r7, #16]
 8002388:	e010      	b.n	80023ac <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	2b80      	cmp	r3, #128	; 0x80
 800238e:	d902      	bls.n	8002396 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002390:	2303      	movs	r3, #3
 8002392:	613b      	str	r3, [r7, #16]
 8002394:	e00a      	b.n	80023ac <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	2b80      	cmp	r3, #128	; 0x80
 800239a:	d102      	bne.n	80023a2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800239c:	2302      	movs	r3, #2
 800239e:	613b      	str	r3, [r7, #16]
 80023a0:	e004      	b.n	80023ac <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	2b70      	cmp	r3, #112	; 0x70
 80023a6:	d101      	bne.n	80023ac <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80023a8:	2301      	movs	r3, #1
 80023aa:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80023ac:	4b0b      	ldr	r3, [pc, #44]	; (80023dc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f023 0207 	bic.w	r2, r3, #7
 80023b4:	4909      	ldr	r1, [pc, #36]	; (80023dc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80023b6:	693b      	ldr	r3, [r7, #16]
 80023b8:	4313      	orrs	r3, r2
 80023ba:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80023bc:	4b07      	ldr	r3, [pc, #28]	; (80023dc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f003 0307 	and.w	r3, r3, #7
 80023c4:	693a      	ldr	r2, [r7, #16]
 80023c6:	429a      	cmp	r2, r3
 80023c8:	d001      	beq.n	80023ce <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80023ca:	2301      	movs	r3, #1
 80023cc:	e000      	b.n	80023d0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80023ce:	2300      	movs	r3, #0
}
 80023d0:	4618      	mov	r0, r3
 80023d2:	3718      	adds	r7, #24
 80023d4:	46bd      	mov	sp, r7
 80023d6:	bd80      	pop	{r7, pc}
 80023d8:	40021000 	.word	0x40021000
 80023dc:	40022000 	.word	0x40022000

080023e0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b086      	sub	sp, #24
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80023e8:	2300      	movs	r3, #0
 80023ea:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80023ec:	2300      	movs	r3, #0
 80023ee:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d041      	beq.n	8002480 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002400:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002404:	d02a      	beq.n	800245c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002406:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800240a:	d824      	bhi.n	8002456 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800240c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002410:	d008      	beq.n	8002424 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002412:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002416:	d81e      	bhi.n	8002456 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002418:	2b00      	cmp	r3, #0
 800241a:	d00a      	beq.n	8002432 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800241c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002420:	d010      	beq.n	8002444 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002422:	e018      	b.n	8002456 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002424:	4b86      	ldr	r3, [pc, #536]	; (8002640 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002426:	68db      	ldr	r3, [r3, #12]
 8002428:	4a85      	ldr	r2, [pc, #532]	; (8002640 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800242a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800242e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002430:	e015      	b.n	800245e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	3304      	adds	r3, #4
 8002436:	2100      	movs	r1, #0
 8002438:	4618      	mov	r0, r3
 800243a:	f000 fabb 	bl	80029b4 <RCCEx_PLLSAI1_Config>
 800243e:	4603      	mov	r3, r0
 8002440:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002442:	e00c      	b.n	800245e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	3320      	adds	r3, #32
 8002448:	2100      	movs	r1, #0
 800244a:	4618      	mov	r0, r3
 800244c:	f000 fba6 	bl	8002b9c <RCCEx_PLLSAI2_Config>
 8002450:	4603      	mov	r3, r0
 8002452:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002454:	e003      	b.n	800245e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002456:	2301      	movs	r3, #1
 8002458:	74fb      	strb	r3, [r7, #19]
      break;
 800245a:	e000      	b.n	800245e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800245c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800245e:	7cfb      	ldrb	r3, [r7, #19]
 8002460:	2b00      	cmp	r3, #0
 8002462:	d10b      	bne.n	800247c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002464:	4b76      	ldr	r3, [pc, #472]	; (8002640 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002466:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800246a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002472:	4973      	ldr	r1, [pc, #460]	; (8002640 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002474:	4313      	orrs	r3, r2
 8002476:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800247a:	e001      	b.n	8002480 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800247c:	7cfb      	ldrb	r3, [r7, #19]
 800247e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002488:	2b00      	cmp	r3, #0
 800248a:	d041      	beq.n	8002510 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002490:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002494:	d02a      	beq.n	80024ec <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002496:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800249a:	d824      	bhi.n	80024e6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 800249c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80024a0:	d008      	beq.n	80024b4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80024a2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80024a6:	d81e      	bhi.n	80024e6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d00a      	beq.n	80024c2 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80024ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80024b0:	d010      	beq.n	80024d4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80024b2:	e018      	b.n	80024e6 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80024b4:	4b62      	ldr	r3, [pc, #392]	; (8002640 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024b6:	68db      	ldr	r3, [r3, #12]
 80024b8:	4a61      	ldr	r2, [pc, #388]	; (8002640 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024be:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80024c0:	e015      	b.n	80024ee <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	3304      	adds	r3, #4
 80024c6:	2100      	movs	r1, #0
 80024c8:	4618      	mov	r0, r3
 80024ca:	f000 fa73 	bl	80029b4 <RCCEx_PLLSAI1_Config>
 80024ce:	4603      	mov	r3, r0
 80024d0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80024d2:	e00c      	b.n	80024ee <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	3320      	adds	r3, #32
 80024d8:	2100      	movs	r1, #0
 80024da:	4618      	mov	r0, r3
 80024dc:	f000 fb5e 	bl	8002b9c <RCCEx_PLLSAI2_Config>
 80024e0:	4603      	mov	r3, r0
 80024e2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80024e4:	e003      	b.n	80024ee <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80024e6:	2301      	movs	r3, #1
 80024e8:	74fb      	strb	r3, [r7, #19]
      break;
 80024ea:	e000      	b.n	80024ee <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80024ec:	bf00      	nop
    }

    if(ret == HAL_OK)
 80024ee:	7cfb      	ldrb	r3, [r7, #19]
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d10b      	bne.n	800250c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80024f4:	4b52      	ldr	r3, [pc, #328]	; (8002640 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024fa:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002502:	494f      	ldr	r1, [pc, #316]	; (8002640 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002504:	4313      	orrs	r3, r2
 8002506:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800250a:	e001      	b.n	8002510 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800250c:	7cfb      	ldrb	r3, [r7, #19]
 800250e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002518:	2b00      	cmp	r3, #0
 800251a:	f000 80a0 	beq.w	800265e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800251e:	2300      	movs	r3, #0
 8002520:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002522:	4b47      	ldr	r3, [pc, #284]	; (8002640 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002524:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002526:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800252a:	2b00      	cmp	r3, #0
 800252c:	d101      	bne.n	8002532 <HAL_RCCEx_PeriphCLKConfig+0x152>
 800252e:	2301      	movs	r3, #1
 8002530:	e000      	b.n	8002534 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002532:	2300      	movs	r3, #0
 8002534:	2b00      	cmp	r3, #0
 8002536:	d00d      	beq.n	8002554 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002538:	4b41      	ldr	r3, [pc, #260]	; (8002640 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800253a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800253c:	4a40      	ldr	r2, [pc, #256]	; (8002640 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800253e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002542:	6593      	str	r3, [r2, #88]	; 0x58
 8002544:	4b3e      	ldr	r3, [pc, #248]	; (8002640 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002546:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002548:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800254c:	60bb      	str	r3, [r7, #8]
 800254e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002550:	2301      	movs	r3, #1
 8002552:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002554:	4b3b      	ldr	r3, [pc, #236]	; (8002644 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	4a3a      	ldr	r2, [pc, #232]	; (8002644 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800255a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800255e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002560:	f7fe fb6a 	bl	8000c38 <HAL_GetTick>
 8002564:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002566:	e009      	b.n	800257c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002568:	f7fe fb66 	bl	8000c38 <HAL_GetTick>
 800256c:	4602      	mov	r2, r0
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	1ad3      	subs	r3, r2, r3
 8002572:	2b02      	cmp	r3, #2
 8002574:	d902      	bls.n	800257c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002576:	2303      	movs	r3, #3
 8002578:	74fb      	strb	r3, [r7, #19]
        break;
 800257a:	e005      	b.n	8002588 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800257c:	4b31      	ldr	r3, [pc, #196]	; (8002644 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002584:	2b00      	cmp	r3, #0
 8002586:	d0ef      	beq.n	8002568 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002588:	7cfb      	ldrb	r3, [r7, #19]
 800258a:	2b00      	cmp	r3, #0
 800258c:	d15c      	bne.n	8002648 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800258e:	4b2c      	ldr	r3, [pc, #176]	; (8002640 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002590:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002594:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002598:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800259a:	697b      	ldr	r3, [r7, #20]
 800259c:	2b00      	cmp	r3, #0
 800259e:	d01f      	beq.n	80025e0 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80025a6:	697a      	ldr	r2, [r7, #20]
 80025a8:	429a      	cmp	r2, r3
 80025aa:	d019      	beq.n	80025e0 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80025ac:	4b24      	ldr	r3, [pc, #144]	; (8002640 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80025b6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80025b8:	4b21      	ldr	r3, [pc, #132]	; (8002640 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025be:	4a20      	ldr	r2, [pc, #128]	; (8002640 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80025c8:	4b1d      	ldr	r3, [pc, #116]	; (8002640 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025ce:	4a1c      	ldr	r2, [pc, #112]	; (8002640 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80025d8:	4a19      	ldr	r2, [pc, #100]	; (8002640 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025da:	697b      	ldr	r3, [r7, #20]
 80025dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80025e0:	697b      	ldr	r3, [r7, #20]
 80025e2:	f003 0301 	and.w	r3, r3, #1
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d016      	beq.n	8002618 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025ea:	f7fe fb25 	bl	8000c38 <HAL_GetTick>
 80025ee:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80025f0:	e00b      	b.n	800260a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025f2:	f7fe fb21 	bl	8000c38 <HAL_GetTick>
 80025f6:	4602      	mov	r2, r0
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	1ad3      	subs	r3, r2, r3
 80025fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002600:	4293      	cmp	r3, r2
 8002602:	d902      	bls.n	800260a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002604:	2303      	movs	r3, #3
 8002606:	74fb      	strb	r3, [r7, #19]
            break;
 8002608:	e006      	b.n	8002618 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800260a:	4b0d      	ldr	r3, [pc, #52]	; (8002640 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800260c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002610:	f003 0302 	and.w	r3, r3, #2
 8002614:	2b00      	cmp	r3, #0
 8002616:	d0ec      	beq.n	80025f2 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002618:	7cfb      	ldrb	r3, [r7, #19]
 800261a:	2b00      	cmp	r3, #0
 800261c:	d10c      	bne.n	8002638 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800261e:	4b08      	ldr	r3, [pc, #32]	; (8002640 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002620:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002624:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800262e:	4904      	ldr	r1, [pc, #16]	; (8002640 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002630:	4313      	orrs	r3, r2
 8002632:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002636:	e009      	b.n	800264c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002638:	7cfb      	ldrb	r3, [r7, #19]
 800263a:	74bb      	strb	r3, [r7, #18]
 800263c:	e006      	b.n	800264c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800263e:	bf00      	nop
 8002640:	40021000 	.word	0x40021000
 8002644:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002648:	7cfb      	ldrb	r3, [r7, #19]
 800264a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800264c:	7c7b      	ldrb	r3, [r7, #17]
 800264e:	2b01      	cmp	r3, #1
 8002650:	d105      	bne.n	800265e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002652:	4b9e      	ldr	r3, [pc, #632]	; (80028cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002654:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002656:	4a9d      	ldr	r2, [pc, #628]	; (80028cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002658:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800265c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f003 0301 	and.w	r3, r3, #1
 8002666:	2b00      	cmp	r3, #0
 8002668:	d00a      	beq.n	8002680 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800266a:	4b98      	ldr	r3, [pc, #608]	; (80028cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800266c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002670:	f023 0203 	bic.w	r2, r3, #3
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002678:	4994      	ldr	r1, [pc, #592]	; (80028cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800267a:	4313      	orrs	r3, r2
 800267c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f003 0302 	and.w	r3, r3, #2
 8002688:	2b00      	cmp	r3, #0
 800268a:	d00a      	beq.n	80026a2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800268c:	4b8f      	ldr	r3, [pc, #572]	; (80028cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800268e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002692:	f023 020c 	bic.w	r2, r3, #12
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800269a:	498c      	ldr	r1, [pc, #560]	; (80028cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800269c:	4313      	orrs	r3, r2
 800269e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f003 0304 	and.w	r3, r3, #4
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d00a      	beq.n	80026c4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80026ae:	4b87      	ldr	r3, [pc, #540]	; (80028cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026b4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026bc:	4983      	ldr	r1, [pc, #524]	; (80028cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026be:	4313      	orrs	r3, r2
 80026c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f003 0308 	and.w	r3, r3, #8
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d00a      	beq.n	80026e6 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80026d0:	4b7e      	ldr	r3, [pc, #504]	; (80028cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026d6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026de:	497b      	ldr	r1, [pc, #492]	; (80028cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026e0:	4313      	orrs	r3, r2
 80026e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f003 0310 	and.w	r3, r3, #16
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d00a      	beq.n	8002708 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80026f2:	4b76      	ldr	r3, [pc, #472]	; (80028cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026f8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002700:	4972      	ldr	r1, [pc, #456]	; (80028cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002702:	4313      	orrs	r3, r2
 8002704:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f003 0320 	and.w	r3, r3, #32
 8002710:	2b00      	cmp	r3, #0
 8002712:	d00a      	beq.n	800272a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002714:	4b6d      	ldr	r3, [pc, #436]	; (80028cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002716:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800271a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002722:	496a      	ldr	r1, [pc, #424]	; (80028cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002724:	4313      	orrs	r3, r2
 8002726:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002732:	2b00      	cmp	r3, #0
 8002734:	d00a      	beq.n	800274c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002736:	4b65      	ldr	r3, [pc, #404]	; (80028cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002738:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800273c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002744:	4961      	ldr	r1, [pc, #388]	; (80028cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002746:	4313      	orrs	r3, r2
 8002748:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002754:	2b00      	cmp	r3, #0
 8002756:	d00a      	beq.n	800276e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002758:	4b5c      	ldr	r3, [pc, #368]	; (80028cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800275a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800275e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002766:	4959      	ldr	r1, [pc, #356]	; (80028cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002768:	4313      	orrs	r3, r2
 800276a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002776:	2b00      	cmp	r3, #0
 8002778:	d00a      	beq.n	8002790 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800277a:	4b54      	ldr	r3, [pc, #336]	; (80028cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800277c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002780:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002788:	4950      	ldr	r1, [pc, #320]	; (80028cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800278a:	4313      	orrs	r3, r2
 800278c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002798:	2b00      	cmp	r3, #0
 800279a:	d00a      	beq.n	80027b2 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800279c:	4b4b      	ldr	r3, [pc, #300]	; (80028cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800279e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027a2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027aa:	4948      	ldr	r1, [pc, #288]	; (80028cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027ac:	4313      	orrs	r3, r2
 80027ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d00a      	beq.n	80027d4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80027be:	4b43      	ldr	r3, [pc, #268]	; (80028cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027c4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027cc:	493f      	ldr	r1, [pc, #252]	; (80028cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027ce:	4313      	orrs	r3, r2
 80027d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d028      	beq.n	8002832 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80027e0:	4b3a      	ldr	r3, [pc, #232]	; (80028cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027e6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80027ee:	4937      	ldr	r1, [pc, #220]	; (80028cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027f0:	4313      	orrs	r3, r2
 80027f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80027fa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80027fe:	d106      	bne.n	800280e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002800:	4b32      	ldr	r3, [pc, #200]	; (80028cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002802:	68db      	ldr	r3, [r3, #12]
 8002804:	4a31      	ldr	r2, [pc, #196]	; (80028cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002806:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800280a:	60d3      	str	r3, [r2, #12]
 800280c:	e011      	b.n	8002832 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002812:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002816:	d10c      	bne.n	8002832 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	3304      	adds	r3, #4
 800281c:	2101      	movs	r1, #1
 800281e:	4618      	mov	r0, r3
 8002820:	f000 f8c8 	bl	80029b4 <RCCEx_PLLSAI1_Config>
 8002824:	4603      	mov	r3, r0
 8002826:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002828:	7cfb      	ldrb	r3, [r7, #19]
 800282a:	2b00      	cmp	r3, #0
 800282c:	d001      	beq.n	8002832 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800282e:	7cfb      	ldrb	r3, [r7, #19]
 8002830:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800283a:	2b00      	cmp	r3, #0
 800283c:	d028      	beq.n	8002890 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800283e:	4b23      	ldr	r3, [pc, #140]	; (80028cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002840:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002844:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800284c:	491f      	ldr	r1, [pc, #124]	; (80028cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800284e:	4313      	orrs	r3, r2
 8002850:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002858:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800285c:	d106      	bne.n	800286c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800285e:	4b1b      	ldr	r3, [pc, #108]	; (80028cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002860:	68db      	ldr	r3, [r3, #12]
 8002862:	4a1a      	ldr	r2, [pc, #104]	; (80028cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002864:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002868:	60d3      	str	r3, [r2, #12]
 800286a:	e011      	b.n	8002890 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002870:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002874:	d10c      	bne.n	8002890 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	3304      	adds	r3, #4
 800287a:	2101      	movs	r1, #1
 800287c:	4618      	mov	r0, r3
 800287e:	f000 f899 	bl	80029b4 <RCCEx_PLLSAI1_Config>
 8002882:	4603      	mov	r3, r0
 8002884:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002886:	7cfb      	ldrb	r3, [r7, #19]
 8002888:	2b00      	cmp	r3, #0
 800288a:	d001      	beq.n	8002890 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 800288c:	7cfb      	ldrb	r3, [r7, #19]
 800288e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002898:	2b00      	cmp	r3, #0
 800289a:	d02b      	beq.n	80028f4 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800289c:	4b0b      	ldr	r3, [pc, #44]	; (80028cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800289e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028a2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028aa:	4908      	ldr	r1, [pc, #32]	; (80028cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028ac:	4313      	orrs	r3, r2
 80028ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028b6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80028ba:	d109      	bne.n	80028d0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80028bc:	4b03      	ldr	r3, [pc, #12]	; (80028cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028be:	68db      	ldr	r3, [r3, #12]
 80028c0:	4a02      	ldr	r2, [pc, #8]	; (80028cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028c2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80028c6:	60d3      	str	r3, [r2, #12]
 80028c8:	e014      	b.n	80028f4 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80028ca:	bf00      	nop
 80028cc:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028d4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80028d8:	d10c      	bne.n	80028f4 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	3304      	adds	r3, #4
 80028de:	2101      	movs	r1, #1
 80028e0:	4618      	mov	r0, r3
 80028e2:	f000 f867 	bl	80029b4 <RCCEx_PLLSAI1_Config>
 80028e6:	4603      	mov	r3, r0
 80028e8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80028ea:	7cfb      	ldrb	r3, [r7, #19]
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d001      	beq.n	80028f4 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80028f0:	7cfb      	ldrb	r3, [r7, #19]
 80028f2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d02f      	beq.n	8002960 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002900:	4b2b      	ldr	r3, [pc, #172]	; (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002902:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002906:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800290e:	4928      	ldr	r1, [pc, #160]	; (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002910:	4313      	orrs	r3, r2
 8002912:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800291a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800291e:	d10d      	bne.n	800293c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	3304      	adds	r3, #4
 8002924:	2102      	movs	r1, #2
 8002926:	4618      	mov	r0, r3
 8002928:	f000 f844 	bl	80029b4 <RCCEx_PLLSAI1_Config>
 800292c:	4603      	mov	r3, r0
 800292e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002930:	7cfb      	ldrb	r3, [r7, #19]
 8002932:	2b00      	cmp	r3, #0
 8002934:	d014      	beq.n	8002960 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002936:	7cfb      	ldrb	r3, [r7, #19]
 8002938:	74bb      	strb	r3, [r7, #18]
 800293a:	e011      	b.n	8002960 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002940:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002944:	d10c      	bne.n	8002960 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	3320      	adds	r3, #32
 800294a:	2102      	movs	r1, #2
 800294c:	4618      	mov	r0, r3
 800294e:	f000 f925 	bl	8002b9c <RCCEx_PLLSAI2_Config>
 8002952:	4603      	mov	r3, r0
 8002954:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002956:	7cfb      	ldrb	r3, [r7, #19]
 8002958:	2b00      	cmp	r3, #0
 800295a:	d001      	beq.n	8002960 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800295c:	7cfb      	ldrb	r3, [r7, #19]
 800295e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002968:	2b00      	cmp	r3, #0
 800296a:	d00a      	beq.n	8002982 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800296c:	4b10      	ldr	r3, [pc, #64]	; (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800296e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002972:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800297a:	490d      	ldr	r1, [pc, #52]	; (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800297c:	4313      	orrs	r3, r2
 800297e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800298a:	2b00      	cmp	r3, #0
 800298c:	d00b      	beq.n	80029a6 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800298e:	4b08      	ldr	r3, [pc, #32]	; (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002990:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002994:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800299e:	4904      	ldr	r1, [pc, #16]	; (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80029a0:	4313      	orrs	r3, r2
 80029a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80029a6:	7cbb      	ldrb	r3, [r7, #18]
}
 80029a8:	4618      	mov	r0, r3
 80029aa:	3718      	adds	r7, #24
 80029ac:	46bd      	mov	sp, r7
 80029ae:	bd80      	pop	{r7, pc}
 80029b0:	40021000 	.word	0x40021000

080029b4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b084      	sub	sp, #16
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
 80029bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80029be:	2300      	movs	r3, #0
 80029c0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80029c2:	4b75      	ldr	r3, [pc, #468]	; (8002b98 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029c4:	68db      	ldr	r3, [r3, #12]
 80029c6:	f003 0303 	and.w	r3, r3, #3
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d018      	beq.n	8002a00 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80029ce:	4b72      	ldr	r3, [pc, #456]	; (8002b98 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029d0:	68db      	ldr	r3, [r3, #12]
 80029d2:	f003 0203 	and.w	r2, r3, #3
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	429a      	cmp	r2, r3
 80029dc:	d10d      	bne.n	80029fa <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
       ||
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d009      	beq.n	80029fa <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80029e6:	4b6c      	ldr	r3, [pc, #432]	; (8002b98 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029e8:	68db      	ldr	r3, [r3, #12]
 80029ea:	091b      	lsrs	r3, r3, #4
 80029ec:	f003 0307 	and.w	r3, r3, #7
 80029f0:	1c5a      	adds	r2, r3, #1
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	685b      	ldr	r3, [r3, #4]
       ||
 80029f6:	429a      	cmp	r2, r3
 80029f8:	d047      	beq.n	8002a8a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80029fa:	2301      	movs	r3, #1
 80029fc:	73fb      	strb	r3, [r7, #15]
 80029fe:	e044      	b.n	8002a8a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	2b03      	cmp	r3, #3
 8002a06:	d018      	beq.n	8002a3a <RCCEx_PLLSAI1_Config+0x86>
 8002a08:	2b03      	cmp	r3, #3
 8002a0a:	d825      	bhi.n	8002a58 <RCCEx_PLLSAI1_Config+0xa4>
 8002a0c:	2b01      	cmp	r3, #1
 8002a0e:	d002      	beq.n	8002a16 <RCCEx_PLLSAI1_Config+0x62>
 8002a10:	2b02      	cmp	r3, #2
 8002a12:	d009      	beq.n	8002a28 <RCCEx_PLLSAI1_Config+0x74>
 8002a14:	e020      	b.n	8002a58 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002a16:	4b60      	ldr	r3, [pc, #384]	; (8002b98 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f003 0302 	and.w	r3, r3, #2
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d11d      	bne.n	8002a5e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002a22:	2301      	movs	r3, #1
 8002a24:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a26:	e01a      	b.n	8002a5e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002a28:	4b5b      	ldr	r3, [pc, #364]	; (8002b98 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d116      	bne.n	8002a62 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002a34:	2301      	movs	r3, #1
 8002a36:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a38:	e013      	b.n	8002a62 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002a3a:	4b57      	ldr	r3, [pc, #348]	; (8002b98 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d10f      	bne.n	8002a66 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002a46:	4b54      	ldr	r3, [pc, #336]	; (8002b98 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d109      	bne.n	8002a66 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002a52:	2301      	movs	r3, #1
 8002a54:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002a56:	e006      	b.n	8002a66 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002a58:	2301      	movs	r3, #1
 8002a5a:	73fb      	strb	r3, [r7, #15]
      break;
 8002a5c:	e004      	b.n	8002a68 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002a5e:	bf00      	nop
 8002a60:	e002      	b.n	8002a68 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002a62:	bf00      	nop
 8002a64:	e000      	b.n	8002a68 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002a66:	bf00      	nop
    }

    if(status == HAL_OK)
 8002a68:	7bfb      	ldrb	r3, [r7, #15]
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d10d      	bne.n	8002a8a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002a6e:	4b4a      	ldr	r3, [pc, #296]	; (8002b98 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a70:	68db      	ldr	r3, [r3, #12]
 8002a72:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6819      	ldr	r1, [r3, #0]
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	685b      	ldr	r3, [r3, #4]
 8002a7e:	3b01      	subs	r3, #1
 8002a80:	011b      	lsls	r3, r3, #4
 8002a82:	430b      	orrs	r3, r1
 8002a84:	4944      	ldr	r1, [pc, #272]	; (8002b98 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a86:	4313      	orrs	r3, r2
 8002a88:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002a8a:	7bfb      	ldrb	r3, [r7, #15]
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d17d      	bne.n	8002b8c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002a90:	4b41      	ldr	r3, [pc, #260]	; (8002b98 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4a40      	ldr	r2, [pc, #256]	; (8002b98 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a96:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002a9a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a9c:	f7fe f8cc 	bl	8000c38 <HAL_GetTick>
 8002aa0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002aa2:	e009      	b.n	8002ab8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002aa4:	f7fe f8c8 	bl	8000c38 <HAL_GetTick>
 8002aa8:	4602      	mov	r2, r0
 8002aaa:	68bb      	ldr	r3, [r7, #8]
 8002aac:	1ad3      	subs	r3, r2, r3
 8002aae:	2b02      	cmp	r3, #2
 8002ab0:	d902      	bls.n	8002ab8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002ab2:	2303      	movs	r3, #3
 8002ab4:	73fb      	strb	r3, [r7, #15]
        break;
 8002ab6:	e005      	b.n	8002ac4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002ab8:	4b37      	ldr	r3, [pc, #220]	; (8002b98 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d1ef      	bne.n	8002aa4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002ac4:	7bfb      	ldrb	r3, [r7, #15]
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d160      	bne.n	8002b8c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d111      	bne.n	8002af4 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002ad0:	4b31      	ldr	r3, [pc, #196]	; (8002b98 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ad2:	691b      	ldr	r3, [r3, #16]
 8002ad4:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002ad8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002adc:	687a      	ldr	r2, [r7, #4]
 8002ade:	6892      	ldr	r2, [r2, #8]
 8002ae0:	0211      	lsls	r1, r2, #8
 8002ae2:	687a      	ldr	r2, [r7, #4]
 8002ae4:	68d2      	ldr	r2, [r2, #12]
 8002ae6:	0912      	lsrs	r2, r2, #4
 8002ae8:	0452      	lsls	r2, r2, #17
 8002aea:	430a      	orrs	r2, r1
 8002aec:	492a      	ldr	r1, [pc, #168]	; (8002b98 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002aee:	4313      	orrs	r3, r2
 8002af0:	610b      	str	r3, [r1, #16]
 8002af2:	e027      	b.n	8002b44 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	2b01      	cmp	r3, #1
 8002af8:	d112      	bne.n	8002b20 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002afa:	4b27      	ldr	r3, [pc, #156]	; (8002b98 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002afc:	691b      	ldr	r3, [r3, #16]
 8002afe:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002b02:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002b06:	687a      	ldr	r2, [r7, #4]
 8002b08:	6892      	ldr	r2, [r2, #8]
 8002b0a:	0211      	lsls	r1, r2, #8
 8002b0c:	687a      	ldr	r2, [r7, #4]
 8002b0e:	6912      	ldr	r2, [r2, #16]
 8002b10:	0852      	lsrs	r2, r2, #1
 8002b12:	3a01      	subs	r2, #1
 8002b14:	0552      	lsls	r2, r2, #21
 8002b16:	430a      	orrs	r2, r1
 8002b18:	491f      	ldr	r1, [pc, #124]	; (8002b98 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b1a:	4313      	orrs	r3, r2
 8002b1c:	610b      	str	r3, [r1, #16]
 8002b1e:	e011      	b.n	8002b44 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002b20:	4b1d      	ldr	r3, [pc, #116]	; (8002b98 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b22:	691b      	ldr	r3, [r3, #16]
 8002b24:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002b28:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002b2c:	687a      	ldr	r2, [r7, #4]
 8002b2e:	6892      	ldr	r2, [r2, #8]
 8002b30:	0211      	lsls	r1, r2, #8
 8002b32:	687a      	ldr	r2, [r7, #4]
 8002b34:	6952      	ldr	r2, [r2, #20]
 8002b36:	0852      	lsrs	r2, r2, #1
 8002b38:	3a01      	subs	r2, #1
 8002b3a:	0652      	lsls	r2, r2, #25
 8002b3c:	430a      	orrs	r2, r1
 8002b3e:	4916      	ldr	r1, [pc, #88]	; (8002b98 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b40:	4313      	orrs	r3, r2
 8002b42:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002b44:	4b14      	ldr	r3, [pc, #80]	; (8002b98 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4a13      	ldr	r2, [pc, #76]	; (8002b98 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b4a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002b4e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b50:	f7fe f872 	bl	8000c38 <HAL_GetTick>
 8002b54:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002b56:	e009      	b.n	8002b6c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002b58:	f7fe f86e 	bl	8000c38 <HAL_GetTick>
 8002b5c:	4602      	mov	r2, r0
 8002b5e:	68bb      	ldr	r3, [r7, #8]
 8002b60:	1ad3      	subs	r3, r2, r3
 8002b62:	2b02      	cmp	r3, #2
 8002b64:	d902      	bls.n	8002b6c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002b66:	2303      	movs	r3, #3
 8002b68:	73fb      	strb	r3, [r7, #15]
          break;
 8002b6a:	e005      	b.n	8002b78 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002b6c:	4b0a      	ldr	r3, [pc, #40]	; (8002b98 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d0ef      	beq.n	8002b58 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002b78:	7bfb      	ldrb	r3, [r7, #15]
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d106      	bne.n	8002b8c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002b7e:	4b06      	ldr	r3, [pc, #24]	; (8002b98 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b80:	691a      	ldr	r2, [r3, #16]
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	699b      	ldr	r3, [r3, #24]
 8002b86:	4904      	ldr	r1, [pc, #16]	; (8002b98 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b88:	4313      	orrs	r3, r2
 8002b8a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002b8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b8e:	4618      	mov	r0, r3
 8002b90:	3710      	adds	r7, #16
 8002b92:	46bd      	mov	sp, r7
 8002b94:	bd80      	pop	{r7, pc}
 8002b96:	bf00      	nop
 8002b98:	40021000 	.word	0x40021000

08002b9c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b084      	sub	sp, #16
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
 8002ba4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002baa:	4b6a      	ldr	r3, [pc, #424]	; (8002d54 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002bac:	68db      	ldr	r3, [r3, #12]
 8002bae:	f003 0303 	and.w	r3, r3, #3
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d018      	beq.n	8002be8 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002bb6:	4b67      	ldr	r3, [pc, #412]	; (8002d54 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002bb8:	68db      	ldr	r3, [r3, #12]
 8002bba:	f003 0203 	and.w	r2, r3, #3
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	429a      	cmp	r2, r3
 8002bc4:	d10d      	bne.n	8002be2 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
       ||
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d009      	beq.n	8002be2 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002bce:	4b61      	ldr	r3, [pc, #388]	; (8002d54 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002bd0:	68db      	ldr	r3, [r3, #12]
 8002bd2:	091b      	lsrs	r3, r3, #4
 8002bd4:	f003 0307 	and.w	r3, r3, #7
 8002bd8:	1c5a      	adds	r2, r3, #1
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	685b      	ldr	r3, [r3, #4]
       ||
 8002bde:	429a      	cmp	r2, r3
 8002be0:	d047      	beq.n	8002c72 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002be2:	2301      	movs	r3, #1
 8002be4:	73fb      	strb	r3, [r7, #15]
 8002be6:	e044      	b.n	8002c72 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	2b03      	cmp	r3, #3
 8002bee:	d018      	beq.n	8002c22 <RCCEx_PLLSAI2_Config+0x86>
 8002bf0:	2b03      	cmp	r3, #3
 8002bf2:	d825      	bhi.n	8002c40 <RCCEx_PLLSAI2_Config+0xa4>
 8002bf4:	2b01      	cmp	r3, #1
 8002bf6:	d002      	beq.n	8002bfe <RCCEx_PLLSAI2_Config+0x62>
 8002bf8:	2b02      	cmp	r3, #2
 8002bfa:	d009      	beq.n	8002c10 <RCCEx_PLLSAI2_Config+0x74>
 8002bfc:	e020      	b.n	8002c40 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002bfe:	4b55      	ldr	r3, [pc, #340]	; (8002d54 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f003 0302 	and.w	r3, r3, #2
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d11d      	bne.n	8002c46 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c0e:	e01a      	b.n	8002c46 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002c10:	4b50      	ldr	r3, [pc, #320]	; (8002d54 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d116      	bne.n	8002c4a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002c1c:	2301      	movs	r3, #1
 8002c1e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c20:	e013      	b.n	8002c4a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002c22:	4b4c      	ldr	r3, [pc, #304]	; (8002d54 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d10f      	bne.n	8002c4e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002c2e:	4b49      	ldr	r3, [pc, #292]	; (8002d54 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d109      	bne.n	8002c4e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002c3e:	e006      	b.n	8002c4e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002c40:	2301      	movs	r3, #1
 8002c42:	73fb      	strb	r3, [r7, #15]
      break;
 8002c44:	e004      	b.n	8002c50 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002c46:	bf00      	nop
 8002c48:	e002      	b.n	8002c50 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002c4a:	bf00      	nop
 8002c4c:	e000      	b.n	8002c50 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002c4e:	bf00      	nop
    }

    if(status == HAL_OK)
 8002c50:	7bfb      	ldrb	r3, [r7, #15]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d10d      	bne.n	8002c72 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002c56:	4b3f      	ldr	r3, [pc, #252]	; (8002d54 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c58:	68db      	ldr	r3, [r3, #12]
 8002c5a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6819      	ldr	r1, [r3, #0]
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	685b      	ldr	r3, [r3, #4]
 8002c66:	3b01      	subs	r3, #1
 8002c68:	011b      	lsls	r3, r3, #4
 8002c6a:	430b      	orrs	r3, r1
 8002c6c:	4939      	ldr	r1, [pc, #228]	; (8002d54 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c6e:	4313      	orrs	r3, r2
 8002c70:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002c72:	7bfb      	ldrb	r3, [r7, #15]
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d167      	bne.n	8002d48 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002c78:	4b36      	ldr	r3, [pc, #216]	; (8002d54 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	4a35      	ldr	r2, [pc, #212]	; (8002d54 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c7e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c82:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c84:	f7fd ffd8 	bl	8000c38 <HAL_GetTick>
 8002c88:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002c8a:	e009      	b.n	8002ca0 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002c8c:	f7fd ffd4 	bl	8000c38 <HAL_GetTick>
 8002c90:	4602      	mov	r2, r0
 8002c92:	68bb      	ldr	r3, [r7, #8]
 8002c94:	1ad3      	subs	r3, r2, r3
 8002c96:	2b02      	cmp	r3, #2
 8002c98:	d902      	bls.n	8002ca0 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002c9a:	2303      	movs	r3, #3
 8002c9c:	73fb      	strb	r3, [r7, #15]
        break;
 8002c9e:	e005      	b.n	8002cac <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002ca0:	4b2c      	ldr	r3, [pc, #176]	; (8002d54 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d1ef      	bne.n	8002c8c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002cac:	7bfb      	ldrb	r3, [r7, #15]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d14a      	bne.n	8002d48 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d111      	bne.n	8002cdc <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002cb8:	4b26      	ldr	r3, [pc, #152]	; (8002d54 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002cba:	695b      	ldr	r3, [r3, #20]
 8002cbc:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002cc0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002cc4:	687a      	ldr	r2, [r7, #4]
 8002cc6:	6892      	ldr	r2, [r2, #8]
 8002cc8:	0211      	lsls	r1, r2, #8
 8002cca:	687a      	ldr	r2, [r7, #4]
 8002ccc:	68d2      	ldr	r2, [r2, #12]
 8002cce:	0912      	lsrs	r2, r2, #4
 8002cd0:	0452      	lsls	r2, r2, #17
 8002cd2:	430a      	orrs	r2, r1
 8002cd4:	491f      	ldr	r1, [pc, #124]	; (8002d54 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002cd6:	4313      	orrs	r3, r2
 8002cd8:	614b      	str	r3, [r1, #20]
 8002cda:	e011      	b.n	8002d00 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002cdc:	4b1d      	ldr	r3, [pc, #116]	; (8002d54 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002cde:	695b      	ldr	r3, [r3, #20]
 8002ce0:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002ce4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002ce8:	687a      	ldr	r2, [r7, #4]
 8002cea:	6892      	ldr	r2, [r2, #8]
 8002cec:	0211      	lsls	r1, r2, #8
 8002cee:	687a      	ldr	r2, [r7, #4]
 8002cf0:	6912      	ldr	r2, [r2, #16]
 8002cf2:	0852      	lsrs	r2, r2, #1
 8002cf4:	3a01      	subs	r2, #1
 8002cf6:	0652      	lsls	r2, r2, #25
 8002cf8:	430a      	orrs	r2, r1
 8002cfa:	4916      	ldr	r1, [pc, #88]	; (8002d54 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002cfc:	4313      	orrs	r3, r2
 8002cfe:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002d00:	4b14      	ldr	r3, [pc, #80]	; (8002d54 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4a13      	ldr	r2, [pc, #76]	; (8002d54 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d06:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d0a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d0c:	f7fd ff94 	bl	8000c38 <HAL_GetTick>
 8002d10:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002d12:	e009      	b.n	8002d28 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002d14:	f7fd ff90 	bl	8000c38 <HAL_GetTick>
 8002d18:	4602      	mov	r2, r0
 8002d1a:	68bb      	ldr	r3, [r7, #8]
 8002d1c:	1ad3      	subs	r3, r2, r3
 8002d1e:	2b02      	cmp	r3, #2
 8002d20:	d902      	bls.n	8002d28 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002d22:	2303      	movs	r3, #3
 8002d24:	73fb      	strb	r3, [r7, #15]
          break;
 8002d26:	e005      	b.n	8002d34 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002d28:	4b0a      	ldr	r3, [pc, #40]	; (8002d54 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d0ef      	beq.n	8002d14 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002d34:	7bfb      	ldrb	r3, [r7, #15]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d106      	bne.n	8002d48 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002d3a:	4b06      	ldr	r3, [pc, #24]	; (8002d54 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d3c:	695a      	ldr	r2, [r3, #20]
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	695b      	ldr	r3, [r3, #20]
 8002d42:	4904      	ldr	r1, [pc, #16]	; (8002d54 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d44:	4313      	orrs	r3, r2
 8002d46:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002d48:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	3710      	adds	r7, #16
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	bd80      	pop	{r7, pc}
 8002d52:	bf00      	nop
 8002d54:	40021000 	.word	0x40021000

08002d58 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b082      	sub	sp, #8
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d101      	bne.n	8002d6a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002d66:	2301      	movs	r3, #1
 8002d68:	e040      	b.n	8002dec <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d106      	bne.n	8002d80 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	2200      	movs	r2, #0
 8002d76:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002d7a:	6878      	ldr	r0, [r7, #4]
 8002d7c:	f7fd fd58 	bl	8000830 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2224      	movs	r2, #36	; 0x24
 8002d84:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	681a      	ldr	r2, [r3, #0]
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f022 0201 	bic.w	r2, r2, #1
 8002d94:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d002      	beq.n	8002da4 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8002d9e:	6878      	ldr	r0, [r7, #4]
 8002da0:	f000 ff0c 	bl	8003bbc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002da4:	6878      	ldr	r0, [r7, #4]
 8002da6:	f000 fc51 	bl	800364c <UART_SetConfig>
 8002daa:	4603      	mov	r3, r0
 8002dac:	2b01      	cmp	r3, #1
 8002dae:	d101      	bne.n	8002db4 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8002db0:	2301      	movs	r3, #1
 8002db2:	e01b      	b.n	8002dec <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	685a      	ldr	r2, [r3, #4]
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002dc2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	689a      	ldr	r2, [r3, #8]
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002dd2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	681a      	ldr	r2, [r3, #0]
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f042 0201 	orr.w	r2, r2, #1
 8002de2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002de4:	6878      	ldr	r0, [r7, #4]
 8002de6:	f000 ff8b 	bl	8003d00 <UART_CheckIdleState>
 8002dea:	4603      	mov	r3, r0
}
 8002dec:	4618      	mov	r0, r3
 8002dee:	3708      	adds	r7, #8
 8002df0:	46bd      	mov	sp, r7
 8002df2:	bd80      	pop	{r7, pc}

08002df4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b08a      	sub	sp, #40	; 0x28
 8002df8:	af02      	add	r7, sp, #8
 8002dfa:	60f8      	str	r0, [r7, #12]
 8002dfc:	60b9      	str	r1, [r7, #8]
 8002dfe:	603b      	str	r3, [r7, #0]
 8002e00:	4613      	mov	r3, r2
 8002e02:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002e08:	2b20      	cmp	r3, #32
 8002e0a:	d178      	bne.n	8002efe <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002e0c:	68bb      	ldr	r3, [r7, #8]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d002      	beq.n	8002e18 <HAL_UART_Transmit+0x24>
 8002e12:	88fb      	ldrh	r3, [r7, #6]
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d101      	bne.n	8002e1c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8002e18:	2301      	movs	r3, #1
 8002e1a:	e071      	b.n	8002f00 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	2200      	movs	r2, #0
 8002e20:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	2221      	movs	r2, #33	; 0x21
 8002e28:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002e2a:	f7fd ff05 	bl	8000c38 <HAL_GetTick>
 8002e2e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	88fa      	ldrh	r2, [r7, #6]
 8002e34:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	88fa      	ldrh	r2, [r7, #6]
 8002e3c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	689b      	ldr	r3, [r3, #8]
 8002e44:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e48:	d108      	bne.n	8002e5c <HAL_UART_Transmit+0x68>
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	691b      	ldr	r3, [r3, #16]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d104      	bne.n	8002e5c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8002e52:	2300      	movs	r3, #0
 8002e54:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002e56:	68bb      	ldr	r3, [r7, #8]
 8002e58:	61bb      	str	r3, [r7, #24]
 8002e5a:	e003      	b.n	8002e64 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8002e5c:	68bb      	ldr	r3, [r7, #8]
 8002e5e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002e60:	2300      	movs	r3, #0
 8002e62:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002e64:	e030      	b.n	8002ec8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002e66:	683b      	ldr	r3, [r7, #0]
 8002e68:	9300      	str	r3, [sp, #0]
 8002e6a:	697b      	ldr	r3, [r7, #20]
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	2180      	movs	r1, #128	; 0x80
 8002e70:	68f8      	ldr	r0, [r7, #12]
 8002e72:	f000 ffed 	bl	8003e50 <UART_WaitOnFlagUntilTimeout>
 8002e76:	4603      	mov	r3, r0
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d004      	beq.n	8002e86 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	2220      	movs	r2, #32
 8002e80:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8002e82:	2303      	movs	r3, #3
 8002e84:	e03c      	b.n	8002f00 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8002e86:	69fb      	ldr	r3, [r7, #28]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d10b      	bne.n	8002ea4 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002e8c:	69bb      	ldr	r3, [r7, #24]
 8002e8e:	881a      	ldrh	r2, [r3, #0]
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002e98:	b292      	uxth	r2, r2
 8002e9a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002e9c:	69bb      	ldr	r3, [r7, #24]
 8002e9e:	3302      	adds	r3, #2
 8002ea0:	61bb      	str	r3, [r7, #24]
 8002ea2:	e008      	b.n	8002eb6 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002ea4:	69fb      	ldr	r3, [r7, #28]
 8002ea6:	781a      	ldrb	r2, [r3, #0]
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	b292      	uxth	r2, r2
 8002eae:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002eb0:	69fb      	ldr	r3, [r7, #28]
 8002eb2:	3301      	adds	r3, #1
 8002eb4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002ebc:	b29b      	uxth	r3, r3
 8002ebe:	3b01      	subs	r3, #1
 8002ec0:	b29a      	uxth	r2, r3
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002ece:	b29b      	uxth	r3, r3
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d1c8      	bne.n	8002e66 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	9300      	str	r3, [sp, #0]
 8002ed8:	697b      	ldr	r3, [r7, #20]
 8002eda:	2200      	movs	r2, #0
 8002edc:	2140      	movs	r1, #64	; 0x40
 8002ede:	68f8      	ldr	r0, [r7, #12]
 8002ee0:	f000 ffb6 	bl	8003e50 <UART_WaitOnFlagUntilTimeout>
 8002ee4:	4603      	mov	r3, r0
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d004      	beq.n	8002ef4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	2220      	movs	r2, #32
 8002eee:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8002ef0:	2303      	movs	r3, #3
 8002ef2:	e005      	b.n	8002f00 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	2220      	movs	r2, #32
 8002ef8:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8002efa:	2300      	movs	r3, #0
 8002efc:	e000      	b.n	8002f00 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8002efe:	2302      	movs	r3, #2
  }
}
 8002f00:	4618      	mov	r0, r3
 8002f02:	3720      	adds	r7, #32
 8002f04:	46bd      	mov	sp, r7
 8002f06:	bd80      	pop	{r7, pc}

08002f08 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b08a      	sub	sp, #40	; 0x28
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	60f8      	str	r0, [r7, #12]
 8002f10:	60b9      	str	r1, [r7, #8]
 8002f12:	4613      	mov	r3, r2
 8002f14:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002f1c:	2b20      	cmp	r3, #32
 8002f1e:	d137      	bne.n	8002f90 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f20:	68bb      	ldr	r3, [r7, #8]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d002      	beq.n	8002f2c <HAL_UART_Receive_IT+0x24>
 8002f26:	88fb      	ldrh	r3, [r7, #6]
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d101      	bne.n	8002f30 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8002f2c:	2301      	movs	r3, #1
 8002f2e:	e030      	b.n	8002f92 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	2200      	movs	r2, #0
 8002f34:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	4a18      	ldr	r2, [pc, #96]	; (8002f9c <HAL_UART_Receive_IT+0x94>)
 8002f3c:	4293      	cmp	r3, r2
 8002f3e:	d01f      	beq.n	8002f80 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	685b      	ldr	r3, [r3, #4]
 8002f46:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d018      	beq.n	8002f80 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f54:	697b      	ldr	r3, [r7, #20]
 8002f56:	e853 3f00 	ldrex	r3, [r3]
 8002f5a:	613b      	str	r3, [r7, #16]
   return(result);
 8002f5c:	693b      	ldr	r3, [r7, #16]
 8002f5e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002f62:	627b      	str	r3, [r7, #36]	; 0x24
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	461a      	mov	r2, r3
 8002f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f6c:	623b      	str	r3, [r7, #32]
 8002f6e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f70:	69f9      	ldr	r1, [r7, #28]
 8002f72:	6a3a      	ldr	r2, [r7, #32]
 8002f74:	e841 2300 	strex	r3, r2, [r1]
 8002f78:	61bb      	str	r3, [r7, #24]
   return(result);
 8002f7a:	69bb      	ldr	r3, [r7, #24]
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d1e6      	bne.n	8002f4e <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002f80:	88fb      	ldrh	r3, [r7, #6]
 8002f82:	461a      	mov	r2, r3
 8002f84:	68b9      	ldr	r1, [r7, #8]
 8002f86:	68f8      	ldr	r0, [r7, #12]
 8002f88:	f000 ffca 	bl	8003f20 <UART_Start_Receive_IT>
 8002f8c:	4603      	mov	r3, r0
 8002f8e:	e000      	b.n	8002f92 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002f90:	2302      	movs	r3, #2
  }
}
 8002f92:	4618      	mov	r0, r3
 8002f94:	3728      	adds	r7, #40	; 0x28
 8002f96:	46bd      	mov	sp, r7
 8002f98:	bd80      	pop	{r7, pc}
 8002f9a:	bf00      	nop
 8002f9c:	40008000 	.word	0x40008000

08002fa0 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b08a      	sub	sp, #40	; 0x28
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	60f8      	str	r0, [r7, #12]
 8002fa8:	60b9      	str	r1, [r7, #8]
 8002faa:	4613      	mov	r3, r2
 8002fac:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002fb4:	2b20      	cmp	r3, #32
 8002fb6:	d137      	bne.n	8003028 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8002fb8:	68bb      	ldr	r3, [r7, #8]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d002      	beq.n	8002fc4 <HAL_UART_Receive_DMA+0x24>
 8002fbe:	88fb      	ldrh	r3, [r7, #6]
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d101      	bne.n	8002fc8 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8002fc4:	2301      	movs	r3, #1
 8002fc6:	e030      	b.n	800302a <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	2200      	movs	r2, #0
 8002fcc:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	4a18      	ldr	r2, [pc, #96]	; (8003034 <HAL_UART_Receive_DMA+0x94>)
 8002fd4:	4293      	cmp	r3, r2
 8002fd6:	d01f      	beq.n	8003018 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	685b      	ldr	r3, [r3, #4]
 8002fde:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d018      	beq.n	8003018 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fec:	697b      	ldr	r3, [r7, #20]
 8002fee:	e853 3f00 	ldrex	r3, [r3]
 8002ff2:	613b      	str	r3, [r7, #16]
   return(result);
 8002ff4:	693b      	ldr	r3, [r7, #16]
 8002ff6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002ffa:	627b      	str	r3, [r7, #36]	; 0x24
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	461a      	mov	r2, r3
 8003002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003004:	623b      	str	r3, [r7, #32]
 8003006:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003008:	69f9      	ldr	r1, [r7, #28]
 800300a:	6a3a      	ldr	r2, [r7, #32]
 800300c:	e841 2300 	strex	r3, r2, [r1]
 8003010:	61bb      	str	r3, [r7, #24]
   return(result);
 8003012:	69bb      	ldr	r3, [r7, #24]
 8003014:	2b00      	cmp	r3, #0
 8003016:	d1e6      	bne.n	8002fe6 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8003018:	88fb      	ldrh	r3, [r7, #6]
 800301a:	461a      	mov	r2, r3
 800301c:	68b9      	ldr	r1, [r7, #8]
 800301e:	68f8      	ldr	r0, [r7, #12]
 8003020:	f001 f844 	bl	80040ac <UART_Start_Receive_DMA>
 8003024:	4603      	mov	r3, r0
 8003026:	e000      	b.n	800302a <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003028:	2302      	movs	r3, #2
  }
}
 800302a:	4618      	mov	r0, r3
 800302c:	3728      	adds	r7, #40	; 0x28
 800302e:	46bd      	mov	sp, r7
 8003030:	bd80      	pop	{r7, pc}
 8003032:	bf00      	nop
 8003034:	40008000 	.word	0x40008000

08003038 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	b0ba      	sub	sp, #232	; 0xe8
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	69db      	ldr	r3, [r3, #28]
 8003046:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	689b      	ldr	r3, [r3, #8]
 800305a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800305e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8003062:	f640 030f 	movw	r3, #2063	; 0x80f
 8003066:	4013      	ands	r3, r2
 8003068:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800306c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003070:	2b00      	cmp	r3, #0
 8003072:	d115      	bne.n	80030a0 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003074:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003078:	f003 0320 	and.w	r3, r3, #32
 800307c:	2b00      	cmp	r3, #0
 800307e:	d00f      	beq.n	80030a0 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003080:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003084:	f003 0320 	and.w	r3, r3, #32
 8003088:	2b00      	cmp	r3, #0
 800308a:	d009      	beq.n	80030a0 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003090:	2b00      	cmp	r3, #0
 8003092:	f000 82ae 	beq.w	80035f2 <HAL_UART_IRQHandler+0x5ba>
      {
        huart->RxISR(huart);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800309a:	6878      	ldr	r0, [r7, #4]
 800309c:	4798      	blx	r3
      }
      return;
 800309e:	e2a8      	b.n	80035f2 <HAL_UART_IRQHandler+0x5ba>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 80030a0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	f000 8117 	beq.w	80032d8 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80030aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80030ae:	f003 0301 	and.w	r3, r3, #1
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d106      	bne.n	80030c4 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80030b6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80030ba:	4b85      	ldr	r3, [pc, #532]	; (80032d0 <HAL_UART_IRQHandler+0x298>)
 80030bc:	4013      	ands	r3, r2
 80030be:	2b00      	cmp	r3, #0
 80030c0:	f000 810a 	beq.w	80032d8 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80030c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80030c8:	f003 0301 	and.w	r3, r3, #1
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d011      	beq.n	80030f4 <HAL_UART_IRQHandler+0xbc>
 80030d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80030d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d00b      	beq.n	80030f4 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	2201      	movs	r2, #1
 80030e2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80030ea:	f043 0201 	orr.w	r2, r3, #1
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80030f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80030f8:	f003 0302 	and.w	r3, r3, #2
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d011      	beq.n	8003124 <HAL_UART_IRQHandler+0xec>
 8003100:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003104:	f003 0301 	and.w	r3, r3, #1
 8003108:	2b00      	cmp	r3, #0
 800310a:	d00b      	beq.n	8003124 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	2202      	movs	r2, #2
 8003112:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800311a:	f043 0204 	orr.w	r2, r3, #4
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003124:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003128:	f003 0304 	and.w	r3, r3, #4
 800312c:	2b00      	cmp	r3, #0
 800312e:	d011      	beq.n	8003154 <HAL_UART_IRQHandler+0x11c>
 8003130:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003134:	f003 0301 	and.w	r3, r3, #1
 8003138:	2b00      	cmp	r3, #0
 800313a:	d00b      	beq.n	8003154 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	2204      	movs	r2, #4
 8003142:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800314a:	f043 0202 	orr.w	r2, r3, #2
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003154:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003158:	f003 0308 	and.w	r3, r3, #8
 800315c:	2b00      	cmp	r3, #0
 800315e:	d017      	beq.n	8003190 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003160:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003164:	f003 0320 	and.w	r3, r3, #32
 8003168:	2b00      	cmp	r3, #0
 800316a:	d105      	bne.n	8003178 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800316c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003170:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003174:	2b00      	cmp	r3, #0
 8003176:	d00b      	beq.n	8003190 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	2208      	movs	r2, #8
 800317e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003186:	f043 0208 	orr.w	r2, r3, #8
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003190:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003194:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003198:	2b00      	cmp	r3, #0
 800319a:	d012      	beq.n	80031c2 <HAL_UART_IRQHandler+0x18a>
 800319c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80031a0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d00c      	beq.n	80031c2 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80031b0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80031b8:	f043 0220 	orr.w	r2, r3, #32
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	f000 8214 	beq.w	80035f6 <HAL_UART_IRQHandler+0x5be>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80031ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80031d2:	f003 0320 	and.w	r3, r3, #32
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d00d      	beq.n	80031f6 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80031da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80031de:	f003 0320 	and.w	r3, r3, #32
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d007      	beq.n	80031f6 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d003      	beq.n	80031f6 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80031f2:	6878      	ldr	r0, [r7, #4]
 80031f4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80031fc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	689b      	ldr	r3, [r3, #8]
 8003206:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800320a:	2b40      	cmp	r3, #64	; 0x40
 800320c:	d005      	beq.n	800321a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800320e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003212:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003216:	2b00      	cmp	r3, #0
 8003218:	d04f      	beq.n	80032ba <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800321a:	6878      	ldr	r0, [r7, #4]
 800321c:	f001 f80c 	bl	8004238 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	689b      	ldr	r3, [r3, #8]
 8003226:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800322a:	2b40      	cmp	r3, #64	; 0x40
 800322c:	d141      	bne.n	80032b2 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	3308      	adds	r3, #8
 8003234:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003238:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800323c:	e853 3f00 	ldrex	r3, [r3]
 8003240:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003244:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003248:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800324c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	3308      	adds	r3, #8
 8003256:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800325a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800325e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003262:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003266:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800326a:	e841 2300 	strex	r3, r2, [r1]
 800326e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003272:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003276:	2b00      	cmp	r3, #0
 8003278:	d1d9      	bne.n	800322e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800327e:	2b00      	cmp	r3, #0
 8003280:	d013      	beq.n	80032aa <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003286:	4a13      	ldr	r2, [pc, #76]	; (80032d4 <HAL_UART_IRQHandler+0x29c>)
 8003288:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800328e:	4618      	mov	r0, r3
 8003290:	f7fd ff46 	bl	8001120 <HAL_DMA_Abort_IT>
 8003294:	4603      	mov	r3, r0
 8003296:	2b00      	cmp	r3, #0
 8003298:	d017      	beq.n	80032ca <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800329e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032a0:	687a      	ldr	r2, [r7, #4]
 80032a2:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80032a4:	4610      	mov	r0, r2
 80032a6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032a8:	e00f      	b.n	80032ca <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80032aa:	6878      	ldr	r0, [r7, #4]
 80032ac:	f000 f9b8 	bl	8003620 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032b0:	e00b      	b.n	80032ca <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80032b2:	6878      	ldr	r0, [r7, #4]
 80032b4:	f000 f9b4 	bl	8003620 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032b8:	e007      	b.n	80032ca <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80032ba:	6878      	ldr	r0, [r7, #4]
 80032bc:	f000 f9b0 	bl	8003620 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2200      	movs	r2, #0
 80032c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 80032c8:	e195      	b.n	80035f6 <HAL_UART_IRQHandler+0x5be>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032ca:	bf00      	nop
    return;
 80032cc:	e193      	b.n	80035f6 <HAL_UART_IRQHandler+0x5be>
 80032ce:	bf00      	nop
 80032d0:	04000120 	.word	0x04000120
 80032d4:	080044e9 	.word	0x080044e9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80032dc:	2b01      	cmp	r3, #1
 80032de:	f040 814e 	bne.w	800357e <HAL_UART_IRQHandler+0x546>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80032e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80032e6:	f003 0310 	and.w	r3, r3, #16
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	f000 8147 	beq.w	800357e <HAL_UART_IRQHandler+0x546>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80032f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80032f4:	f003 0310 	and.w	r3, r3, #16
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	f000 8140 	beq.w	800357e <HAL_UART_IRQHandler+0x546>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	2210      	movs	r2, #16
 8003304:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	689b      	ldr	r3, [r3, #8]
 800330c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003310:	2b40      	cmp	r3, #64	; 0x40
 8003312:	f040 80b8 	bne.w	8003486 <HAL_UART_IRQHandler+0x44e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	685b      	ldr	r3, [r3, #4]
 800331e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003322:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003326:	2b00      	cmp	r3, #0
 8003328:	f000 8167 	beq.w	80035fa <HAL_UART_IRQHandler+0x5c2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003332:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003336:	429a      	cmp	r2, r3
 8003338:	f080 815f 	bcs.w	80035fa <HAL_UART_IRQHandler+0x5c2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003342:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f003 0320 	and.w	r3, r3, #32
 8003352:	2b00      	cmp	r3, #0
 8003354:	f040 8086 	bne.w	8003464 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003360:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003364:	e853 3f00 	ldrex	r3, [r3]
 8003368:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800336c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003370:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003374:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	461a      	mov	r2, r3
 800337e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003382:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003386:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800338a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800338e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003392:	e841 2300 	strex	r3, r2, [r1]
 8003396:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800339a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d1da      	bne.n	8003358 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	3308      	adds	r3, #8
 80033a8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033aa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80033ac:	e853 3f00 	ldrex	r3, [r3]
 80033b0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80033b2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80033b4:	f023 0301 	bic.w	r3, r3, #1
 80033b8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	3308      	adds	r3, #8
 80033c2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80033c6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80033ca:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033cc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80033ce:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80033d2:	e841 2300 	strex	r3, r2, [r1]
 80033d6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80033d8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d1e1      	bne.n	80033a2 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	3308      	adds	r3, #8
 80033e4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033e6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80033e8:	e853 3f00 	ldrex	r3, [r3]
 80033ec:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80033ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80033f0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80033f4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	3308      	adds	r3, #8
 80033fe:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003402:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003404:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003406:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003408:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800340a:	e841 2300 	strex	r3, r2, [r1]
 800340e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003410:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003412:	2b00      	cmp	r3, #0
 8003414:	d1e3      	bne.n	80033de <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2220      	movs	r2, #32
 800341a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2200      	movs	r2, #0
 8003422:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800342a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800342c:	e853 3f00 	ldrex	r3, [r3]
 8003430:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003432:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003434:	f023 0310 	bic.w	r3, r3, #16
 8003438:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	461a      	mov	r2, r3
 8003442:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003446:	65bb      	str	r3, [r7, #88]	; 0x58
 8003448:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800344a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800344c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800344e:	e841 2300 	strex	r3, r2, [r1]
 8003452:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003454:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003456:	2b00      	cmp	r3, #0
 8003458:	d1e4      	bne.n	8003424 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800345e:	4618      	mov	r0, r3
 8003460:	f7fd fe20 	bl	80010a4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2202      	movs	r2, #2
 8003468:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003476:	b29b      	uxth	r3, r3
 8003478:	1ad3      	subs	r3, r2, r3
 800347a:	b29b      	uxth	r3, r3
 800347c:	4619      	mov	r1, r3
 800347e:	6878      	ldr	r0, [r7, #4]
 8003480:	f000 f8d8 	bl	8003634 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003484:	e0b9      	b.n	80035fa <HAL_UART_IRQHandler+0x5c2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003492:	b29b      	uxth	r3, r3
 8003494:	1ad3      	subs	r3, r2, r3
 8003496:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80034a0:	b29b      	uxth	r3, r3
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	f000 80ab 	beq.w	80035fe <HAL_UART_IRQHandler+0x5c6>
          && (nb_rx_data > 0U))
 80034a8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	f000 80a6 	beq.w	80035fe <HAL_UART_IRQHandler+0x5c6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034ba:	e853 3f00 	ldrex	r3, [r3]
 80034be:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80034c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034c2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80034c6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	461a      	mov	r2, r3
 80034d0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80034d4:	647b      	str	r3, [r7, #68]	; 0x44
 80034d6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034d8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80034da:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80034dc:	e841 2300 	strex	r3, r2, [r1]
 80034e0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80034e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d1e4      	bne.n	80034b2 <HAL_UART_IRQHandler+0x47a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	3308      	adds	r3, #8
 80034ee:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034f2:	e853 3f00 	ldrex	r3, [r3]
 80034f6:	623b      	str	r3, [r7, #32]
   return(result);
 80034f8:	6a3b      	ldr	r3, [r7, #32]
 80034fa:	f023 0301 	bic.w	r3, r3, #1
 80034fe:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	3308      	adds	r3, #8
 8003508:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800350c:	633a      	str	r2, [r7, #48]	; 0x30
 800350e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003510:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003512:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003514:	e841 2300 	strex	r3, r2, [r1]
 8003518:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800351a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800351c:	2b00      	cmp	r3, #0
 800351e:	d1e3      	bne.n	80034e8 <HAL_UART_IRQHandler+0x4b0>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2220      	movs	r2, #32
 8003524:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2200      	movs	r2, #0
 800352c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	2200      	movs	r2, #0
 8003532:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800353a:	693b      	ldr	r3, [r7, #16]
 800353c:	e853 3f00 	ldrex	r3, [r3]
 8003540:	60fb      	str	r3, [r7, #12]
   return(result);
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	f023 0310 	bic.w	r3, r3, #16
 8003548:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	461a      	mov	r2, r3
 8003552:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003556:	61fb      	str	r3, [r7, #28]
 8003558:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800355a:	69b9      	ldr	r1, [r7, #24]
 800355c:	69fa      	ldr	r2, [r7, #28]
 800355e:	e841 2300 	strex	r3, r2, [r1]
 8003562:	617b      	str	r3, [r7, #20]
   return(result);
 8003564:	697b      	ldr	r3, [r7, #20]
 8003566:	2b00      	cmp	r3, #0
 8003568:	d1e4      	bne.n	8003534 <HAL_UART_IRQHandler+0x4fc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	2202      	movs	r2, #2
 800356e:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003570:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003574:	4619      	mov	r1, r3
 8003576:	6878      	ldr	r0, [r7, #4]
 8003578:	f000 f85c 	bl	8003634 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800357c:	e03f      	b.n	80035fe <HAL_UART_IRQHandler+0x5c6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800357e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003582:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003586:	2b00      	cmp	r3, #0
 8003588:	d00e      	beq.n	80035a8 <HAL_UART_IRQHandler+0x570>
 800358a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800358e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003592:	2b00      	cmp	r3, #0
 8003594:	d008      	beq.n	80035a8 <HAL_UART_IRQHandler+0x570>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800359e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80035a0:	6878      	ldr	r0, [r7, #4]
 80035a2:	f001 f99d 	bl	80048e0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80035a6:	e02d      	b.n	8003604 <HAL_UART_IRQHandler+0x5cc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 80035a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80035ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d00e      	beq.n	80035d2 <HAL_UART_IRQHandler+0x59a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80035b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80035b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d008      	beq.n	80035d2 <HAL_UART_IRQHandler+0x59a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d01c      	beq.n	8003602 <HAL_UART_IRQHandler+0x5ca>
    {
      huart->TxISR(huart);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80035cc:	6878      	ldr	r0, [r7, #4]
 80035ce:	4798      	blx	r3
    }
    return;
 80035d0:	e017      	b.n	8003602 <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80035d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80035d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d012      	beq.n	8003604 <HAL_UART_IRQHandler+0x5cc>
 80035de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80035e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d00c      	beq.n	8003604 <HAL_UART_IRQHandler+0x5cc>
  {
    UART_EndTransmit_IT(huart);
 80035ea:	6878      	ldr	r0, [r7, #4]
 80035ec:	f000 ff92 	bl	8004514 <UART_EndTransmit_IT>
    return;
 80035f0:	e008      	b.n	8003604 <HAL_UART_IRQHandler+0x5cc>
      return;
 80035f2:	bf00      	nop
 80035f4:	e006      	b.n	8003604 <HAL_UART_IRQHandler+0x5cc>
    return;
 80035f6:	bf00      	nop
 80035f8:	e004      	b.n	8003604 <HAL_UART_IRQHandler+0x5cc>
      return;
 80035fa:	bf00      	nop
 80035fc:	e002      	b.n	8003604 <HAL_UART_IRQHandler+0x5cc>
      return;
 80035fe:	bf00      	nop
 8003600:	e000      	b.n	8003604 <HAL_UART_IRQHandler+0x5cc>
    return;
 8003602:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8003604:	37e8      	adds	r7, #232	; 0xe8
 8003606:	46bd      	mov	sp, r7
 8003608:	bd80      	pop	{r7, pc}
 800360a:	bf00      	nop

0800360c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800360c:	b480      	push	{r7}
 800360e:	b083      	sub	sp, #12
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003614:	bf00      	nop
 8003616:	370c      	adds	r7, #12
 8003618:	46bd      	mov	sp, r7
 800361a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361e:	4770      	bx	lr

08003620 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003620:	b480      	push	{r7}
 8003622:	b083      	sub	sp, #12
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003628:	bf00      	nop
 800362a:	370c      	adds	r7, #12
 800362c:	46bd      	mov	sp, r7
 800362e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003632:	4770      	bx	lr

08003634 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003634:	b480      	push	{r7}
 8003636:	b083      	sub	sp, #12
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
 800363c:	460b      	mov	r3, r1
 800363e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003640:	bf00      	nop
 8003642:	370c      	adds	r7, #12
 8003644:	46bd      	mov	sp, r7
 8003646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364a:	4770      	bx	lr

0800364c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800364c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003650:	b08a      	sub	sp, #40	; 0x28
 8003652:	af00      	add	r7, sp, #0
 8003654:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003656:	2300      	movs	r3, #0
 8003658:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	689a      	ldr	r2, [r3, #8]
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	691b      	ldr	r3, [r3, #16]
 8003664:	431a      	orrs	r2, r3
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	695b      	ldr	r3, [r3, #20]
 800366a:	431a      	orrs	r2, r3
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	69db      	ldr	r3, [r3, #28]
 8003670:	4313      	orrs	r3, r2
 8003672:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	681a      	ldr	r2, [r3, #0]
 800367a:	4ba4      	ldr	r3, [pc, #656]	; (800390c <UART_SetConfig+0x2c0>)
 800367c:	4013      	ands	r3, r2
 800367e:	68fa      	ldr	r2, [r7, #12]
 8003680:	6812      	ldr	r2, [r2, #0]
 8003682:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003684:	430b      	orrs	r3, r1
 8003686:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	685b      	ldr	r3, [r3, #4]
 800368e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	68da      	ldr	r2, [r3, #12]
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	430a      	orrs	r2, r1
 800369c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	699b      	ldr	r3, [r3, #24]
 80036a2:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	4a99      	ldr	r2, [pc, #612]	; (8003910 <UART_SetConfig+0x2c4>)
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d004      	beq.n	80036b8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	6a1b      	ldr	r3, [r3, #32]
 80036b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036b4:	4313      	orrs	r3, r2
 80036b6:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	689b      	ldr	r3, [r3, #8]
 80036be:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036c8:	430a      	orrs	r2, r1
 80036ca:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	4a90      	ldr	r2, [pc, #576]	; (8003914 <UART_SetConfig+0x2c8>)
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d126      	bne.n	8003724 <UART_SetConfig+0xd8>
 80036d6:	4b90      	ldr	r3, [pc, #576]	; (8003918 <UART_SetConfig+0x2cc>)
 80036d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036dc:	f003 0303 	and.w	r3, r3, #3
 80036e0:	2b03      	cmp	r3, #3
 80036e2:	d81b      	bhi.n	800371c <UART_SetConfig+0xd0>
 80036e4:	a201      	add	r2, pc, #4	; (adr r2, 80036ec <UART_SetConfig+0xa0>)
 80036e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036ea:	bf00      	nop
 80036ec:	080036fd 	.word	0x080036fd
 80036f0:	0800370d 	.word	0x0800370d
 80036f4:	08003705 	.word	0x08003705
 80036f8:	08003715 	.word	0x08003715
 80036fc:	2301      	movs	r3, #1
 80036fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003702:	e116      	b.n	8003932 <UART_SetConfig+0x2e6>
 8003704:	2302      	movs	r3, #2
 8003706:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800370a:	e112      	b.n	8003932 <UART_SetConfig+0x2e6>
 800370c:	2304      	movs	r3, #4
 800370e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003712:	e10e      	b.n	8003932 <UART_SetConfig+0x2e6>
 8003714:	2308      	movs	r3, #8
 8003716:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800371a:	e10a      	b.n	8003932 <UART_SetConfig+0x2e6>
 800371c:	2310      	movs	r3, #16
 800371e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003722:	e106      	b.n	8003932 <UART_SetConfig+0x2e6>
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	4a7c      	ldr	r2, [pc, #496]	; (800391c <UART_SetConfig+0x2d0>)
 800372a:	4293      	cmp	r3, r2
 800372c:	d138      	bne.n	80037a0 <UART_SetConfig+0x154>
 800372e:	4b7a      	ldr	r3, [pc, #488]	; (8003918 <UART_SetConfig+0x2cc>)
 8003730:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003734:	f003 030c 	and.w	r3, r3, #12
 8003738:	2b0c      	cmp	r3, #12
 800373a:	d82d      	bhi.n	8003798 <UART_SetConfig+0x14c>
 800373c:	a201      	add	r2, pc, #4	; (adr r2, 8003744 <UART_SetConfig+0xf8>)
 800373e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003742:	bf00      	nop
 8003744:	08003779 	.word	0x08003779
 8003748:	08003799 	.word	0x08003799
 800374c:	08003799 	.word	0x08003799
 8003750:	08003799 	.word	0x08003799
 8003754:	08003789 	.word	0x08003789
 8003758:	08003799 	.word	0x08003799
 800375c:	08003799 	.word	0x08003799
 8003760:	08003799 	.word	0x08003799
 8003764:	08003781 	.word	0x08003781
 8003768:	08003799 	.word	0x08003799
 800376c:	08003799 	.word	0x08003799
 8003770:	08003799 	.word	0x08003799
 8003774:	08003791 	.word	0x08003791
 8003778:	2300      	movs	r3, #0
 800377a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800377e:	e0d8      	b.n	8003932 <UART_SetConfig+0x2e6>
 8003780:	2302      	movs	r3, #2
 8003782:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003786:	e0d4      	b.n	8003932 <UART_SetConfig+0x2e6>
 8003788:	2304      	movs	r3, #4
 800378a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800378e:	e0d0      	b.n	8003932 <UART_SetConfig+0x2e6>
 8003790:	2308      	movs	r3, #8
 8003792:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003796:	e0cc      	b.n	8003932 <UART_SetConfig+0x2e6>
 8003798:	2310      	movs	r3, #16
 800379a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800379e:	e0c8      	b.n	8003932 <UART_SetConfig+0x2e6>
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	4a5e      	ldr	r2, [pc, #376]	; (8003920 <UART_SetConfig+0x2d4>)
 80037a6:	4293      	cmp	r3, r2
 80037a8:	d125      	bne.n	80037f6 <UART_SetConfig+0x1aa>
 80037aa:	4b5b      	ldr	r3, [pc, #364]	; (8003918 <UART_SetConfig+0x2cc>)
 80037ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037b0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80037b4:	2b30      	cmp	r3, #48	; 0x30
 80037b6:	d016      	beq.n	80037e6 <UART_SetConfig+0x19a>
 80037b8:	2b30      	cmp	r3, #48	; 0x30
 80037ba:	d818      	bhi.n	80037ee <UART_SetConfig+0x1a2>
 80037bc:	2b20      	cmp	r3, #32
 80037be:	d00a      	beq.n	80037d6 <UART_SetConfig+0x18a>
 80037c0:	2b20      	cmp	r3, #32
 80037c2:	d814      	bhi.n	80037ee <UART_SetConfig+0x1a2>
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d002      	beq.n	80037ce <UART_SetConfig+0x182>
 80037c8:	2b10      	cmp	r3, #16
 80037ca:	d008      	beq.n	80037de <UART_SetConfig+0x192>
 80037cc:	e00f      	b.n	80037ee <UART_SetConfig+0x1a2>
 80037ce:	2300      	movs	r3, #0
 80037d0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80037d4:	e0ad      	b.n	8003932 <UART_SetConfig+0x2e6>
 80037d6:	2302      	movs	r3, #2
 80037d8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80037dc:	e0a9      	b.n	8003932 <UART_SetConfig+0x2e6>
 80037de:	2304      	movs	r3, #4
 80037e0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80037e4:	e0a5      	b.n	8003932 <UART_SetConfig+0x2e6>
 80037e6:	2308      	movs	r3, #8
 80037e8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80037ec:	e0a1      	b.n	8003932 <UART_SetConfig+0x2e6>
 80037ee:	2310      	movs	r3, #16
 80037f0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80037f4:	e09d      	b.n	8003932 <UART_SetConfig+0x2e6>
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	4a4a      	ldr	r2, [pc, #296]	; (8003924 <UART_SetConfig+0x2d8>)
 80037fc:	4293      	cmp	r3, r2
 80037fe:	d125      	bne.n	800384c <UART_SetConfig+0x200>
 8003800:	4b45      	ldr	r3, [pc, #276]	; (8003918 <UART_SetConfig+0x2cc>)
 8003802:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003806:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800380a:	2bc0      	cmp	r3, #192	; 0xc0
 800380c:	d016      	beq.n	800383c <UART_SetConfig+0x1f0>
 800380e:	2bc0      	cmp	r3, #192	; 0xc0
 8003810:	d818      	bhi.n	8003844 <UART_SetConfig+0x1f8>
 8003812:	2b80      	cmp	r3, #128	; 0x80
 8003814:	d00a      	beq.n	800382c <UART_SetConfig+0x1e0>
 8003816:	2b80      	cmp	r3, #128	; 0x80
 8003818:	d814      	bhi.n	8003844 <UART_SetConfig+0x1f8>
 800381a:	2b00      	cmp	r3, #0
 800381c:	d002      	beq.n	8003824 <UART_SetConfig+0x1d8>
 800381e:	2b40      	cmp	r3, #64	; 0x40
 8003820:	d008      	beq.n	8003834 <UART_SetConfig+0x1e8>
 8003822:	e00f      	b.n	8003844 <UART_SetConfig+0x1f8>
 8003824:	2300      	movs	r3, #0
 8003826:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800382a:	e082      	b.n	8003932 <UART_SetConfig+0x2e6>
 800382c:	2302      	movs	r3, #2
 800382e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003832:	e07e      	b.n	8003932 <UART_SetConfig+0x2e6>
 8003834:	2304      	movs	r3, #4
 8003836:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800383a:	e07a      	b.n	8003932 <UART_SetConfig+0x2e6>
 800383c:	2308      	movs	r3, #8
 800383e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003842:	e076      	b.n	8003932 <UART_SetConfig+0x2e6>
 8003844:	2310      	movs	r3, #16
 8003846:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800384a:	e072      	b.n	8003932 <UART_SetConfig+0x2e6>
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	4a35      	ldr	r2, [pc, #212]	; (8003928 <UART_SetConfig+0x2dc>)
 8003852:	4293      	cmp	r3, r2
 8003854:	d12a      	bne.n	80038ac <UART_SetConfig+0x260>
 8003856:	4b30      	ldr	r3, [pc, #192]	; (8003918 <UART_SetConfig+0x2cc>)
 8003858:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800385c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003860:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003864:	d01a      	beq.n	800389c <UART_SetConfig+0x250>
 8003866:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800386a:	d81b      	bhi.n	80038a4 <UART_SetConfig+0x258>
 800386c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003870:	d00c      	beq.n	800388c <UART_SetConfig+0x240>
 8003872:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003876:	d815      	bhi.n	80038a4 <UART_SetConfig+0x258>
 8003878:	2b00      	cmp	r3, #0
 800387a:	d003      	beq.n	8003884 <UART_SetConfig+0x238>
 800387c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003880:	d008      	beq.n	8003894 <UART_SetConfig+0x248>
 8003882:	e00f      	b.n	80038a4 <UART_SetConfig+0x258>
 8003884:	2300      	movs	r3, #0
 8003886:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800388a:	e052      	b.n	8003932 <UART_SetConfig+0x2e6>
 800388c:	2302      	movs	r3, #2
 800388e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003892:	e04e      	b.n	8003932 <UART_SetConfig+0x2e6>
 8003894:	2304      	movs	r3, #4
 8003896:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800389a:	e04a      	b.n	8003932 <UART_SetConfig+0x2e6>
 800389c:	2308      	movs	r3, #8
 800389e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80038a2:	e046      	b.n	8003932 <UART_SetConfig+0x2e6>
 80038a4:	2310      	movs	r3, #16
 80038a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80038aa:	e042      	b.n	8003932 <UART_SetConfig+0x2e6>
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	4a17      	ldr	r2, [pc, #92]	; (8003910 <UART_SetConfig+0x2c4>)
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d13a      	bne.n	800392c <UART_SetConfig+0x2e0>
 80038b6:	4b18      	ldr	r3, [pc, #96]	; (8003918 <UART_SetConfig+0x2cc>)
 80038b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038bc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80038c0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80038c4:	d01a      	beq.n	80038fc <UART_SetConfig+0x2b0>
 80038c6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80038ca:	d81b      	bhi.n	8003904 <UART_SetConfig+0x2b8>
 80038cc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80038d0:	d00c      	beq.n	80038ec <UART_SetConfig+0x2a0>
 80038d2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80038d6:	d815      	bhi.n	8003904 <UART_SetConfig+0x2b8>
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d003      	beq.n	80038e4 <UART_SetConfig+0x298>
 80038dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038e0:	d008      	beq.n	80038f4 <UART_SetConfig+0x2a8>
 80038e2:	e00f      	b.n	8003904 <UART_SetConfig+0x2b8>
 80038e4:	2300      	movs	r3, #0
 80038e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80038ea:	e022      	b.n	8003932 <UART_SetConfig+0x2e6>
 80038ec:	2302      	movs	r3, #2
 80038ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80038f2:	e01e      	b.n	8003932 <UART_SetConfig+0x2e6>
 80038f4:	2304      	movs	r3, #4
 80038f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80038fa:	e01a      	b.n	8003932 <UART_SetConfig+0x2e6>
 80038fc:	2308      	movs	r3, #8
 80038fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003902:	e016      	b.n	8003932 <UART_SetConfig+0x2e6>
 8003904:	2310      	movs	r3, #16
 8003906:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800390a:	e012      	b.n	8003932 <UART_SetConfig+0x2e6>
 800390c:	efff69f3 	.word	0xefff69f3
 8003910:	40008000 	.word	0x40008000
 8003914:	40013800 	.word	0x40013800
 8003918:	40021000 	.word	0x40021000
 800391c:	40004400 	.word	0x40004400
 8003920:	40004800 	.word	0x40004800
 8003924:	40004c00 	.word	0x40004c00
 8003928:	40005000 	.word	0x40005000
 800392c:	2310      	movs	r3, #16
 800392e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	4a9f      	ldr	r2, [pc, #636]	; (8003bb4 <UART_SetConfig+0x568>)
 8003938:	4293      	cmp	r3, r2
 800393a:	d17a      	bne.n	8003a32 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800393c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003940:	2b08      	cmp	r3, #8
 8003942:	d824      	bhi.n	800398e <UART_SetConfig+0x342>
 8003944:	a201      	add	r2, pc, #4	; (adr r2, 800394c <UART_SetConfig+0x300>)
 8003946:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800394a:	bf00      	nop
 800394c:	08003971 	.word	0x08003971
 8003950:	0800398f 	.word	0x0800398f
 8003954:	08003979 	.word	0x08003979
 8003958:	0800398f 	.word	0x0800398f
 800395c:	0800397f 	.word	0x0800397f
 8003960:	0800398f 	.word	0x0800398f
 8003964:	0800398f 	.word	0x0800398f
 8003968:	0800398f 	.word	0x0800398f
 800396c:	08003987 	.word	0x08003987
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003970:	f7fe fcaa 	bl	80022c8 <HAL_RCC_GetPCLK1Freq>
 8003974:	61f8      	str	r0, [r7, #28]
        break;
 8003976:	e010      	b.n	800399a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003978:	4b8f      	ldr	r3, [pc, #572]	; (8003bb8 <UART_SetConfig+0x56c>)
 800397a:	61fb      	str	r3, [r7, #28]
        break;
 800397c:	e00d      	b.n	800399a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800397e:	f7fe fc0b 	bl	8002198 <HAL_RCC_GetSysClockFreq>
 8003982:	61f8      	str	r0, [r7, #28]
        break;
 8003984:	e009      	b.n	800399a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003986:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800398a:	61fb      	str	r3, [r7, #28]
        break;
 800398c:	e005      	b.n	800399a <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800398e:	2300      	movs	r3, #0
 8003990:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003992:	2301      	movs	r3, #1
 8003994:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003998:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800399a:	69fb      	ldr	r3, [r7, #28]
 800399c:	2b00      	cmp	r3, #0
 800399e:	f000 80fb 	beq.w	8003b98 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	685a      	ldr	r2, [r3, #4]
 80039a6:	4613      	mov	r3, r2
 80039a8:	005b      	lsls	r3, r3, #1
 80039aa:	4413      	add	r3, r2
 80039ac:	69fa      	ldr	r2, [r7, #28]
 80039ae:	429a      	cmp	r2, r3
 80039b0:	d305      	bcc.n	80039be <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	685b      	ldr	r3, [r3, #4]
 80039b6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80039b8:	69fa      	ldr	r2, [r7, #28]
 80039ba:	429a      	cmp	r2, r3
 80039bc:	d903      	bls.n	80039c6 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80039be:	2301      	movs	r3, #1
 80039c0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80039c4:	e0e8      	b.n	8003b98 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80039c6:	69fb      	ldr	r3, [r7, #28]
 80039c8:	2200      	movs	r2, #0
 80039ca:	461c      	mov	r4, r3
 80039cc:	4615      	mov	r5, r2
 80039ce:	f04f 0200 	mov.w	r2, #0
 80039d2:	f04f 0300 	mov.w	r3, #0
 80039d6:	022b      	lsls	r3, r5, #8
 80039d8:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80039dc:	0222      	lsls	r2, r4, #8
 80039de:	68f9      	ldr	r1, [r7, #12]
 80039e0:	6849      	ldr	r1, [r1, #4]
 80039e2:	0849      	lsrs	r1, r1, #1
 80039e4:	2000      	movs	r0, #0
 80039e6:	4688      	mov	r8, r1
 80039e8:	4681      	mov	r9, r0
 80039ea:	eb12 0a08 	adds.w	sl, r2, r8
 80039ee:	eb43 0b09 	adc.w	fp, r3, r9
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	685b      	ldr	r3, [r3, #4]
 80039f6:	2200      	movs	r2, #0
 80039f8:	603b      	str	r3, [r7, #0]
 80039fa:	607a      	str	r2, [r7, #4]
 80039fc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003a00:	4650      	mov	r0, sl
 8003a02:	4659      	mov	r1, fp
 8003a04:	f7fc fc34 	bl	8000270 <__aeabi_uldivmod>
 8003a08:	4602      	mov	r2, r0
 8003a0a:	460b      	mov	r3, r1
 8003a0c:	4613      	mov	r3, r2
 8003a0e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003a10:	69bb      	ldr	r3, [r7, #24]
 8003a12:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003a16:	d308      	bcc.n	8003a2a <UART_SetConfig+0x3de>
 8003a18:	69bb      	ldr	r3, [r7, #24]
 8003a1a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003a1e:	d204      	bcs.n	8003a2a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	69ba      	ldr	r2, [r7, #24]
 8003a26:	60da      	str	r2, [r3, #12]
 8003a28:	e0b6      	b.n	8003b98 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003a30:	e0b2      	b.n	8003b98 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	69db      	ldr	r3, [r3, #28]
 8003a36:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a3a:	d15e      	bne.n	8003afa <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8003a3c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003a40:	2b08      	cmp	r3, #8
 8003a42:	d828      	bhi.n	8003a96 <UART_SetConfig+0x44a>
 8003a44:	a201      	add	r2, pc, #4	; (adr r2, 8003a4c <UART_SetConfig+0x400>)
 8003a46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a4a:	bf00      	nop
 8003a4c:	08003a71 	.word	0x08003a71
 8003a50:	08003a79 	.word	0x08003a79
 8003a54:	08003a81 	.word	0x08003a81
 8003a58:	08003a97 	.word	0x08003a97
 8003a5c:	08003a87 	.word	0x08003a87
 8003a60:	08003a97 	.word	0x08003a97
 8003a64:	08003a97 	.word	0x08003a97
 8003a68:	08003a97 	.word	0x08003a97
 8003a6c:	08003a8f 	.word	0x08003a8f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003a70:	f7fe fc2a 	bl	80022c8 <HAL_RCC_GetPCLK1Freq>
 8003a74:	61f8      	str	r0, [r7, #28]
        break;
 8003a76:	e014      	b.n	8003aa2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003a78:	f7fe fc3c 	bl	80022f4 <HAL_RCC_GetPCLK2Freq>
 8003a7c:	61f8      	str	r0, [r7, #28]
        break;
 8003a7e:	e010      	b.n	8003aa2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003a80:	4b4d      	ldr	r3, [pc, #308]	; (8003bb8 <UART_SetConfig+0x56c>)
 8003a82:	61fb      	str	r3, [r7, #28]
        break;
 8003a84:	e00d      	b.n	8003aa2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003a86:	f7fe fb87 	bl	8002198 <HAL_RCC_GetSysClockFreq>
 8003a8a:	61f8      	str	r0, [r7, #28]
        break;
 8003a8c:	e009      	b.n	8003aa2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003a8e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003a92:	61fb      	str	r3, [r7, #28]
        break;
 8003a94:	e005      	b.n	8003aa2 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8003a96:	2300      	movs	r3, #0
 8003a98:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003a9a:	2301      	movs	r3, #1
 8003a9c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003aa0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003aa2:	69fb      	ldr	r3, [r7, #28]
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d077      	beq.n	8003b98 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003aa8:	69fb      	ldr	r3, [r7, #28]
 8003aaa:	005a      	lsls	r2, r3, #1
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	685b      	ldr	r3, [r3, #4]
 8003ab0:	085b      	lsrs	r3, r3, #1
 8003ab2:	441a      	add	r2, r3
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	685b      	ldr	r3, [r3, #4]
 8003ab8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003abc:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003abe:	69bb      	ldr	r3, [r7, #24]
 8003ac0:	2b0f      	cmp	r3, #15
 8003ac2:	d916      	bls.n	8003af2 <UART_SetConfig+0x4a6>
 8003ac4:	69bb      	ldr	r3, [r7, #24]
 8003ac6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003aca:	d212      	bcs.n	8003af2 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003acc:	69bb      	ldr	r3, [r7, #24]
 8003ace:	b29b      	uxth	r3, r3
 8003ad0:	f023 030f 	bic.w	r3, r3, #15
 8003ad4:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003ad6:	69bb      	ldr	r3, [r7, #24]
 8003ad8:	085b      	lsrs	r3, r3, #1
 8003ada:	b29b      	uxth	r3, r3
 8003adc:	f003 0307 	and.w	r3, r3, #7
 8003ae0:	b29a      	uxth	r2, r3
 8003ae2:	8afb      	ldrh	r3, [r7, #22]
 8003ae4:	4313      	orrs	r3, r2
 8003ae6:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	8afa      	ldrh	r2, [r7, #22]
 8003aee:	60da      	str	r2, [r3, #12]
 8003af0:	e052      	b.n	8003b98 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003af2:	2301      	movs	r3, #1
 8003af4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003af8:	e04e      	b.n	8003b98 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003afa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003afe:	2b08      	cmp	r3, #8
 8003b00:	d827      	bhi.n	8003b52 <UART_SetConfig+0x506>
 8003b02:	a201      	add	r2, pc, #4	; (adr r2, 8003b08 <UART_SetConfig+0x4bc>)
 8003b04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b08:	08003b2d 	.word	0x08003b2d
 8003b0c:	08003b35 	.word	0x08003b35
 8003b10:	08003b3d 	.word	0x08003b3d
 8003b14:	08003b53 	.word	0x08003b53
 8003b18:	08003b43 	.word	0x08003b43
 8003b1c:	08003b53 	.word	0x08003b53
 8003b20:	08003b53 	.word	0x08003b53
 8003b24:	08003b53 	.word	0x08003b53
 8003b28:	08003b4b 	.word	0x08003b4b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003b2c:	f7fe fbcc 	bl	80022c8 <HAL_RCC_GetPCLK1Freq>
 8003b30:	61f8      	str	r0, [r7, #28]
        break;
 8003b32:	e014      	b.n	8003b5e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003b34:	f7fe fbde 	bl	80022f4 <HAL_RCC_GetPCLK2Freq>
 8003b38:	61f8      	str	r0, [r7, #28]
        break;
 8003b3a:	e010      	b.n	8003b5e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003b3c:	4b1e      	ldr	r3, [pc, #120]	; (8003bb8 <UART_SetConfig+0x56c>)
 8003b3e:	61fb      	str	r3, [r7, #28]
        break;
 8003b40:	e00d      	b.n	8003b5e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003b42:	f7fe fb29 	bl	8002198 <HAL_RCC_GetSysClockFreq>
 8003b46:	61f8      	str	r0, [r7, #28]
        break;
 8003b48:	e009      	b.n	8003b5e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003b4a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003b4e:	61fb      	str	r3, [r7, #28]
        break;
 8003b50:	e005      	b.n	8003b5e <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8003b52:	2300      	movs	r3, #0
 8003b54:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003b56:	2301      	movs	r3, #1
 8003b58:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003b5c:	bf00      	nop
    }

    if (pclk != 0U)
 8003b5e:	69fb      	ldr	r3, [r7, #28]
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d019      	beq.n	8003b98 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	685b      	ldr	r3, [r3, #4]
 8003b68:	085a      	lsrs	r2, r3, #1
 8003b6a:	69fb      	ldr	r3, [r7, #28]
 8003b6c:	441a      	add	r2, r3
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	685b      	ldr	r3, [r3, #4]
 8003b72:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b76:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003b78:	69bb      	ldr	r3, [r7, #24]
 8003b7a:	2b0f      	cmp	r3, #15
 8003b7c:	d909      	bls.n	8003b92 <UART_SetConfig+0x546>
 8003b7e:	69bb      	ldr	r3, [r7, #24]
 8003b80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b84:	d205      	bcs.n	8003b92 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003b86:	69bb      	ldr	r3, [r7, #24]
 8003b88:	b29a      	uxth	r2, r3
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	60da      	str	r2, [r3, #12]
 8003b90:	e002      	b.n	8003b98 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003b92:	2301      	movs	r3, #1
 8003b94:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8003ba4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8003ba8:	4618      	mov	r0, r3
 8003baa:	3728      	adds	r7, #40	; 0x28
 8003bac:	46bd      	mov	sp, r7
 8003bae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003bb2:	bf00      	nop
 8003bb4:	40008000 	.word	0x40008000
 8003bb8:	00f42400 	.word	0x00f42400

08003bbc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003bbc:	b480      	push	{r7}
 8003bbe:	b083      	sub	sp, #12
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bc8:	f003 0308 	and.w	r3, r3, #8
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d00a      	beq.n	8003be6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	685b      	ldr	r3, [r3, #4]
 8003bd6:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	430a      	orrs	r2, r1
 8003be4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bea:	f003 0301 	and.w	r3, r3, #1
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d00a      	beq.n	8003c08 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	685b      	ldr	r3, [r3, #4]
 8003bf8:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	430a      	orrs	r2, r1
 8003c06:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c0c:	f003 0302 	and.w	r3, r3, #2
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d00a      	beq.n	8003c2a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	685b      	ldr	r3, [r3, #4]
 8003c1a:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	430a      	orrs	r2, r1
 8003c28:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c2e:	f003 0304 	and.w	r3, r3, #4
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d00a      	beq.n	8003c4c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	685b      	ldr	r3, [r3, #4]
 8003c3c:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	430a      	orrs	r2, r1
 8003c4a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c50:	f003 0310 	and.w	r3, r3, #16
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d00a      	beq.n	8003c6e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	689b      	ldr	r3, [r3, #8]
 8003c5e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	430a      	orrs	r2, r1
 8003c6c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c72:	f003 0320 	and.w	r3, r3, #32
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d00a      	beq.n	8003c90 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	689b      	ldr	r3, [r3, #8]
 8003c80:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	430a      	orrs	r2, r1
 8003c8e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d01a      	beq.n	8003cd2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	685b      	ldr	r3, [r3, #4]
 8003ca2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	430a      	orrs	r2, r1
 8003cb0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cb6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003cba:	d10a      	bne.n	8003cd2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	685b      	ldr	r3, [r3, #4]
 8003cc2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	430a      	orrs	r2, r1
 8003cd0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d00a      	beq.n	8003cf4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	685b      	ldr	r3, [r3, #4]
 8003ce4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	430a      	orrs	r2, r1
 8003cf2:	605a      	str	r2, [r3, #4]
  }
}
 8003cf4:	bf00      	nop
 8003cf6:	370c      	adds	r7, #12
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfe:	4770      	bx	lr

08003d00 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b098      	sub	sp, #96	; 0x60
 8003d04:	af02      	add	r7, sp, #8
 8003d06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003d10:	f7fc ff92 	bl	8000c38 <HAL_GetTick>
 8003d14:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f003 0308 	and.w	r3, r3, #8
 8003d20:	2b08      	cmp	r3, #8
 8003d22:	d12e      	bne.n	8003d82 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003d24:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003d28:	9300      	str	r3, [sp, #0]
 8003d2a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003d32:	6878      	ldr	r0, [r7, #4]
 8003d34:	f000 f88c 	bl	8003e50 <UART_WaitOnFlagUntilTimeout>
 8003d38:	4603      	mov	r3, r0
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d021      	beq.n	8003d82 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d46:	e853 3f00 	ldrex	r3, [r3]
 8003d4a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003d4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d4e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003d52:	653b      	str	r3, [r7, #80]	; 0x50
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	461a      	mov	r2, r3
 8003d5a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003d5c:	647b      	str	r3, [r7, #68]	; 0x44
 8003d5e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d60:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003d62:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003d64:	e841 2300 	strex	r3, r2, [r1]
 8003d68:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003d6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d1e6      	bne.n	8003d3e <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2220      	movs	r2, #32
 8003d74:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	2200      	movs	r2, #0
 8003d7a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003d7e:	2303      	movs	r3, #3
 8003d80:	e062      	b.n	8003e48 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f003 0304 	and.w	r3, r3, #4
 8003d8c:	2b04      	cmp	r3, #4
 8003d8e:	d149      	bne.n	8003e24 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003d90:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003d94:	9300      	str	r3, [sp, #0]
 8003d96:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003d98:	2200      	movs	r2, #0
 8003d9a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003d9e:	6878      	ldr	r0, [r7, #4]
 8003da0:	f000 f856 	bl	8003e50 <UART_WaitOnFlagUntilTimeout>
 8003da4:	4603      	mov	r3, r0
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d03c      	beq.n	8003e24 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003db2:	e853 3f00 	ldrex	r3, [r3]
 8003db6:	623b      	str	r3, [r7, #32]
   return(result);
 8003db8:	6a3b      	ldr	r3, [r7, #32]
 8003dba:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003dbe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	461a      	mov	r2, r3
 8003dc6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003dc8:	633b      	str	r3, [r7, #48]	; 0x30
 8003dca:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dcc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003dce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003dd0:	e841 2300 	strex	r3, r2, [r1]
 8003dd4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003dd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d1e6      	bne.n	8003daa <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	3308      	adds	r3, #8
 8003de2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003de4:	693b      	ldr	r3, [r7, #16]
 8003de6:	e853 3f00 	ldrex	r3, [r3]
 8003dea:	60fb      	str	r3, [r7, #12]
   return(result);
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	f023 0301 	bic.w	r3, r3, #1
 8003df2:	64bb      	str	r3, [r7, #72]	; 0x48
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	3308      	adds	r3, #8
 8003dfa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003dfc:	61fa      	str	r2, [r7, #28]
 8003dfe:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e00:	69b9      	ldr	r1, [r7, #24]
 8003e02:	69fa      	ldr	r2, [r7, #28]
 8003e04:	e841 2300 	strex	r3, r2, [r1]
 8003e08:	617b      	str	r3, [r7, #20]
   return(result);
 8003e0a:	697b      	ldr	r3, [r7, #20]
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d1e5      	bne.n	8003ddc <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2220      	movs	r2, #32
 8003e14:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003e20:	2303      	movs	r3, #3
 8003e22:	e011      	b.n	8003e48 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2220      	movs	r2, #32
 8003e28:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	2220      	movs	r2, #32
 8003e2e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	2200      	movs	r2, #0
 8003e36:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	2200      	movs	r2, #0
 8003e42:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8003e46:	2300      	movs	r3, #0
}
 8003e48:	4618      	mov	r0, r3
 8003e4a:	3758      	adds	r7, #88	; 0x58
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	bd80      	pop	{r7, pc}

08003e50 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	b084      	sub	sp, #16
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	60f8      	str	r0, [r7, #12]
 8003e58:	60b9      	str	r1, [r7, #8]
 8003e5a:	603b      	str	r3, [r7, #0]
 8003e5c:	4613      	mov	r3, r2
 8003e5e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e60:	e049      	b.n	8003ef6 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e62:	69bb      	ldr	r3, [r7, #24]
 8003e64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e68:	d045      	beq.n	8003ef6 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e6a:	f7fc fee5 	bl	8000c38 <HAL_GetTick>
 8003e6e:	4602      	mov	r2, r0
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	1ad3      	subs	r3, r2, r3
 8003e74:	69ba      	ldr	r2, [r7, #24]
 8003e76:	429a      	cmp	r2, r3
 8003e78:	d302      	bcc.n	8003e80 <UART_WaitOnFlagUntilTimeout+0x30>
 8003e7a:	69bb      	ldr	r3, [r7, #24]
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d101      	bne.n	8003e84 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003e80:	2303      	movs	r3, #3
 8003e82:	e048      	b.n	8003f16 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f003 0304 	and.w	r3, r3, #4
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d031      	beq.n	8003ef6 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	69db      	ldr	r3, [r3, #28]
 8003e98:	f003 0308 	and.w	r3, r3, #8
 8003e9c:	2b08      	cmp	r3, #8
 8003e9e:	d110      	bne.n	8003ec2 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	2208      	movs	r2, #8
 8003ea6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003ea8:	68f8      	ldr	r0, [r7, #12]
 8003eaa:	f000 f9c5 	bl	8004238 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	2208      	movs	r2, #8
 8003eb2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	2200      	movs	r2, #0
 8003eba:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8003ebe:	2301      	movs	r3, #1
 8003ec0:	e029      	b.n	8003f16 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	69db      	ldr	r3, [r3, #28]
 8003ec8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ecc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ed0:	d111      	bne.n	8003ef6 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003eda:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003edc:	68f8      	ldr	r0, [r7, #12]
 8003ede:	f000 f9ab 	bl	8004238 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	2220      	movs	r2, #32
 8003ee6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	2200      	movs	r2, #0
 8003eee:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8003ef2:	2303      	movs	r3, #3
 8003ef4:	e00f      	b.n	8003f16 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	69da      	ldr	r2, [r3, #28]
 8003efc:	68bb      	ldr	r3, [r7, #8]
 8003efe:	4013      	ands	r3, r2
 8003f00:	68ba      	ldr	r2, [r7, #8]
 8003f02:	429a      	cmp	r2, r3
 8003f04:	bf0c      	ite	eq
 8003f06:	2301      	moveq	r3, #1
 8003f08:	2300      	movne	r3, #0
 8003f0a:	b2db      	uxtb	r3, r3
 8003f0c:	461a      	mov	r2, r3
 8003f0e:	79fb      	ldrb	r3, [r7, #7]
 8003f10:	429a      	cmp	r2, r3
 8003f12:	d0a6      	beq.n	8003e62 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003f14:	2300      	movs	r3, #0
}
 8003f16:	4618      	mov	r0, r3
 8003f18:	3710      	adds	r7, #16
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	bd80      	pop	{r7, pc}
	...

08003f20 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003f20:	b480      	push	{r7}
 8003f22:	b097      	sub	sp, #92	; 0x5c
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	60f8      	str	r0, [r7, #12]
 8003f28:	60b9      	str	r1, [r7, #8]
 8003f2a:	4613      	mov	r3, r2
 8003f2c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	68ba      	ldr	r2, [r7, #8]
 8003f32:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	88fa      	ldrh	r2, [r7, #6]
 8003f38:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	88fa      	ldrh	r2, [r7, #6]
 8003f40:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	2200      	movs	r2, #0
 8003f48:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	689b      	ldr	r3, [r3, #8]
 8003f4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f52:	d10e      	bne.n	8003f72 <UART_Start_Receive_IT+0x52>
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	691b      	ldr	r3, [r3, #16]
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d105      	bne.n	8003f68 <UART_Start_Receive_IT+0x48>
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8003f62:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003f66:	e02d      	b.n	8003fc4 <UART_Start_Receive_IT+0xa4>
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	22ff      	movs	r2, #255	; 0xff
 8003f6c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003f70:	e028      	b.n	8003fc4 <UART_Start_Receive_IT+0xa4>
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	689b      	ldr	r3, [r3, #8]
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d10d      	bne.n	8003f96 <UART_Start_Receive_IT+0x76>
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	691b      	ldr	r3, [r3, #16]
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d104      	bne.n	8003f8c <UART_Start_Receive_IT+0x6c>
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	22ff      	movs	r2, #255	; 0xff
 8003f86:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003f8a:	e01b      	b.n	8003fc4 <UART_Start_Receive_IT+0xa4>
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	227f      	movs	r2, #127	; 0x7f
 8003f90:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003f94:	e016      	b.n	8003fc4 <UART_Start_Receive_IT+0xa4>
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	689b      	ldr	r3, [r3, #8]
 8003f9a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003f9e:	d10d      	bne.n	8003fbc <UART_Start_Receive_IT+0x9c>
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	691b      	ldr	r3, [r3, #16]
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d104      	bne.n	8003fb2 <UART_Start_Receive_IT+0x92>
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	227f      	movs	r2, #127	; 0x7f
 8003fac:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003fb0:	e008      	b.n	8003fc4 <UART_Start_Receive_IT+0xa4>
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	223f      	movs	r2, #63	; 0x3f
 8003fb6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003fba:	e003      	b.n	8003fc4 <UART_Start_Receive_IT+0xa4>
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	2222      	movs	r2, #34	; 0x22
 8003fd0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	3308      	adds	r3, #8
 8003fda:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fdc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003fde:	e853 3f00 	ldrex	r3, [r3]
 8003fe2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003fe4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fe6:	f043 0301 	orr.w	r3, r3, #1
 8003fea:	657b      	str	r3, [r7, #84]	; 0x54
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	3308      	adds	r3, #8
 8003ff2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003ff4:	64ba      	str	r2, [r7, #72]	; 0x48
 8003ff6:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ff8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003ffa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003ffc:	e841 2300 	strex	r3, r2, [r1]
 8004000:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004002:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004004:	2b00      	cmp	r3, #0
 8004006:	d1e5      	bne.n	8003fd4 <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	689b      	ldr	r3, [r3, #8]
 800400c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004010:	d107      	bne.n	8004022 <UART_Start_Receive_IT+0x102>
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	691b      	ldr	r3, [r3, #16]
 8004016:	2b00      	cmp	r3, #0
 8004018:	d103      	bne.n	8004022 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	4a21      	ldr	r2, [pc, #132]	; (80040a4 <UART_Start_Receive_IT+0x184>)
 800401e:	669a      	str	r2, [r3, #104]	; 0x68
 8004020:	e002      	b.n	8004028 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	4a20      	ldr	r2, [pc, #128]	; (80040a8 <UART_Start_Receive_IT+0x188>)
 8004026:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	691b      	ldr	r3, [r3, #16]
 800402c:	2b00      	cmp	r3, #0
 800402e:	d019      	beq.n	8004064 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004036:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004038:	e853 3f00 	ldrex	r3, [r3]
 800403c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800403e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004040:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8004044:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	461a      	mov	r2, r3
 800404c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800404e:	637b      	str	r3, [r7, #52]	; 0x34
 8004050:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004052:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004054:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004056:	e841 2300 	strex	r3, r2, [r1]
 800405a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800405c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800405e:	2b00      	cmp	r3, #0
 8004060:	d1e6      	bne.n	8004030 <UART_Start_Receive_IT+0x110>
 8004062:	e018      	b.n	8004096 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800406a:	697b      	ldr	r3, [r7, #20]
 800406c:	e853 3f00 	ldrex	r3, [r3]
 8004070:	613b      	str	r3, [r7, #16]
   return(result);
 8004072:	693b      	ldr	r3, [r7, #16]
 8004074:	f043 0320 	orr.w	r3, r3, #32
 8004078:	653b      	str	r3, [r7, #80]	; 0x50
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	461a      	mov	r2, r3
 8004080:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004082:	623b      	str	r3, [r7, #32]
 8004084:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004086:	69f9      	ldr	r1, [r7, #28]
 8004088:	6a3a      	ldr	r2, [r7, #32]
 800408a:	e841 2300 	strex	r3, r2, [r1]
 800408e:	61bb      	str	r3, [r7, #24]
   return(result);
 8004090:	69bb      	ldr	r3, [r7, #24]
 8004092:	2b00      	cmp	r3, #0
 8004094:	d1e6      	bne.n	8004064 <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8004096:	2300      	movs	r3, #0
}
 8004098:	4618      	mov	r0, r3
 800409a:	375c      	adds	r7, #92	; 0x5c
 800409c:	46bd      	mov	sp, r7
 800409e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a2:	4770      	bx	lr
 80040a4:	08004725 	.word	0x08004725
 80040a8:	08004569 	.word	0x08004569

080040ac <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80040ac:	b580      	push	{r7, lr}
 80040ae:	b096      	sub	sp, #88	; 0x58
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	60f8      	str	r0, [r7, #12]
 80040b4:	60b9      	str	r1, [r7, #8]
 80040b6:	4613      	mov	r3, r2
 80040b8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	68ba      	ldr	r2, [r7, #8]
 80040be:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	88fa      	ldrh	r2, [r7, #6]
 80040c4:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	2200      	movs	r2, #0
 80040cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	2222      	movs	r2, #34	; 0x22
 80040d4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  if (huart->hdmarx != NULL)
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d028      	beq.n	8004132 <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80040e4:	4a3e      	ldr	r2, [pc, #248]	; (80041e0 <UART_Start_Receive_DMA+0x134>)
 80040e6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80040ec:	4a3d      	ldr	r2, [pc, #244]	; (80041e4 <UART_Start_Receive_DMA+0x138>)
 80040ee:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80040f4:	4a3c      	ldr	r2, [pc, #240]	; (80041e8 <UART_Start_Receive_DMA+0x13c>)
 80040f6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80040fc:	2200      	movs	r2, #0
 80040fe:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	6f58      	ldr	r0, [r3, #116]	; 0x74
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	3324      	adds	r3, #36	; 0x24
 800410a:	4619      	mov	r1, r3
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004110:	461a      	mov	r2, r3
 8004112:	88fb      	ldrh	r3, [r7, #6]
 8004114:	f7fc ff66 	bl	8000fe4 <HAL_DMA_Start_IT>
 8004118:	4603      	mov	r3, r0
 800411a:	2b00      	cmp	r3, #0
 800411c:	d009      	beq.n	8004132 <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	2210      	movs	r2, #16
 8004122:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	2220      	movs	r2, #32
 800412a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      return HAL_ERROR;
 800412e:	2301      	movs	r3, #1
 8004130:	e051      	b.n	80041d6 <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	691b      	ldr	r3, [r3, #16]
 8004136:	2b00      	cmp	r3, #0
 8004138:	d018      	beq.n	800416c <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004140:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004142:	e853 3f00 	ldrex	r3, [r3]
 8004146:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004148:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800414a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800414e:	657b      	str	r3, [r7, #84]	; 0x54
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	461a      	mov	r2, r3
 8004156:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004158:	64bb      	str	r3, [r7, #72]	; 0x48
 800415a:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800415c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800415e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004160:	e841 2300 	strex	r3, r2, [r1]
 8004164:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004166:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004168:	2b00      	cmp	r3, #0
 800416a:	d1e6      	bne.n	800413a <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	3308      	adds	r3, #8
 8004172:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004174:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004176:	e853 3f00 	ldrex	r3, [r3]
 800417a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800417c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800417e:	f043 0301 	orr.w	r3, r3, #1
 8004182:	653b      	str	r3, [r7, #80]	; 0x50
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	3308      	adds	r3, #8
 800418a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800418c:	637a      	str	r2, [r7, #52]	; 0x34
 800418e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004190:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004192:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004194:	e841 2300 	strex	r3, r2, [r1]
 8004198:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800419a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800419c:	2b00      	cmp	r3, #0
 800419e:	d1e5      	bne.n	800416c <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	3308      	adds	r3, #8
 80041a6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041a8:	697b      	ldr	r3, [r7, #20]
 80041aa:	e853 3f00 	ldrex	r3, [r3]
 80041ae:	613b      	str	r3, [r7, #16]
   return(result);
 80041b0:	693b      	ldr	r3, [r7, #16]
 80041b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80041b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	3308      	adds	r3, #8
 80041be:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80041c0:	623a      	str	r2, [r7, #32]
 80041c2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041c4:	69f9      	ldr	r1, [r7, #28]
 80041c6:	6a3a      	ldr	r2, [r7, #32]
 80041c8:	e841 2300 	strex	r3, r2, [r1]
 80041cc:	61bb      	str	r3, [r7, #24]
   return(result);
 80041ce:	69bb      	ldr	r3, [r7, #24]
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d1e5      	bne.n	80041a0 <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 80041d4:	2300      	movs	r3, #0
}
 80041d6:	4618      	mov	r0, r3
 80041d8:	3758      	adds	r7, #88	; 0x58
 80041da:	46bd      	mov	sp, r7
 80041dc:	bd80      	pop	{r7, pc}
 80041de:	bf00      	nop
 80041e0:	08004301 	.word	0x08004301
 80041e4:	0800442d 	.word	0x0800442d
 80041e8:	0800446b 	.word	0x0800446b

080041ec <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80041ec:	b480      	push	{r7}
 80041ee:	b089      	sub	sp, #36	; 0x24
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	e853 3f00 	ldrex	r3, [r3]
 8004200:	60bb      	str	r3, [r7, #8]
   return(result);
 8004202:	68bb      	ldr	r3, [r7, #8]
 8004204:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004208:	61fb      	str	r3, [r7, #28]
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	461a      	mov	r2, r3
 8004210:	69fb      	ldr	r3, [r7, #28]
 8004212:	61bb      	str	r3, [r7, #24]
 8004214:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004216:	6979      	ldr	r1, [r7, #20]
 8004218:	69ba      	ldr	r2, [r7, #24]
 800421a:	e841 2300 	strex	r3, r2, [r1]
 800421e:	613b      	str	r3, [r7, #16]
   return(result);
 8004220:	693b      	ldr	r3, [r7, #16]
 8004222:	2b00      	cmp	r3, #0
 8004224:	d1e6      	bne.n	80041f4 <UART_EndTxTransfer+0x8>
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	2220      	movs	r2, #32
 800422a:	67da      	str	r2, [r3, #124]	; 0x7c
}
 800422c:	bf00      	nop
 800422e:	3724      	adds	r7, #36	; 0x24
 8004230:	46bd      	mov	sp, r7
 8004232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004236:	4770      	bx	lr

08004238 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004238:	b480      	push	{r7}
 800423a:	b095      	sub	sp, #84	; 0x54
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004246:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004248:	e853 3f00 	ldrex	r3, [r3]
 800424c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800424e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004250:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004254:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	461a      	mov	r2, r3
 800425c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800425e:	643b      	str	r3, [r7, #64]	; 0x40
 8004260:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004262:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004264:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004266:	e841 2300 	strex	r3, r2, [r1]
 800426a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800426c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800426e:	2b00      	cmp	r3, #0
 8004270:	d1e6      	bne.n	8004240 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	3308      	adds	r3, #8
 8004278:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800427a:	6a3b      	ldr	r3, [r7, #32]
 800427c:	e853 3f00 	ldrex	r3, [r3]
 8004280:	61fb      	str	r3, [r7, #28]
   return(result);
 8004282:	69fb      	ldr	r3, [r7, #28]
 8004284:	f023 0301 	bic.w	r3, r3, #1
 8004288:	64bb      	str	r3, [r7, #72]	; 0x48
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	3308      	adds	r3, #8
 8004290:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004292:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004294:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004296:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004298:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800429a:	e841 2300 	strex	r3, r2, [r1]
 800429e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80042a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d1e5      	bne.n	8004272 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80042aa:	2b01      	cmp	r3, #1
 80042ac:	d118      	bne.n	80042e0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	e853 3f00 	ldrex	r3, [r3]
 80042ba:	60bb      	str	r3, [r7, #8]
   return(result);
 80042bc:	68bb      	ldr	r3, [r7, #8]
 80042be:	f023 0310 	bic.w	r3, r3, #16
 80042c2:	647b      	str	r3, [r7, #68]	; 0x44
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	461a      	mov	r2, r3
 80042ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80042cc:	61bb      	str	r3, [r7, #24]
 80042ce:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042d0:	6979      	ldr	r1, [r7, #20]
 80042d2:	69ba      	ldr	r2, [r7, #24]
 80042d4:	e841 2300 	strex	r3, r2, [r1]
 80042d8:	613b      	str	r3, [r7, #16]
   return(result);
 80042da:	693b      	ldr	r3, [r7, #16]
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d1e6      	bne.n	80042ae <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2220      	movs	r2, #32
 80042e4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2200      	movs	r2, #0
 80042ec:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	2200      	movs	r2, #0
 80042f2:	669a      	str	r2, [r3, #104]	; 0x68
}
 80042f4:	bf00      	nop
 80042f6:	3754      	adds	r7, #84	; 0x54
 80042f8:	46bd      	mov	sp, r7
 80042fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fe:	4770      	bx	lr

08004300 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004300:	b580      	push	{r7, lr}
 8004302:	b09c      	sub	sp, #112	; 0x70
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800430c:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f003 0320 	and.w	r3, r3, #32
 8004318:	2b00      	cmp	r3, #0
 800431a:	d171      	bne.n	8004400 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 800431c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800431e:	2200      	movs	r2, #0
 8004320:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004324:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800432a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800432c:	e853 3f00 	ldrex	r3, [r3]
 8004330:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004332:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004334:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004338:	66bb      	str	r3, [r7, #104]	; 0x68
 800433a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	461a      	mov	r2, r3
 8004340:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004342:	65bb      	str	r3, [r7, #88]	; 0x58
 8004344:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004346:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004348:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800434a:	e841 2300 	strex	r3, r2, [r1]
 800434e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004350:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004352:	2b00      	cmp	r3, #0
 8004354:	d1e6      	bne.n	8004324 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004356:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	3308      	adds	r3, #8
 800435c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800435e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004360:	e853 3f00 	ldrex	r3, [r3]
 8004364:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004366:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004368:	f023 0301 	bic.w	r3, r3, #1
 800436c:	667b      	str	r3, [r7, #100]	; 0x64
 800436e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	3308      	adds	r3, #8
 8004374:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004376:	647a      	str	r2, [r7, #68]	; 0x44
 8004378:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800437a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800437c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800437e:	e841 2300 	strex	r3, r2, [r1]
 8004382:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004384:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004386:	2b00      	cmp	r3, #0
 8004388:	d1e5      	bne.n	8004356 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800438a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	3308      	adds	r3, #8
 8004390:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004394:	e853 3f00 	ldrex	r3, [r3]
 8004398:	623b      	str	r3, [r7, #32]
   return(result);
 800439a:	6a3b      	ldr	r3, [r7, #32]
 800439c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80043a0:	663b      	str	r3, [r7, #96]	; 0x60
 80043a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	3308      	adds	r3, #8
 80043a8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80043aa:	633a      	str	r2, [r7, #48]	; 0x30
 80043ac:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043ae:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80043b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80043b2:	e841 2300 	strex	r3, r2, [r1]
 80043b6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80043b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d1e5      	bne.n	800438a <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80043be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80043c0:	2220      	movs	r2, #32
 80043c2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80043c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80043c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80043ca:	2b01      	cmp	r3, #1
 80043cc:	d118      	bne.n	8004400 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80043ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043d4:	693b      	ldr	r3, [r7, #16]
 80043d6:	e853 3f00 	ldrex	r3, [r3]
 80043da:	60fb      	str	r3, [r7, #12]
   return(result);
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	f023 0310 	bic.w	r3, r3, #16
 80043e2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80043e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	461a      	mov	r2, r3
 80043ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80043ec:	61fb      	str	r3, [r7, #28]
 80043ee:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043f0:	69b9      	ldr	r1, [r7, #24]
 80043f2:	69fa      	ldr	r2, [r7, #28]
 80043f4:	e841 2300 	strex	r3, r2, [r1]
 80043f8:	617b      	str	r3, [r7, #20]
   return(result);
 80043fa:	697b      	ldr	r3, [r7, #20]
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d1e6      	bne.n	80043ce <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004400:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004402:	2200      	movs	r2, #0
 8004404:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004406:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004408:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800440a:	2b01      	cmp	r3, #1
 800440c:	d107      	bne.n	800441e <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800440e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004410:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004414:	4619      	mov	r1, r3
 8004416:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8004418:	f7ff f90c 	bl	8003634 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800441c:	e002      	b.n	8004424 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800441e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8004420:	f7fc f8c6 	bl	80005b0 <HAL_UART_RxCpltCallback>
}
 8004424:	bf00      	nop
 8004426:	3770      	adds	r7, #112	; 0x70
 8004428:	46bd      	mov	sp, r7
 800442a:	bd80      	pop	{r7, pc}

0800442c <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800442c:	b580      	push	{r7, lr}
 800442e:	b084      	sub	sp, #16
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004438:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	2201      	movs	r2, #1
 800443e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004444:	2b01      	cmp	r3, #1
 8004446:	d109      	bne.n	800445c <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800444e:	085b      	lsrs	r3, r3, #1
 8004450:	b29b      	uxth	r3, r3
 8004452:	4619      	mov	r1, r3
 8004454:	68f8      	ldr	r0, [r7, #12]
 8004456:	f7ff f8ed 	bl	8003634 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800445a:	e002      	b.n	8004462 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800445c:	68f8      	ldr	r0, [r7, #12]
 800445e:	f7fc f899 	bl	8000594 <HAL_UART_RxHalfCpltCallback>
}
 8004462:	bf00      	nop
 8004464:	3710      	adds	r7, #16
 8004466:	46bd      	mov	sp, r7
 8004468:	bd80      	pop	{r7, pc}

0800446a <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800446a:	b580      	push	{r7, lr}
 800446c:	b086      	sub	sp, #24
 800446e:	af00      	add	r7, sp, #0
 8004470:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004476:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8004478:	697b      	ldr	r3, [r7, #20]
 800447a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800447c:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800447e:	697b      	ldr	r3, [r7, #20]
 8004480:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004484:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8004486:	697b      	ldr	r3, [r7, #20]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	689b      	ldr	r3, [r3, #8]
 800448c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004490:	2b80      	cmp	r3, #128	; 0x80
 8004492:	d109      	bne.n	80044a8 <UART_DMAError+0x3e>
 8004494:	693b      	ldr	r3, [r7, #16]
 8004496:	2b21      	cmp	r3, #33	; 0x21
 8004498:	d106      	bne.n	80044a8 <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800449a:	697b      	ldr	r3, [r7, #20]
 800449c:	2200      	movs	r2, #0
 800449e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 80044a2:	6978      	ldr	r0, [r7, #20]
 80044a4:	f7ff fea2 	bl	80041ec <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80044a8:	697b      	ldr	r3, [r7, #20]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	689b      	ldr	r3, [r3, #8]
 80044ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044b2:	2b40      	cmp	r3, #64	; 0x40
 80044b4:	d109      	bne.n	80044ca <UART_DMAError+0x60>
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	2b22      	cmp	r3, #34	; 0x22
 80044ba:	d106      	bne.n	80044ca <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80044bc:	697b      	ldr	r3, [r7, #20]
 80044be:	2200      	movs	r2, #0
 80044c0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 80044c4:	6978      	ldr	r0, [r7, #20]
 80044c6:	f7ff feb7 	bl	8004238 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80044ca:	697b      	ldr	r3, [r7, #20]
 80044cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80044d0:	f043 0210 	orr.w	r2, r3, #16
 80044d4:	697b      	ldr	r3, [r7, #20]
 80044d6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80044da:	6978      	ldr	r0, [r7, #20]
 80044dc:	f7ff f8a0 	bl	8003620 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80044e0:	bf00      	nop
 80044e2:	3718      	adds	r7, #24
 80044e4:	46bd      	mov	sp, r7
 80044e6:	bd80      	pop	{r7, pc}

080044e8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80044e8:	b580      	push	{r7, lr}
 80044ea:	b084      	sub	sp, #16
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044f4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	2200      	movs	r2, #0
 80044fa:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	2200      	movs	r2, #0
 8004502:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004506:	68f8      	ldr	r0, [r7, #12]
 8004508:	f7ff f88a 	bl	8003620 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800450c:	bf00      	nop
 800450e:	3710      	adds	r7, #16
 8004510:	46bd      	mov	sp, r7
 8004512:	bd80      	pop	{r7, pc}

08004514 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004514:	b580      	push	{r7, lr}
 8004516:	b088      	sub	sp, #32
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	e853 3f00 	ldrex	r3, [r3]
 8004528:	60bb      	str	r3, [r7, #8]
   return(result);
 800452a:	68bb      	ldr	r3, [r7, #8]
 800452c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004530:	61fb      	str	r3, [r7, #28]
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	461a      	mov	r2, r3
 8004538:	69fb      	ldr	r3, [r7, #28]
 800453a:	61bb      	str	r3, [r7, #24]
 800453c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800453e:	6979      	ldr	r1, [r7, #20]
 8004540:	69ba      	ldr	r2, [r7, #24]
 8004542:	e841 2300 	strex	r3, r2, [r1]
 8004546:	613b      	str	r3, [r7, #16]
   return(result);
 8004548:	693b      	ldr	r3, [r7, #16]
 800454a:	2b00      	cmp	r3, #0
 800454c:	d1e6      	bne.n	800451c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	2220      	movs	r2, #32
 8004552:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2200      	movs	r2, #0
 8004558:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800455a:	6878      	ldr	r0, [r7, #4]
 800455c:	f7ff f856 	bl	800360c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004560:	bf00      	nop
 8004562:	3720      	adds	r7, #32
 8004564:	46bd      	mov	sp, r7
 8004566:	bd80      	pop	{r7, pc}

08004568 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004568:	b580      	push	{r7, lr}
 800456a:	b09c      	sub	sp, #112	; 0x70
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004576:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004580:	2b22      	cmp	r3, #34	; 0x22
 8004582:	f040 80be 	bne.w	8004702 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800458c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004590:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8004594:	b2d9      	uxtb	r1, r3
 8004596:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800459a:	b2da      	uxtb	r2, r3
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045a0:	400a      	ands	r2, r1
 80045a2:	b2d2      	uxtb	r2, r2
 80045a4:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045aa:	1c5a      	adds	r2, r3, #1
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80045b6:	b29b      	uxth	r3, r3
 80045b8:	3b01      	subs	r3, #1
 80045ba:	b29a      	uxth	r2, r3
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80045c8:	b29b      	uxth	r3, r3
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	f040 80a3 	bne.w	8004716 <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80045d8:	e853 3f00 	ldrex	r3, [r3]
 80045dc:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80045de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80045e0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80045e4:	66bb      	str	r3, [r7, #104]	; 0x68
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	461a      	mov	r2, r3
 80045ec:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80045ee:	65bb      	str	r3, [r7, #88]	; 0x58
 80045f0:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045f2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80045f4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80045f6:	e841 2300 	strex	r3, r2, [r1]
 80045fa:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80045fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d1e6      	bne.n	80045d0 <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	3308      	adds	r3, #8
 8004608:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800460a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800460c:	e853 3f00 	ldrex	r3, [r3]
 8004610:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004612:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004614:	f023 0301 	bic.w	r3, r3, #1
 8004618:	667b      	str	r3, [r7, #100]	; 0x64
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	3308      	adds	r3, #8
 8004620:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004622:	647a      	str	r2, [r7, #68]	; 0x44
 8004624:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004626:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004628:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800462a:	e841 2300 	strex	r3, r2, [r1]
 800462e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004630:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004632:	2b00      	cmp	r3, #0
 8004634:	d1e5      	bne.n	8004602 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	2220      	movs	r2, #32
 800463a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	2200      	movs	r2, #0
 8004642:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2200      	movs	r2, #0
 8004648:	665a      	str	r2, [r3, #100]	; 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	4a34      	ldr	r2, [pc, #208]	; (8004720 <UART_RxISR_8BIT+0x1b8>)
 8004650:	4293      	cmp	r3, r2
 8004652:	d01f      	beq.n	8004694 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	685b      	ldr	r3, [r3, #4]
 800465a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800465e:	2b00      	cmp	r3, #0
 8004660:	d018      	beq.n	8004694 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800466a:	e853 3f00 	ldrex	r3, [r3]
 800466e:	623b      	str	r3, [r7, #32]
   return(result);
 8004670:	6a3b      	ldr	r3, [r7, #32]
 8004672:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004676:	663b      	str	r3, [r7, #96]	; 0x60
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	461a      	mov	r2, r3
 800467e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004680:	633b      	str	r3, [r7, #48]	; 0x30
 8004682:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004684:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004686:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004688:	e841 2300 	strex	r3, r2, [r1]
 800468c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800468e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004690:	2b00      	cmp	r3, #0
 8004692:	d1e6      	bne.n	8004662 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004698:	2b01      	cmp	r3, #1
 800469a:	d12e      	bne.n	80046fa <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2200      	movs	r2, #0
 80046a0:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046a8:	693b      	ldr	r3, [r7, #16]
 80046aa:	e853 3f00 	ldrex	r3, [r3]
 80046ae:	60fb      	str	r3, [r7, #12]
   return(result);
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	f023 0310 	bic.w	r3, r3, #16
 80046b6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	461a      	mov	r2, r3
 80046be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80046c0:	61fb      	str	r3, [r7, #28]
 80046c2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046c4:	69b9      	ldr	r1, [r7, #24]
 80046c6:	69fa      	ldr	r2, [r7, #28]
 80046c8:	e841 2300 	strex	r3, r2, [r1]
 80046cc:	617b      	str	r3, [r7, #20]
   return(result);
 80046ce:	697b      	ldr	r3, [r7, #20]
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d1e6      	bne.n	80046a2 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	69db      	ldr	r3, [r3, #28]
 80046da:	f003 0310 	and.w	r3, r3, #16
 80046de:	2b10      	cmp	r3, #16
 80046e0:	d103      	bne.n	80046ea <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	2210      	movs	r2, #16
 80046e8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80046f0:	4619      	mov	r1, r3
 80046f2:	6878      	ldr	r0, [r7, #4]
 80046f4:	f7fe ff9e 	bl	8003634 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80046f8:	e00d      	b.n	8004716 <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 80046fa:	6878      	ldr	r0, [r7, #4]
 80046fc:	f7fb ff58 	bl	80005b0 <HAL_UART_RxCpltCallback>
}
 8004700:	e009      	b.n	8004716 <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	8b1b      	ldrh	r3, [r3, #24]
 8004708:	b29a      	uxth	r2, r3
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f042 0208 	orr.w	r2, r2, #8
 8004712:	b292      	uxth	r2, r2
 8004714:	831a      	strh	r2, [r3, #24]
}
 8004716:	bf00      	nop
 8004718:	3770      	adds	r7, #112	; 0x70
 800471a:	46bd      	mov	sp, r7
 800471c:	bd80      	pop	{r7, pc}
 800471e:	bf00      	nop
 8004720:	40008000 	.word	0x40008000

08004724 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004724:	b580      	push	{r7, lr}
 8004726:	b09c      	sub	sp, #112	; 0x70
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004732:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800473c:	2b22      	cmp	r3, #34	; 0x22
 800473e:	f040 80be 	bne.w	80048be <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004748:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004750:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8004752:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8004756:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800475a:	4013      	ands	r3, r2
 800475c:	b29a      	uxth	r2, r3
 800475e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004760:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004766:	1c9a      	adds	r2, r3, #2
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004772:	b29b      	uxth	r3, r3
 8004774:	3b01      	subs	r3, #1
 8004776:	b29a      	uxth	r2, r3
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004784:	b29b      	uxth	r3, r3
 8004786:	2b00      	cmp	r3, #0
 8004788:	f040 80a3 	bne.w	80048d2 <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004792:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004794:	e853 3f00 	ldrex	r3, [r3]
 8004798:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800479a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800479c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80047a0:	667b      	str	r3, [r7, #100]	; 0x64
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	461a      	mov	r2, r3
 80047a8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80047aa:	657b      	str	r3, [r7, #84]	; 0x54
 80047ac:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047ae:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80047b0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80047b2:	e841 2300 	strex	r3, r2, [r1]
 80047b6:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80047b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d1e6      	bne.n	800478c <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	3308      	adds	r3, #8
 80047c4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047c8:	e853 3f00 	ldrex	r3, [r3]
 80047cc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80047ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047d0:	f023 0301 	bic.w	r3, r3, #1
 80047d4:	663b      	str	r3, [r7, #96]	; 0x60
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	3308      	adds	r3, #8
 80047dc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80047de:	643a      	str	r2, [r7, #64]	; 0x40
 80047e0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047e2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80047e4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80047e6:	e841 2300 	strex	r3, r2, [r1]
 80047ea:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80047ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d1e5      	bne.n	80047be <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	2220      	movs	r2, #32
 80047f6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	2200      	movs	r2, #0
 80047fe:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2200      	movs	r2, #0
 8004804:	665a      	str	r2, [r3, #100]	; 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	4a34      	ldr	r2, [pc, #208]	; (80048dc <UART_RxISR_16BIT+0x1b8>)
 800480c:	4293      	cmp	r3, r2
 800480e:	d01f      	beq.n	8004850 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	685b      	ldr	r3, [r3, #4]
 8004816:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800481a:	2b00      	cmp	r3, #0
 800481c:	d018      	beq.n	8004850 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004824:	6a3b      	ldr	r3, [r7, #32]
 8004826:	e853 3f00 	ldrex	r3, [r3]
 800482a:	61fb      	str	r3, [r7, #28]
   return(result);
 800482c:	69fb      	ldr	r3, [r7, #28]
 800482e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004832:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	461a      	mov	r2, r3
 800483a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800483c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800483e:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004840:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004842:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004844:	e841 2300 	strex	r3, r2, [r1]
 8004848:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800484a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800484c:	2b00      	cmp	r3, #0
 800484e:	d1e6      	bne.n	800481e <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004854:	2b01      	cmp	r3, #1
 8004856:	d12e      	bne.n	80048b6 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2200      	movs	r2, #0
 800485c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	e853 3f00 	ldrex	r3, [r3]
 800486a:	60bb      	str	r3, [r7, #8]
   return(result);
 800486c:	68bb      	ldr	r3, [r7, #8]
 800486e:	f023 0310 	bic.w	r3, r3, #16
 8004872:	65bb      	str	r3, [r7, #88]	; 0x58
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	461a      	mov	r2, r3
 800487a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800487c:	61bb      	str	r3, [r7, #24]
 800487e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004880:	6979      	ldr	r1, [r7, #20]
 8004882:	69ba      	ldr	r2, [r7, #24]
 8004884:	e841 2300 	strex	r3, r2, [r1]
 8004888:	613b      	str	r3, [r7, #16]
   return(result);
 800488a:	693b      	ldr	r3, [r7, #16]
 800488c:	2b00      	cmp	r3, #0
 800488e:	d1e6      	bne.n	800485e <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	69db      	ldr	r3, [r3, #28]
 8004896:	f003 0310 	and.w	r3, r3, #16
 800489a:	2b10      	cmp	r3, #16
 800489c:	d103      	bne.n	80048a6 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	2210      	movs	r2, #16
 80048a4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80048ac:	4619      	mov	r1, r3
 80048ae:	6878      	ldr	r0, [r7, #4]
 80048b0:	f7fe fec0 	bl	8003634 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80048b4:	e00d      	b.n	80048d2 <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 80048b6:	6878      	ldr	r0, [r7, #4]
 80048b8:	f7fb fe7a 	bl	80005b0 <HAL_UART_RxCpltCallback>
}
 80048bc:	e009      	b.n	80048d2 <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	8b1b      	ldrh	r3, [r3, #24]
 80048c4:	b29a      	uxth	r2, r3
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f042 0208 	orr.w	r2, r2, #8
 80048ce:	b292      	uxth	r2, r2
 80048d0:	831a      	strh	r2, [r3, #24]
}
 80048d2:	bf00      	nop
 80048d4:	3770      	adds	r7, #112	; 0x70
 80048d6:	46bd      	mov	sp, r7
 80048d8:	bd80      	pop	{r7, pc}
 80048da:	bf00      	nop
 80048dc:	40008000 	.word	0x40008000

080048e0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80048e0:	b480      	push	{r7}
 80048e2:	b083      	sub	sp, #12
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80048e8:	bf00      	nop
 80048ea:	370c      	adds	r7, #12
 80048ec:	46bd      	mov	sp, r7
 80048ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f2:	4770      	bx	lr

080048f4 <std>:
 80048f4:	2300      	movs	r3, #0
 80048f6:	b510      	push	{r4, lr}
 80048f8:	4604      	mov	r4, r0
 80048fa:	e9c0 3300 	strd	r3, r3, [r0]
 80048fe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004902:	6083      	str	r3, [r0, #8]
 8004904:	8181      	strh	r1, [r0, #12]
 8004906:	6643      	str	r3, [r0, #100]	; 0x64
 8004908:	81c2      	strh	r2, [r0, #14]
 800490a:	6183      	str	r3, [r0, #24]
 800490c:	4619      	mov	r1, r3
 800490e:	2208      	movs	r2, #8
 8004910:	305c      	adds	r0, #92	; 0x5c
 8004912:	f000 f8f4 	bl	8004afe <memset>
 8004916:	4b05      	ldr	r3, [pc, #20]	; (800492c <std+0x38>)
 8004918:	6263      	str	r3, [r4, #36]	; 0x24
 800491a:	4b05      	ldr	r3, [pc, #20]	; (8004930 <std+0x3c>)
 800491c:	62a3      	str	r3, [r4, #40]	; 0x28
 800491e:	4b05      	ldr	r3, [pc, #20]	; (8004934 <std+0x40>)
 8004920:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004922:	4b05      	ldr	r3, [pc, #20]	; (8004938 <std+0x44>)
 8004924:	6224      	str	r4, [r4, #32]
 8004926:	6323      	str	r3, [r4, #48]	; 0x30
 8004928:	bd10      	pop	{r4, pc}
 800492a:	bf00      	nop
 800492c:	08004a79 	.word	0x08004a79
 8004930:	08004a9b 	.word	0x08004a9b
 8004934:	08004ad3 	.word	0x08004ad3
 8004938:	08004af7 	.word	0x08004af7

0800493c <stdio_exit_handler>:
 800493c:	4a02      	ldr	r2, [pc, #8]	; (8004948 <stdio_exit_handler+0xc>)
 800493e:	4903      	ldr	r1, [pc, #12]	; (800494c <stdio_exit_handler+0x10>)
 8004940:	4803      	ldr	r0, [pc, #12]	; (8004950 <stdio_exit_handler+0x14>)
 8004942:	f000 b869 	b.w	8004a18 <_fwalk_sglue>
 8004946:	bf00      	nop
 8004948:	2000000c 	.word	0x2000000c
 800494c:	08005499 	.word	0x08005499
 8004950:	20000018 	.word	0x20000018

08004954 <cleanup_stdio>:
 8004954:	6841      	ldr	r1, [r0, #4]
 8004956:	4b0c      	ldr	r3, [pc, #48]	; (8004988 <cleanup_stdio+0x34>)
 8004958:	4299      	cmp	r1, r3
 800495a:	b510      	push	{r4, lr}
 800495c:	4604      	mov	r4, r0
 800495e:	d001      	beq.n	8004964 <cleanup_stdio+0x10>
 8004960:	f000 fd9a 	bl	8005498 <_fflush_r>
 8004964:	68a1      	ldr	r1, [r4, #8]
 8004966:	4b09      	ldr	r3, [pc, #36]	; (800498c <cleanup_stdio+0x38>)
 8004968:	4299      	cmp	r1, r3
 800496a:	d002      	beq.n	8004972 <cleanup_stdio+0x1e>
 800496c:	4620      	mov	r0, r4
 800496e:	f000 fd93 	bl	8005498 <_fflush_r>
 8004972:	68e1      	ldr	r1, [r4, #12]
 8004974:	4b06      	ldr	r3, [pc, #24]	; (8004990 <cleanup_stdio+0x3c>)
 8004976:	4299      	cmp	r1, r3
 8004978:	d004      	beq.n	8004984 <cleanup_stdio+0x30>
 800497a:	4620      	mov	r0, r4
 800497c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004980:	f000 bd8a 	b.w	8005498 <_fflush_r>
 8004984:	bd10      	pop	{r4, pc}
 8004986:	bf00      	nop
 8004988:	20000168 	.word	0x20000168
 800498c:	200001d0 	.word	0x200001d0
 8004990:	20000238 	.word	0x20000238

08004994 <global_stdio_init.part.0>:
 8004994:	b510      	push	{r4, lr}
 8004996:	4b0b      	ldr	r3, [pc, #44]	; (80049c4 <global_stdio_init.part.0+0x30>)
 8004998:	4c0b      	ldr	r4, [pc, #44]	; (80049c8 <global_stdio_init.part.0+0x34>)
 800499a:	4a0c      	ldr	r2, [pc, #48]	; (80049cc <global_stdio_init.part.0+0x38>)
 800499c:	601a      	str	r2, [r3, #0]
 800499e:	4620      	mov	r0, r4
 80049a0:	2200      	movs	r2, #0
 80049a2:	2104      	movs	r1, #4
 80049a4:	f7ff ffa6 	bl	80048f4 <std>
 80049a8:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80049ac:	2201      	movs	r2, #1
 80049ae:	2109      	movs	r1, #9
 80049b0:	f7ff ffa0 	bl	80048f4 <std>
 80049b4:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80049b8:	2202      	movs	r2, #2
 80049ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80049be:	2112      	movs	r1, #18
 80049c0:	f7ff bf98 	b.w	80048f4 <std>
 80049c4:	200002a0 	.word	0x200002a0
 80049c8:	20000168 	.word	0x20000168
 80049cc:	0800493d 	.word	0x0800493d

080049d0 <__sfp_lock_acquire>:
 80049d0:	4801      	ldr	r0, [pc, #4]	; (80049d8 <__sfp_lock_acquire+0x8>)
 80049d2:	f000 b90d 	b.w	8004bf0 <__retarget_lock_acquire_recursive>
 80049d6:	bf00      	nop
 80049d8:	200002a9 	.word	0x200002a9

080049dc <__sfp_lock_release>:
 80049dc:	4801      	ldr	r0, [pc, #4]	; (80049e4 <__sfp_lock_release+0x8>)
 80049de:	f000 b908 	b.w	8004bf2 <__retarget_lock_release_recursive>
 80049e2:	bf00      	nop
 80049e4:	200002a9 	.word	0x200002a9

080049e8 <__sinit>:
 80049e8:	b510      	push	{r4, lr}
 80049ea:	4604      	mov	r4, r0
 80049ec:	f7ff fff0 	bl	80049d0 <__sfp_lock_acquire>
 80049f0:	6a23      	ldr	r3, [r4, #32]
 80049f2:	b11b      	cbz	r3, 80049fc <__sinit+0x14>
 80049f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80049f8:	f7ff bff0 	b.w	80049dc <__sfp_lock_release>
 80049fc:	4b04      	ldr	r3, [pc, #16]	; (8004a10 <__sinit+0x28>)
 80049fe:	6223      	str	r3, [r4, #32]
 8004a00:	4b04      	ldr	r3, [pc, #16]	; (8004a14 <__sinit+0x2c>)
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d1f5      	bne.n	80049f4 <__sinit+0xc>
 8004a08:	f7ff ffc4 	bl	8004994 <global_stdio_init.part.0>
 8004a0c:	e7f2      	b.n	80049f4 <__sinit+0xc>
 8004a0e:	bf00      	nop
 8004a10:	08004955 	.word	0x08004955
 8004a14:	200002a0 	.word	0x200002a0

08004a18 <_fwalk_sglue>:
 8004a18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004a1c:	4607      	mov	r7, r0
 8004a1e:	4688      	mov	r8, r1
 8004a20:	4614      	mov	r4, r2
 8004a22:	2600      	movs	r6, #0
 8004a24:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004a28:	f1b9 0901 	subs.w	r9, r9, #1
 8004a2c:	d505      	bpl.n	8004a3a <_fwalk_sglue+0x22>
 8004a2e:	6824      	ldr	r4, [r4, #0]
 8004a30:	2c00      	cmp	r4, #0
 8004a32:	d1f7      	bne.n	8004a24 <_fwalk_sglue+0xc>
 8004a34:	4630      	mov	r0, r6
 8004a36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004a3a:	89ab      	ldrh	r3, [r5, #12]
 8004a3c:	2b01      	cmp	r3, #1
 8004a3e:	d907      	bls.n	8004a50 <_fwalk_sglue+0x38>
 8004a40:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004a44:	3301      	adds	r3, #1
 8004a46:	d003      	beq.n	8004a50 <_fwalk_sglue+0x38>
 8004a48:	4629      	mov	r1, r5
 8004a4a:	4638      	mov	r0, r7
 8004a4c:	47c0      	blx	r8
 8004a4e:	4306      	orrs	r6, r0
 8004a50:	3568      	adds	r5, #104	; 0x68
 8004a52:	e7e9      	b.n	8004a28 <_fwalk_sglue+0x10>

08004a54 <iprintf>:
 8004a54:	b40f      	push	{r0, r1, r2, r3}
 8004a56:	b507      	push	{r0, r1, r2, lr}
 8004a58:	4906      	ldr	r1, [pc, #24]	; (8004a74 <iprintf+0x20>)
 8004a5a:	ab04      	add	r3, sp, #16
 8004a5c:	6808      	ldr	r0, [r1, #0]
 8004a5e:	f853 2b04 	ldr.w	r2, [r3], #4
 8004a62:	6881      	ldr	r1, [r0, #8]
 8004a64:	9301      	str	r3, [sp, #4]
 8004a66:	f000 f9e7 	bl	8004e38 <_vfiprintf_r>
 8004a6a:	b003      	add	sp, #12
 8004a6c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004a70:	b004      	add	sp, #16
 8004a72:	4770      	bx	lr
 8004a74:	20000064 	.word	0x20000064

08004a78 <__sread>:
 8004a78:	b510      	push	{r4, lr}
 8004a7a:	460c      	mov	r4, r1
 8004a7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004a80:	f000 f868 	bl	8004b54 <_read_r>
 8004a84:	2800      	cmp	r0, #0
 8004a86:	bfab      	itete	ge
 8004a88:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004a8a:	89a3      	ldrhlt	r3, [r4, #12]
 8004a8c:	181b      	addge	r3, r3, r0
 8004a8e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004a92:	bfac      	ite	ge
 8004a94:	6563      	strge	r3, [r4, #84]	; 0x54
 8004a96:	81a3      	strhlt	r3, [r4, #12]
 8004a98:	bd10      	pop	{r4, pc}

08004a9a <__swrite>:
 8004a9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004a9e:	461f      	mov	r7, r3
 8004aa0:	898b      	ldrh	r3, [r1, #12]
 8004aa2:	05db      	lsls	r3, r3, #23
 8004aa4:	4605      	mov	r5, r0
 8004aa6:	460c      	mov	r4, r1
 8004aa8:	4616      	mov	r6, r2
 8004aaa:	d505      	bpl.n	8004ab8 <__swrite+0x1e>
 8004aac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004ab0:	2302      	movs	r3, #2
 8004ab2:	2200      	movs	r2, #0
 8004ab4:	f000 f83c 	bl	8004b30 <_lseek_r>
 8004ab8:	89a3      	ldrh	r3, [r4, #12]
 8004aba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004abe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004ac2:	81a3      	strh	r3, [r4, #12]
 8004ac4:	4632      	mov	r2, r6
 8004ac6:	463b      	mov	r3, r7
 8004ac8:	4628      	mov	r0, r5
 8004aca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004ace:	f000 b853 	b.w	8004b78 <_write_r>

08004ad2 <__sseek>:
 8004ad2:	b510      	push	{r4, lr}
 8004ad4:	460c      	mov	r4, r1
 8004ad6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004ada:	f000 f829 	bl	8004b30 <_lseek_r>
 8004ade:	1c43      	adds	r3, r0, #1
 8004ae0:	89a3      	ldrh	r3, [r4, #12]
 8004ae2:	bf15      	itete	ne
 8004ae4:	6560      	strne	r0, [r4, #84]	; 0x54
 8004ae6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004aea:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004aee:	81a3      	strheq	r3, [r4, #12]
 8004af0:	bf18      	it	ne
 8004af2:	81a3      	strhne	r3, [r4, #12]
 8004af4:	bd10      	pop	{r4, pc}

08004af6 <__sclose>:
 8004af6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004afa:	f000 b809 	b.w	8004b10 <_close_r>

08004afe <memset>:
 8004afe:	4402      	add	r2, r0
 8004b00:	4603      	mov	r3, r0
 8004b02:	4293      	cmp	r3, r2
 8004b04:	d100      	bne.n	8004b08 <memset+0xa>
 8004b06:	4770      	bx	lr
 8004b08:	f803 1b01 	strb.w	r1, [r3], #1
 8004b0c:	e7f9      	b.n	8004b02 <memset+0x4>
	...

08004b10 <_close_r>:
 8004b10:	b538      	push	{r3, r4, r5, lr}
 8004b12:	4d06      	ldr	r5, [pc, #24]	; (8004b2c <_close_r+0x1c>)
 8004b14:	2300      	movs	r3, #0
 8004b16:	4604      	mov	r4, r0
 8004b18:	4608      	mov	r0, r1
 8004b1a:	602b      	str	r3, [r5, #0]
 8004b1c:	f7fb ff75 	bl	8000a0a <_close>
 8004b20:	1c43      	adds	r3, r0, #1
 8004b22:	d102      	bne.n	8004b2a <_close_r+0x1a>
 8004b24:	682b      	ldr	r3, [r5, #0]
 8004b26:	b103      	cbz	r3, 8004b2a <_close_r+0x1a>
 8004b28:	6023      	str	r3, [r4, #0]
 8004b2a:	bd38      	pop	{r3, r4, r5, pc}
 8004b2c:	200002a4 	.word	0x200002a4

08004b30 <_lseek_r>:
 8004b30:	b538      	push	{r3, r4, r5, lr}
 8004b32:	4d07      	ldr	r5, [pc, #28]	; (8004b50 <_lseek_r+0x20>)
 8004b34:	4604      	mov	r4, r0
 8004b36:	4608      	mov	r0, r1
 8004b38:	4611      	mov	r1, r2
 8004b3a:	2200      	movs	r2, #0
 8004b3c:	602a      	str	r2, [r5, #0]
 8004b3e:	461a      	mov	r2, r3
 8004b40:	f7fb ff8a 	bl	8000a58 <_lseek>
 8004b44:	1c43      	adds	r3, r0, #1
 8004b46:	d102      	bne.n	8004b4e <_lseek_r+0x1e>
 8004b48:	682b      	ldr	r3, [r5, #0]
 8004b4a:	b103      	cbz	r3, 8004b4e <_lseek_r+0x1e>
 8004b4c:	6023      	str	r3, [r4, #0]
 8004b4e:	bd38      	pop	{r3, r4, r5, pc}
 8004b50:	200002a4 	.word	0x200002a4

08004b54 <_read_r>:
 8004b54:	b538      	push	{r3, r4, r5, lr}
 8004b56:	4d07      	ldr	r5, [pc, #28]	; (8004b74 <_read_r+0x20>)
 8004b58:	4604      	mov	r4, r0
 8004b5a:	4608      	mov	r0, r1
 8004b5c:	4611      	mov	r1, r2
 8004b5e:	2200      	movs	r2, #0
 8004b60:	602a      	str	r2, [r5, #0]
 8004b62:	461a      	mov	r2, r3
 8004b64:	f7fb ff34 	bl	80009d0 <_read>
 8004b68:	1c43      	adds	r3, r0, #1
 8004b6a:	d102      	bne.n	8004b72 <_read_r+0x1e>
 8004b6c:	682b      	ldr	r3, [r5, #0]
 8004b6e:	b103      	cbz	r3, 8004b72 <_read_r+0x1e>
 8004b70:	6023      	str	r3, [r4, #0]
 8004b72:	bd38      	pop	{r3, r4, r5, pc}
 8004b74:	200002a4 	.word	0x200002a4

08004b78 <_write_r>:
 8004b78:	b538      	push	{r3, r4, r5, lr}
 8004b7a:	4d07      	ldr	r5, [pc, #28]	; (8004b98 <_write_r+0x20>)
 8004b7c:	4604      	mov	r4, r0
 8004b7e:	4608      	mov	r0, r1
 8004b80:	4611      	mov	r1, r2
 8004b82:	2200      	movs	r2, #0
 8004b84:	602a      	str	r2, [r5, #0]
 8004b86:	461a      	mov	r2, r3
 8004b88:	f7fb fcf0 	bl	800056c <_write>
 8004b8c:	1c43      	adds	r3, r0, #1
 8004b8e:	d102      	bne.n	8004b96 <_write_r+0x1e>
 8004b90:	682b      	ldr	r3, [r5, #0]
 8004b92:	b103      	cbz	r3, 8004b96 <_write_r+0x1e>
 8004b94:	6023      	str	r3, [r4, #0]
 8004b96:	bd38      	pop	{r3, r4, r5, pc}
 8004b98:	200002a4 	.word	0x200002a4

08004b9c <__errno>:
 8004b9c:	4b01      	ldr	r3, [pc, #4]	; (8004ba4 <__errno+0x8>)
 8004b9e:	6818      	ldr	r0, [r3, #0]
 8004ba0:	4770      	bx	lr
 8004ba2:	bf00      	nop
 8004ba4:	20000064 	.word	0x20000064

08004ba8 <__libc_init_array>:
 8004ba8:	b570      	push	{r4, r5, r6, lr}
 8004baa:	4d0d      	ldr	r5, [pc, #52]	; (8004be0 <__libc_init_array+0x38>)
 8004bac:	4c0d      	ldr	r4, [pc, #52]	; (8004be4 <__libc_init_array+0x3c>)
 8004bae:	1b64      	subs	r4, r4, r5
 8004bb0:	10a4      	asrs	r4, r4, #2
 8004bb2:	2600      	movs	r6, #0
 8004bb4:	42a6      	cmp	r6, r4
 8004bb6:	d109      	bne.n	8004bcc <__libc_init_array+0x24>
 8004bb8:	4d0b      	ldr	r5, [pc, #44]	; (8004be8 <__libc_init_array+0x40>)
 8004bba:	4c0c      	ldr	r4, [pc, #48]	; (8004bec <__libc_init_array+0x44>)
 8004bbc:	f000 fdbe 	bl	800573c <_init>
 8004bc0:	1b64      	subs	r4, r4, r5
 8004bc2:	10a4      	asrs	r4, r4, #2
 8004bc4:	2600      	movs	r6, #0
 8004bc6:	42a6      	cmp	r6, r4
 8004bc8:	d105      	bne.n	8004bd6 <__libc_init_array+0x2e>
 8004bca:	bd70      	pop	{r4, r5, r6, pc}
 8004bcc:	f855 3b04 	ldr.w	r3, [r5], #4
 8004bd0:	4798      	blx	r3
 8004bd2:	3601      	adds	r6, #1
 8004bd4:	e7ee      	b.n	8004bb4 <__libc_init_array+0xc>
 8004bd6:	f855 3b04 	ldr.w	r3, [r5], #4
 8004bda:	4798      	blx	r3
 8004bdc:	3601      	adds	r6, #1
 8004bde:	e7f2      	b.n	8004bc6 <__libc_init_array+0x1e>
 8004be0:	080057ec 	.word	0x080057ec
 8004be4:	080057ec 	.word	0x080057ec
 8004be8:	080057ec 	.word	0x080057ec
 8004bec:	080057f0 	.word	0x080057f0

08004bf0 <__retarget_lock_acquire_recursive>:
 8004bf0:	4770      	bx	lr

08004bf2 <__retarget_lock_release_recursive>:
 8004bf2:	4770      	bx	lr

08004bf4 <_free_r>:
 8004bf4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004bf6:	2900      	cmp	r1, #0
 8004bf8:	d044      	beq.n	8004c84 <_free_r+0x90>
 8004bfa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004bfe:	9001      	str	r0, [sp, #4]
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	f1a1 0404 	sub.w	r4, r1, #4
 8004c06:	bfb8      	it	lt
 8004c08:	18e4      	addlt	r4, r4, r3
 8004c0a:	f000 f8df 	bl	8004dcc <__malloc_lock>
 8004c0e:	4a1e      	ldr	r2, [pc, #120]	; (8004c88 <_free_r+0x94>)
 8004c10:	9801      	ldr	r0, [sp, #4]
 8004c12:	6813      	ldr	r3, [r2, #0]
 8004c14:	b933      	cbnz	r3, 8004c24 <_free_r+0x30>
 8004c16:	6063      	str	r3, [r4, #4]
 8004c18:	6014      	str	r4, [r2, #0]
 8004c1a:	b003      	add	sp, #12
 8004c1c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004c20:	f000 b8da 	b.w	8004dd8 <__malloc_unlock>
 8004c24:	42a3      	cmp	r3, r4
 8004c26:	d908      	bls.n	8004c3a <_free_r+0x46>
 8004c28:	6825      	ldr	r5, [r4, #0]
 8004c2a:	1961      	adds	r1, r4, r5
 8004c2c:	428b      	cmp	r3, r1
 8004c2e:	bf01      	itttt	eq
 8004c30:	6819      	ldreq	r1, [r3, #0]
 8004c32:	685b      	ldreq	r3, [r3, #4]
 8004c34:	1949      	addeq	r1, r1, r5
 8004c36:	6021      	streq	r1, [r4, #0]
 8004c38:	e7ed      	b.n	8004c16 <_free_r+0x22>
 8004c3a:	461a      	mov	r2, r3
 8004c3c:	685b      	ldr	r3, [r3, #4]
 8004c3e:	b10b      	cbz	r3, 8004c44 <_free_r+0x50>
 8004c40:	42a3      	cmp	r3, r4
 8004c42:	d9fa      	bls.n	8004c3a <_free_r+0x46>
 8004c44:	6811      	ldr	r1, [r2, #0]
 8004c46:	1855      	adds	r5, r2, r1
 8004c48:	42a5      	cmp	r5, r4
 8004c4a:	d10b      	bne.n	8004c64 <_free_r+0x70>
 8004c4c:	6824      	ldr	r4, [r4, #0]
 8004c4e:	4421      	add	r1, r4
 8004c50:	1854      	adds	r4, r2, r1
 8004c52:	42a3      	cmp	r3, r4
 8004c54:	6011      	str	r1, [r2, #0]
 8004c56:	d1e0      	bne.n	8004c1a <_free_r+0x26>
 8004c58:	681c      	ldr	r4, [r3, #0]
 8004c5a:	685b      	ldr	r3, [r3, #4]
 8004c5c:	6053      	str	r3, [r2, #4]
 8004c5e:	440c      	add	r4, r1
 8004c60:	6014      	str	r4, [r2, #0]
 8004c62:	e7da      	b.n	8004c1a <_free_r+0x26>
 8004c64:	d902      	bls.n	8004c6c <_free_r+0x78>
 8004c66:	230c      	movs	r3, #12
 8004c68:	6003      	str	r3, [r0, #0]
 8004c6a:	e7d6      	b.n	8004c1a <_free_r+0x26>
 8004c6c:	6825      	ldr	r5, [r4, #0]
 8004c6e:	1961      	adds	r1, r4, r5
 8004c70:	428b      	cmp	r3, r1
 8004c72:	bf04      	itt	eq
 8004c74:	6819      	ldreq	r1, [r3, #0]
 8004c76:	685b      	ldreq	r3, [r3, #4]
 8004c78:	6063      	str	r3, [r4, #4]
 8004c7a:	bf04      	itt	eq
 8004c7c:	1949      	addeq	r1, r1, r5
 8004c7e:	6021      	streq	r1, [r4, #0]
 8004c80:	6054      	str	r4, [r2, #4]
 8004c82:	e7ca      	b.n	8004c1a <_free_r+0x26>
 8004c84:	b003      	add	sp, #12
 8004c86:	bd30      	pop	{r4, r5, pc}
 8004c88:	200002ac 	.word	0x200002ac

08004c8c <sbrk_aligned>:
 8004c8c:	b570      	push	{r4, r5, r6, lr}
 8004c8e:	4e0e      	ldr	r6, [pc, #56]	; (8004cc8 <sbrk_aligned+0x3c>)
 8004c90:	460c      	mov	r4, r1
 8004c92:	6831      	ldr	r1, [r6, #0]
 8004c94:	4605      	mov	r5, r0
 8004c96:	b911      	cbnz	r1, 8004c9e <sbrk_aligned+0x12>
 8004c98:	f000 fcbc 	bl	8005614 <_sbrk_r>
 8004c9c:	6030      	str	r0, [r6, #0]
 8004c9e:	4621      	mov	r1, r4
 8004ca0:	4628      	mov	r0, r5
 8004ca2:	f000 fcb7 	bl	8005614 <_sbrk_r>
 8004ca6:	1c43      	adds	r3, r0, #1
 8004ca8:	d00a      	beq.n	8004cc0 <sbrk_aligned+0x34>
 8004caa:	1cc4      	adds	r4, r0, #3
 8004cac:	f024 0403 	bic.w	r4, r4, #3
 8004cb0:	42a0      	cmp	r0, r4
 8004cb2:	d007      	beq.n	8004cc4 <sbrk_aligned+0x38>
 8004cb4:	1a21      	subs	r1, r4, r0
 8004cb6:	4628      	mov	r0, r5
 8004cb8:	f000 fcac 	bl	8005614 <_sbrk_r>
 8004cbc:	3001      	adds	r0, #1
 8004cbe:	d101      	bne.n	8004cc4 <sbrk_aligned+0x38>
 8004cc0:	f04f 34ff 	mov.w	r4, #4294967295
 8004cc4:	4620      	mov	r0, r4
 8004cc6:	bd70      	pop	{r4, r5, r6, pc}
 8004cc8:	200002b0 	.word	0x200002b0

08004ccc <_malloc_r>:
 8004ccc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004cd0:	1ccd      	adds	r5, r1, #3
 8004cd2:	f025 0503 	bic.w	r5, r5, #3
 8004cd6:	3508      	adds	r5, #8
 8004cd8:	2d0c      	cmp	r5, #12
 8004cda:	bf38      	it	cc
 8004cdc:	250c      	movcc	r5, #12
 8004cde:	2d00      	cmp	r5, #0
 8004ce0:	4607      	mov	r7, r0
 8004ce2:	db01      	blt.n	8004ce8 <_malloc_r+0x1c>
 8004ce4:	42a9      	cmp	r1, r5
 8004ce6:	d905      	bls.n	8004cf4 <_malloc_r+0x28>
 8004ce8:	230c      	movs	r3, #12
 8004cea:	603b      	str	r3, [r7, #0]
 8004cec:	2600      	movs	r6, #0
 8004cee:	4630      	mov	r0, r6
 8004cf0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004cf4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8004dc8 <_malloc_r+0xfc>
 8004cf8:	f000 f868 	bl	8004dcc <__malloc_lock>
 8004cfc:	f8d8 3000 	ldr.w	r3, [r8]
 8004d00:	461c      	mov	r4, r3
 8004d02:	bb5c      	cbnz	r4, 8004d5c <_malloc_r+0x90>
 8004d04:	4629      	mov	r1, r5
 8004d06:	4638      	mov	r0, r7
 8004d08:	f7ff ffc0 	bl	8004c8c <sbrk_aligned>
 8004d0c:	1c43      	adds	r3, r0, #1
 8004d0e:	4604      	mov	r4, r0
 8004d10:	d155      	bne.n	8004dbe <_malloc_r+0xf2>
 8004d12:	f8d8 4000 	ldr.w	r4, [r8]
 8004d16:	4626      	mov	r6, r4
 8004d18:	2e00      	cmp	r6, #0
 8004d1a:	d145      	bne.n	8004da8 <_malloc_r+0xdc>
 8004d1c:	2c00      	cmp	r4, #0
 8004d1e:	d048      	beq.n	8004db2 <_malloc_r+0xe6>
 8004d20:	6823      	ldr	r3, [r4, #0]
 8004d22:	4631      	mov	r1, r6
 8004d24:	4638      	mov	r0, r7
 8004d26:	eb04 0903 	add.w	r9, r4, r3
 8004d2a:	f000 fc73 	bl	8005614 <_sbrk_r>
 8004d2e:	4581      	cmp	r9, r0
 8004d30:	d13f      	bne.n	8004db2 <_malloc_r+0xe6>
 8004d32:	6821      	ldr	r1, [r4, #0]
 8004d34:	1a6d      	subs	r5, r5, r1
 8004d36:	4629      	mov	r1, r5
 8004d38:	4638      	mov	r0, r7
 8004d3a:	f7ff ffa7 	bl	8004c8c <sbrk_aligned>
 8004d3e:	3001      	adds	r0, #1
 8004d40:	d037      	beq.n	8004db2 <_malloc_r+0xe6>
 8004d42:	6823      	ldr	r3, [r4, #0]
 8004d44:	442b      	add	r3, r5
 8004d46:	6023      	str	r3, [r4, #0]
 8004d48:	f8d8 3000 	ldr.w	r3, [r8]
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d038      	beq.n	8004dc2 <_malloc_r+0xf6>
 8004d50:	685a      	ldr	r2, [r3, #4]
 8004d52:	42a2      	cmp	r2, r4
 8004d54:	d12b      	bne.n	8004dae <_malloc_r+0xe2>
 8004d56:	2200      	movs	r2, #0
 8004d58:	605a      	str	r2, [r3, #4]
 8004d5a:	e00f      	b.n	8004d7c <_malloc_r+0xb0>
 8004d5c:	6822      	ldr	r2, [r4, #0]
 8004d5e:	1b52      	subs	r2, r2, r5
 8004d60:	d41f      	bmi.n	8004da2 <_malloc_r+0xd6>
 8004d62:	2a0b      	cmp	r2, #11
 8004d64:	d917      	bls.n	8004d96 <_malloc_r+0xca>
 8004d66:	1961      	adds	r1, r4, r5
 8004d68:	42a3      	cmp	r3, r4
 8004d6a:	6025      	str	r5, [r4, #0]
 8004d6c:	bf18      	it	ne
 8004d6e:	6059      	strne	r1, [r3, #4]
 8004d70:	6863      	ldr	r3, [r4, #4]
 8004d72:	bf08      	it	eq
 8004d74:	f8c8 1000 	streq.w	r1, [r8]
 8004d78:	5162      	str	r2, [r4, r5]
 8004d7a:	604b      	str	r3, [r1, #4]
 8004d7c:	4638      	mov	r0, r7
 8004d7e:	f104 060b 	add.w	r6, r4, #11
 8004d82:	f000 f829 	bl	8004dd8 <__malloc_unlock>
 8004d86:	f026 0607 	bic.w	r6, r6, #7
 8004d8a:	1d23      	adds	r3, r4, #4
 8004d8c:	1af2      	subs	r2, r6, r3
 8004d8e:	d0ae      	beq.n	8004cee <_malloc_r+0x22>
 8004d90:	1b9b      	subs	r3, r3, r6
 8004d92:	50a3      	str	r3, [r4, r2]
 8004d94:	e7ab      	b.n	8004cee <_malloc_r+0x22>
 8004d96:	42a3      	cmp	r3, r4
 8004d98:	6862      	ldr	r2, [r4, #4]
 8004d9a:	d1dd      	bne.n	8004d58 <_malloc_r+0x8c>
 8004d9c:	f8c8 2000 	str.w	r2, [r8]
 8004da0:	e7ec      	b.n	8004d7c <_malloc_r+0xb0>
 8004da2:	4623      	mov	r3, r4
 8004da4:	6864      	ldr	r4, [r4, #4]
 8004da6:	e7ac      	b.n	8004d02 <_malloc_r+0x36>
 8004da8:	4634      	mov	r4, r6
 8004daa:	6876      	ldr	r6, [r6, #4]
 8004dac:	e7b4      	b.n	8004d18 <_malloc_r+0x4c>
 8004dae:	4613      	mov	r3, r2
 8004db0:	e7cc      	b.n	8004d4c <_malloc_r+0x80>
 8004db2:	230c      	movs	r3, #12
 8004db4:	603b      	str	r3, [r7, #0]
 8004db6:	4638      	mov	r0, r7
 8004db8:	f000 f80e 	bl	8004dd8 <__malloc_unlock>
 8004dbc:	e797      	b.n	8004cee <_malloc_r+0x22>
 8004dbe:	6025      	str	r5, [r4, #0]
 8004dc0:	e7dc      	b.n	8004d7c <_malloc_r+0xb0>
 8004dc2:	605b      	str	r3, [r3, #4]
 8004dc4:	deff      	udf	#255	; 0xff
 8004dc6:	bf00      	nop
 8004dc8:	200002ac 	.word	0x200002ac

08004dcc <__malloc_lock>:
 8004dcc:	4801      	ldr	r0, [pc, #4]	; (8004dd4 <__malloc_lock+0x8>)
 8004dce:	f7ff bf0f 	b.w	8004bf0 <__retarget_lock_acquire_recursive>
 8004dd2:	bf00      	nop
 8004dd4:	200002a8 	.word	0x200002a8

08004dd8 <__malloc_unlock>:
 8004dd8:	4801      	ldr	r0, [pc, #4]	; (8004de0 <__malloc_unlock+0x8>)
 8004dda:	f7ff bf0a 	b.w	8004bf2 <__retarget_lock_release_recursive>
 8004dde:	bf00      	nop
 8004de0:	200002a8 	.word	0x200002a8

08004de4 <__sfputc_r>:
 8004de4:	6893      	ldr	r3, [r2, #8]
 8004de6:	3b01      	subs	r3, #1
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	b410      	push	{r4}
 8004dec:	6093      	str	r3, [r2, #8]
 8004dee:	da08      	bge.n	8004e02 <__sfputc_r+0x1e>
 8004df0:	6994      	ldr	r4, [r2, #24]
 8004df2:	42a3      	cmp	r3, r4
 8004df4:	db01      	blt.n	8004dfa <__sfputc_r+0x16>
 8004df6:	290a      	cmp	r1, #10
 8004df8:	d103      	bne.n	8004e02 <__sfputc_r+0x1e>
 8004dfa:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004dfe:	f000 bb73 	b.w	80054e8 <__swbuf_r>
 8004e02:	6813      	ldr	r3, [r2, #0]
 8004e04:	1c58      	adds	r0, r3, #1
 8004e06:	6010      	str	r0, [r2, #0]
 8004e08:	7019      	strb	r1, [r3, #0]
 8004e0a:	4608      	mov	r0, r1
 8004e0c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004e10:	4770      	bx	lr

08004e12 <__sfputs_r>:
 8004e12:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e14:	4606      	mov	r6, r0
 8004e16:	460f      	mov	r7, r1
 8004e18:	4614      	mov	r4, r2
 8004e1a:	18d5      	adds	r5, r2, r3
 8004e1c:	42ac      	cmp	r4, r5
 8004e1e:	d101      	bne.n	8004e24 <__sfputs_r+0x12>
 8004e20:	2000      	movs	r0, #0
 8004e22:	e007      	b.n	8004e34 <__sfputs_r+0x22>
 8004e24:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004e28:	463a      	mov	r2, r7
 8004e2a:	4630      	mov	r0, r6
 8004e2c:	f7ff ffda 	bl	8004de4 <__sfputc_r>
 8004e30:	1c43      	adds	r3, r0, #1
 8004e32:	d1f3      	bne.n	8004e1c <__sfputs_r+0xa>
 8004e34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004e38 <_vfiprintf_r>:
 8004e38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e3c:	460d      	mov	r5, r1
 8004e3e:	b09d      	sub	sp, #116	; 0x74
 8004e40:	4614      	mov	r4, r2
 8004e42:	4698      	mov	r8, r3
 8004e44:	4606      	mov	r6, r0
 8004e46:	b118      	cbz	r0, 8004e50 <_vfiprintf_r+0x18>
 8004e48:	6a03      	ldr	r3, [r0, #32]
 8004e4a:	b90b      	cbnz	r3, 8004e50 <_vfiprintf_r+0x18>
 8004e4c:	f7ff fdcc 	bl	80049e8 <__sinit>
 8004e50:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004e52:	07d9      	lsls	r1, r3, #31
 8004e54:	d405      	bmi.n	8004e62 <_vfiprintf_r+0x2a>
 8004e56:	89ab      	ldrh	r3, [r5, #12]
 8004e58:	059a      	lsls	r2, r3, #22
 8004e5a:	d402      	bmi.n	8004e62 <_vfiprintf_r+0x2a>
 8004e5c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004e5e:	f7ff fec7 	bl	8004bf0 <__retarget_lock_acquire_recursive>
 8004e62:	89ab      	ldrh	r3, [r5, #12]
 8004e64:	071b      	lsls	r3, r3, #28
 8004e66:	d501      	bpl.n	8004e6c <_vfiprintf_r+0x34>
 8004e68:	692b      	ldr	r3, [r5, #16]
 8004e6a:	b99b      	cbnz	r3, 8004e94 <_vfiprintf_r+0x5c>
 8004e6c:	4629      	mov	r1, r5
 8004e6e:	4630      	mov	r0, r6
 8004e70:	f000 fb78 	bl	8005564 <__swsetup_r>
 8004e74:	b170      	cbz	r0, 8004e94 <_vfiprintf_r+0x5c>
 8004e76:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004e78:	07dc      	lsls	r4, r3, #31
 8004e7a:	d504      	bpl.n	8004e86 <_vfiprintf_r+0x4e>
 8004e7c:	f04f 30ff 	mov.w	r0, #4294967295
 8004e80:	b01d      	add	sp, #116	; 0x74
 8004e82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e86:	89ab      	ldrh	r3, [r5, #12]
 8004e88:	0598      	lsls	r0, r3, #22
 8004e8a:	d4f7      	bmi.n	8004e7c <_vfiprintf_r+0x44>
 8004e8c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004e8e:	f7ff feb0 	bl	8004bf2 <__retarget_lock_release_recursive>
 8004e92:	e7f3      	b.n	8004e7c <_vfiprintf_r+0x44>
 8004e94:	2300      	movs	r3, #0
 8004e96:	9309      	str	r3, [sp, #36]	; 0x24
 8004e98:	2320      	movs	r3, #32
 8004e9a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004e9e:	f8cd 800c 	str.w	r8, [sp, #12]
 8004ea2:	2330      	movs	r3, #48	; 0x30
 8004ea4:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8005058 <_vfiprintf_r+0x220>
 8004ea8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004eac:	f04f 0901 	mov.w	r9, #1
 8004eb0:	4623      	mov	r3, r4
 8004eb2:	469a      	mov	sl, r3
 8004eb4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004eb8:	b10a      	cbz	r2, 8004ebe <_vfiprintf_r+0x86>
 8004eba:	2a25      	cmp	r2, #37	; 0x25
 8004ebc:	d1f9      	bne.n	8004eb2 <_vfiprintf_r+0x7a>
 8004ebe:	ebba 0b04 	subs.w	fp, sl, r4
 8004ec2:	d00b      	beq.n	8004edc <_vfiprintf_r+0xa4>
 8004ec4:	465b      	mov	r3, fp
 8004ec6:	4622      	mov	r2, r4
 8004ec8:	4629      	mov	r1, r5
 8004eca:	4630      	mov	r0, r6
 8004ecc:	f7ff ffa1 	bl	8004e12 <__sfputs_r>
 8004ed0:	3001      	adds	r0, #1
 8004ed2:	f000 80a9 	beq.w	8005028 <_vfiprintf_r+0x1f0>
 8004ed6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004ed8:	445a      	add	r2, fp
 8004eda:	9209      	str	r2, [sp, #36]	; 0x24
 8004edc:	f89a 3000 	ldrb.w	r3, [sl]
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	f000 80a1 	beq.w	8005028 <_vfiprintf_r+0x1f0>
 8004ee6:	2300      	movs	r3, #0
 8004ee8:	f04f 32ff 	mov.w	r2, #4294967295
 8004eec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004ef0:	f10a 0a01 	add.w	sl, sl, #1
 8004ef4:	9304      	str	r3, [sp, #16]
 8004ef6:	9307      	str	r3, [sp, #28]
 8004ef8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004efc:	931a      	str	r3, [sp, #104]	; 0x68
 8004efe:	4654      	mov	r4, sl
 8004f00:	2205      	movs	r2, #5
 8004f02:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004f06:	4854      	ldr	r0, [pc, #336]	; (8005058 <_vfiprintf_r+0x220>)
 8004f08:	f7fb f962 	bl	80001d0 <memchr>
 8004f0c:	9a04      	ldr	r2, [sp, #16]
 8004f0e:	b9d8      	cbnz	r0, 8004f48 <_vfiprintf_r+0x110>
 8004f10:	06d1      	lsls	r1, r2, #27
 8004f12:	bf44      	itt	mi
 8004f14:	2320      	movmi	r3, #32
 8004f16:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004f1a:	0713      	lsls	r3, r2, #28
 8004f1c:	bf44      	itt	mi
 8004f1e:	232b      	movmi	r3, #43	; 0x2b
 8004f20:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004f24:	f89a 3000 	ldrb.w	r3, [sl]
 8004f28:	2b2a      	cmp	r3, #42	; 0x2a
 8004f2a:	d015      	beq.n	8004f58 <_vfiprintf_r+0x120>
 8004f2c:	9a07      	ldr	r2, [sp, #28]
 8004f2e:	4654      	mov	r4, sl
 8004f30:	2000      	movs	r0, #0
 8004f32:	f04f 0c0a 	mov.w	ip, #10
 8004f36:	4621      	mov	r1, r4
 8004f38:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004f3c:	3b30      	subs	r3, #48	; 0x30
 8004f3e:	2b09      	cmp	r3, #9
 8004f40:	d94d      	bls.n	8004fde <_vfiprintf_r+0x1a6>
 8004f42:	b1b0      	cbz	r0, 8004f72 <_vfiprintf_r+0x13a>
 8004f44:	9207      	str	r2, [sp, #28]
 8004f46:	e014      	b.n	8004f72 <_vfiprintf_r+0x13a>
 8004f48:	eba0 0308 	sub.w	r3, r0, r8
 8004f4c:	fa09 f303 	lsl.w	r3, r9, r3
 8004f50:	4313      	orrs	r3, r2
 8004f52:	9304      	str	r3, [sp, #16]
 8004f54:	46a2      	mov	sl, r4
 8004f56:	e7d2      	b.n	8004efe <_vfiprintf_r+0xc6>
 8004f58:	9b03      	ldr	r3, [sp, #12]
 8004f5a:	1d19      	adds	r1, r3, #4
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	9103      	str	r1, [sp, #12]
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	bfbb      	ittet	lt
 8004f64:	425b      	neglt	r3, r3
 8004f66:	f042 0202 	orrlt.w	r2, r2, #2
 8004f6a:	9307      	strge	r3, [sp, #28]
 8004f6c:	9307      	strlt	r3, [sp, #28]
 8004f6e:	bfb8      	it	lt
 8004f70:	9204      	strlt	r2, [sp, #16]
 8004f72:	7823      	ldrb	r3, [r4, #0]
 8004f74:	2b2e      	cmp	r3, #46	; 0x2e
 8004f76:	d10c      	bne.n	8004f92 <_vfiprintf_r+0x15a>
 8004f78:	7863      	ldrb	r3, [r4, #1]
 8004f7a:	2b2a      	cmp	r3, #42	; 0x2a
 8004f7c:	d134      	bne.n	8004fe8 <_vfiprintf_r+0x1b0>
 8004f7e:	9b03      	ldr	r3, [sp, #12]
 8004f80:	1d1a      	adds	r2, r3, #4
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	9203      	str	r2, [sp, #12]
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	bfb8      	it	lt
 8004f8a:	f04f 33ff 	movlt.w	r3, #4294967295
 8004f8e:	3402      	adds	r4, #2
 8004f90:	9305      	str	r3, [sp, #20]
 8004f92:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8005068 <_vfiprintf_r+0x230>
 8004f96:	7821      	ldrb	r1, [r4, #0]
 8004f98:	2203      	movs	r2, #3
 8004f9a:	4650      	mov	r0, sl
 8004f9c:	f7fb f918 	bl	80001d0 <memchr>
 8004fa0:	b138      	cbz	r0, 8004fb2 <_vfiprintf_r+0x17a>
 8004fa2:	9b04      	ldr	r3, [sp, #16]
 8004fa4:	eba0 000a 	sub.w	r0, r0, sl
 8004fa8:	2240      	movs	r2, #64	; 0x40
 8004faa:	4082      	lsls	r2, r0
 8004fac:	4313      	orrs	r3, r2
 8004fae:	3401      	adds	r4, #1
 8004fb0:	9304      	str	r3, [sp, #16]
 8004fb2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004fb6:	4829      	ldr	r0, [pc, #164]	; (800505c <_vfiprintf_r+0x224>)
 8004fb8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004fbc:	2206      	movs	r2, #6
 8004fbe:	f7fb f907 	bl	80001d0 <memchr>
 8004fc2:	2800      	cmp	r0, #0
 8004fc4:	d03f      	beq.n	8005046 <_vfiprintf_r+0x20e>
 8004fc6:	4b26      	ldr	r3, [pc, #152]	; (8005060 <_vfiprintf_r+0x228>)
 8004fc8:	bb1b      	cbnz	r3, 8005012 <_vfiprintf_r+0x1da>
 8004fca:	9b03      	ldr	r3, [sp, #12]
 8004fcc:	3307      	adds	r3, #7
 8004fce:	f023 0307 	bic.w	r3, r3, #7
 8004fd2:	3308      	adds	r3, #8
 8004fd4:	9303      	str	r3, [sp, #12]
 8004fd6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004fd8:	443b      	add	r3, r7
 8004fda:	9309      	str	r3, [sp, #36]	; 0x24
 8004fdc:	e768      	b.n	8004eb0 <_vfiprintf_r+0x78>
 8004fde:	fb0c 3202 	mla	r2, ip, r2, r3
 8004fe2:	460c      	mov	r4, r1
 8004fe4:	2001      	movs	r0, #1
 8004fe6:	e7a6      	b.n	8004f36 <_vfiprintf_r+0xfe>
 8004fe8:	2300      	movs	r3, #0
 8004fea:	3401      	adds	r4, #1
 8004fec:	9305      	str	r3, [sp, #20]
 8004fee:	4619      	mov	r1, r3
 8004ff0:	f04f 0c0a 	mov.w	ip, #10
 8004ff4:	4620      	mov	r0, r4
 8004ff6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004ffa:	3a30      	subs	r2, #48	; 0x30
 8004ffc:	2a09      	cmp	r2, #9
 8004ffe:	d903      	bls.n	8005008 <_vfiprintf_r+0x1d0>
 8005000:	2b00      	cmp	r3, #0
 8005002:	d0c6      	beq.n	8004f92 <_vfiprintf_r+0x15a>
 8005004:	9105      	str	r1, [sp, #20]
 8005006:	e7c4      	b.n	8004f92 <_vfiprintf_r+0x15a>
 8005008:	fb0c 2101 	mla	r1, ip, r1, r2
 800500c:	4604      	mov	r4, r0
 800500e:	2301      	movs	r3, #1
 8005010:	e7f0      	b.n	8004ff4 <_vfiprintf_r+0x1bc>
 8005012:	ab03      	add	r3, sp, #12
 8005014:	9300      	str	r3, [sp, #0]
 8005016:	462a      	mov	r2, r5
 8005018:	4b12      	ldr	r3, [pc, #72]	; (8005064 <_vfiprintf_r+0x22c>)
 800501a:	a904      	add	r1, sp, #16
 800501c:	4630      	mov	r0, r6
 800501e:	f3af 8000 	nop.w
 8005022:	4607      	mov	r7, r0
 8005024:	1c78      	adds	r0, r7, #1
 8005026:	d1d6      	bne.n	8004fd6 <_vfiprintf_r+0x19e>
 8005028:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800502a:	07d9      	lsls	r1, r3, #31
 800502c:	d405      	bmi.n	800503a <_vfiprintf_r+0x202>
 800502e:	89ab      	ldrh	r3, [r5, #12]
 8005030:	059a      	lsls	r2, r3, #22
 8005032:	d402      	bmi.n	800503a <_vfiprintf_r+0x202>
 8005034:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005036:	f7ff fddc 	bl	8004bf2 <__retarget_lock_release_recursive>
 800503a:	89ab      	ldrh	r3, [r5, #12]
 800503c:	065b      	lsls	r3, r3, #25
 800503e:	f53f af1d 	bmi.w	8004e7c <_vfiprintf_r+0x44>
 8005042:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005044:	e71c      	b.n	8004e80 <_vfiprintf_r+0x48>
 8005046:	ab03      	add	r3, sp, #12
 8005048:	9300      	str	r3, [sp, #0]
 800504a:	462a      	mov	r2, r5
 800504c:	4b05      	ldr	r3, [pc, #20]	; (8005064 <_vfiprintf_r+0x22c>)
 800504e:	a904      	add	r1, sp, #16
 8005050:	4630      	mov	r0, r6
 8005052:	f000 f879 	bl	8005148 <_printf_i>
 8005056:	e7e4      	b.n	8005022 <_vfiprintf_r+0x1ea>
 8005058:	080057b0 	.word	0x080057b0
 800505c:	080057ba 	.word	0x080057ba
 8005060:	00000000 	.word	0x00000000
 8005064:	08004e13 	.word	0x08004e13
 8005068:	080057b6 	.word	0x080057b6

0800506c <_printf_common>:
 800506c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005070:	4616      	mov	r6, r2
 8005072:	4699      	mov	r9, r3
 8005074:	688a      	ldr	r2, [r1, #8]
 8005076:	690b      	ldr	r3, [r1, #16]
 8005078:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800507c:	4293      	cmp	r3, r2
 800507e:	bfb8      	it	lt
 8005080:	4613      	movlt	r3, r2
 8005082:	6033      	str	r3, [r6, #0]
 8005084:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005088:	4607      	mov	r7, r0
 800508a:	460c      	mov	r4, r1
 800508c:	b10a      	cbz	r2, 8005092 <_printf_common+0x26>
 800508e:	3301      	adds	r3, #1
 8005090:	6033      	str	r3, [r6, #0]
 8005092:	6823      	ldr	r3, [r4, #0]
 8005094:	0699      	lsls	r1, r3, #26
 8005096:	bf42      	ittt	mi
 8005098:	6833      	ldrmi	r3, [r6, #0]
 800509a:	3302      	addmi	r3, #2
 800509c:	6033      	strmi	r3, [r6, #0]
 800509e:	6825      	ldr	r5, [r4, #0]
 80050a0:	f015 0506 	ands.w	r5, r5, #6
 80050a4:	d106      	bne.n	80050b4 <_printf_common+0x48>
 80050a6:	f104 0a19 	add.w	sl, r4, #25
 80050aa:	68e3      	ldr	r3, [r4, #12]
 80050ac:	6832      	ldr	r2, [r6, #0]
 80050ae:	1a9b      	subs	r3, r3, r2
 80050b0:	42ab      	cmp	r3, r5
 80050b2:	dc26      	bgt.n	8005102 <_printf_common+0x96>
 80050b4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80050b8:	1e13      	subs	r3, r2, #0
 80050ba:	6822      	ldr	r2, [r4, #0]
 80050bc:	bf18      	it	ne
 80050be:	2301      	movne	r3, #1
 80050c0:	0692      	lsls	r2, r2, #26
 80050c2:	d42b      	bmi.n	800511c <_printf_common+0xb0>
 80050c4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80050c8:	4649      	mov	r1, r9
 80050ca:	4638      	mov	r0, r7
 80050cc:	47c0      	blx	r8
 80050ce:	3001      	adds	r0, #1
 80050d0:	d01e      	beq.n	8005110 <_printf_common+0xa4>
 80050d2:	6823      	ldr	r3, [r4, #0]
 80050d4:	6922      	ldr	r2, [r4, #16]
 80050d6:	f003 0306 	and.w	r3, r3, #6
 80050da:	2b04      	cmp	r3, #4
 80050dc:	bf02      	ittt	eq
 80050de:	68e5      	ldreq	r5, [r4, #12]
 80050e0:	6833      	ldreq	r3, [r6, #0]
 80050e2:	1aed      	subeq	r5, r5, r3
 80050e4:	68a3      	ldr	r3, [r4, #8]
 80050e6:	bf0c      	ite	eq
 80050e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80050ec:	2500      	movne	r5, #0
 80050ee:	4293      	cmp	r3, r2
 80050f0:	bfc4      	itt	gt
 80050f2:	1a9b      	subgt	r3, r3, r2
 80050f4:	18ed      	addgt	r5, r5, r3
 80050f6:	2600      	movs	r6, #0
 80050f8:	341a      	adds	r4, #26
 80050fa:	42b5      	cmp	r5, r6
 80050fc:	d11a      	bne.n	8005134 <_printf_common+0xc8>
 80050fe:	2000      	movs	r0, #0
 8005100:	e008      	b.n	8005114 <_printf_common+0xa8>
 8005102:	2301      	movs	r3, #1
 8005104:	4652      	mov	r2, sl
 8005106:	4649      	mov	r1, r9
 8005108:	4638      	mov	r0, r7
 800510a:	47c0      	blx	r8
 800510c:	3001      	adds	r0, #1
 800510e:	d103      	bne.n	8005118 <_printf_common+0xac>
 8005110:	f04f 30ff 	mov.w	r0, #4294967295
 8005114:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005118:	3501      	adds	r5, #1
 800511a:	e7c6      	b.n	80050aa <_printf_common+0x3e>
 800511c:	18e1      	adds	r1, r4, r3
 800511e:	1c5a      	adds	r2, r3, #1
 8005120:	2030      	movs	r0, #48	; 0x30
 8005122:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005126:	4422      	add	r2, r4
 8005128:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800512c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005130:	3302      	adds	r3, #2
 8005132:	e7c7      	b.n	80050c4 <_printf_common+0x58>
 8005134:	2301      	movs	r3, #1
 8005136:	4622      	mov	r2, r4
 8005138:	4649      	mov	r1, r9
 800513a:	4638      	mov	r0, r7
 800513c:	47c0      	blx	r8
 800513e:	3001      	adds	r0, #1
 8005140:	d0e6      	beq.n	8005110 <_printf_common+0xa4>
 8005142:	3601      	adds	r6, #1
 8005144:	e7d9      	b.n	80050fa <_printf_common+0x8e>
	...

08005148 <_printf_i>:
 8005148:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800514c:	7e0f      	ldrb	r7, [r1, #24]
 800514e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005150:	2f78      	cmp	r7, #120	; 0x78
 8005152:	4691      	mov	r9, r2
 8005154:	4680      	mov	r8, r0
 8005156:	460c      	mov	r4, r1
 8005158:	469a      	mov	sl, r3
 800515a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800515e:	d807      	bhi.n	8005170 <_printf_i+0x28>
 8005160:	2f62      	cmp	r7, #98	; 0x62
 8005162:	d80a      	bhi.n	800517a <_printf_i+0x32>
 8005164:	2f00      	cmp	r7, #0
 8005166:	f000 80d4 	beq.w	8005312 <_printf_i+0x1ca>
 800516a:	2f58      	cmp	r7, #88	; 0x58
 800516c:	f000 80c0 	beq.w	80052f0 <_printf_i+0x1a8>
 8005170:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005174:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005178:	e03a      	b.n	80051f0 <_printf_i+0xa8>
 800517a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800517e:	2b15      	cmp	r3, #21
 8005180:	d8f6      	bhi.n	8005170 <_printf_i+0x28>
 8005182:	a101      	add	r1, pc, #4	; (adr r1, 8005188 <_printf_i+0x40>)
 8005184:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005188:	080051e1 	.word	0x080051e1
 800518c:	080051f5 	.word	0x080051f5
 8005190:	08005171 	.word	0x08005171
 8005194:	08005171 	.word	0x08005171
 8005198:	08005171 	.word	0x08005171
 800519c:	08005171 	.word	0x08005171
 80051a0:	080051f5 	.word	0x080051f5
 80051a4:	08005171 	.word	0x08005171
 80051a8:	08005171 	.word	0x08005171
 80051ac:	08005171 	.word	0x08005171
 80051b0:	08005171 	.word	0x08005171
 80051b4:	080052f9 	.word	0x080052f9
 80051b8:	08005221 	.word	0x08005221
 80051bc:	080052b3 	.word	0x080052b3
 80051c0:	08005171 	.word	0x08005171
 80051c4:	08005171 	.word	0x08005171
 80051c8:	0800531b 	.word	0x0800531b
 80051cc:	08005171 	.word	0x08005171
 80051d0:	08005221 	.word	0x08005221
 80051d4:	08005171 	.word	0x08005171
 80051d8:	08005171 	.word	0x08005171
 80051dc:	080052bb 	.word	0x080052bb
 80051e0:	682b      	ldr	r3, [r5, #0]
 80051e2:	1d1a      	adds	r2, r3, #4
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	602a      	str	r2, [r5, #0]
 80051e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80051ec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80051f0:	2301      	movs	r3, #1
 80051f2:	e09f      	b.n	8005334 <_printf_i+0x1ec>
 80051f4:	6820      	ldr	r0, [r4, #0]
 80051f6:	682b      	ldr	r3, [r5, #0]
 80051f8:	0607      	lsls	r7, r0, #24
 80051fa:	f103 0104 	add.w	r1, r3, #4
 80051fe:	6029      	str	r1, [r5, #0]
 8005200:	d501      	bpl.n	8005206 <_printf_i+0xbe>
 8005202:	681e      	ldr	r6, [r3, #0]
 8005204:	e003      	b.n	800520e <_printf_i+0xc6>
 8005206:	0646      	lsls	r6, r0, #25
 8005208:	d5fb      	bpl.n	8005202 <_printf_i+0xba>
 800520a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800520e:	2e00      	cmp	r6, #0
 8005210:	da03      	bge.n	800521a <_printf_i+0xd2>
 8005212:	232d      	movs	r3, #45	; 0x2d
 8005214:	4276      	negs	r6, r6
 8005216:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800521a:	485a      	ldr	r0, [pc, #360]	; (8005384 <_printf_i+0x23c>)
 800521c:	230a      	movs	r3, #10
 800521e:	e012      	b.n	8005246 <_printf_i+0xfe>
 8005220:	682b      	ldr	r3, [r5, #0]
 8005222:	6820      	ldr	r0, [r4, #0]
 8005224:	1d19      	adds	r1, r3, #4
 8005226:	6029      	str	r1, [r5, #0]
 8005228:	0605      	lsls	r5, r0, #24
 800522a:	d501      	bpl.n	8005230 <_printf_i+0xe8>
 800522c:	681e      	ldr	r6, [r3, #0]
 800522e:	e002      	b.n	8005236 <_printf_i+0xee>
 8005230:	0641      	lsls	r1, r0, #25
 8005232:	d5fb      	bpl.n	800522c <_printf_i+0xe4>
 8005234:	881e      	ldrh	r6, [r3, #0]
 8005236:	4853      	ldr	r0, [pc, #332]	; (8005384 <_printf_i+0x23c>)
 8005238:	2f6f      	cmp	r7, #111	; 0x6f
 800523a:	bf0c      	ite	eq
 800523c:	2308      	moveq	r3, #8
 800523e:	230a      	movne	r3, #10
 8005240:	2100      	movs	r1, #0
 8005242:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005246:	6865      	ldr	r5, [r4, #4]
 8005248:	60a5      	str	r5, [r4, #8]
 800524a:	2d00      	cmp	r5, #0
 800524c:	bfa2      	ittt	ge
 800524e:	6821      	ldrge	r1, [r4, #0]
 8005250:	f021 0104 	bicge.w	r1, r1, #4
 8005254:	6021      	strge	r1, [r4, #0]
 8005256:	b90e      	cbnz	r6, 800525c <_printf_i+0x114>
 8005258:	2d00      	cmp	r5, #0
 800525a:	d04b      	beq.n	80052f4 <_printf_i+0x1ac>
 800525c:	4615      	mov	r5, r2
 800525e:	fbb6 f1f3 	udiv	r1, r6, r3
 8005262:	fb03 6711 	mls	r7, r3, r1, r6
 8005266:	5dc7      	ldrb	r7, [r0, r7]
 8005268:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800526c:	4637      	mov	r7, r6
 800526e:	42bb      	cmp	r3, r7
 8005270:	460e      	mov	r6, r1
 8005272:	d9f4      	bls.n	800525e <_printf_i+0x116>
 8005274:	2b08      	cmp	r3, #8
 8005276:	d10b      	bne.n	8005290 <_printf_i+0x148>
 8005278:	6823      	ldr	r3, [r4, #0]
 800527a:	07de      	lsls	r6, r3, #31
 800527c:	d508      	bpl.n	8005290 <_printf_i+0x148>
 800527e:	6923      	ldr	r3, [r4, #16]
 8005280:	6861      	ldr	r1, [r4, #4]
 8005282:	4299      	cmp	r1, r3
 8005284:	bfde      	ittt	le
 8005286:	2330      	movle	r3, #48	; 0x30
 8005288:	f805 3c01 	strble.w	r3, [r5, #-1]
 800528c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005290:	1b52      	subs	r2, r2, r5
 8005292:	6122      	str	r2, [r4, #16]
 8005294:	f8cd a000 	str.w	sl, [sp]
 8005298:	464b      	mov	r3, r9
 800529a:	aa03      	add	r2, sp, #12
 800529c:	4621      	mov	r1, r4
 800529e:	4640      	mov	r0, r8
 80052a0:	f7ff fee4 	bl	800506c <_printf_common>
 80052a4:	3001      	adds	r0, #1
 80052a6:	d14a      	bne.n	800533e <_printf_i+0x1f6>
 80052a8:	f04f 30ff 	mov.w	r0, #4294967295
 80052ac:	b004      	add	sp, #16
 80052ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80052b2:	6823      	ldr	r3, [r4, #0]
 80052b4:	f043 0320 	orr.w	r3, r3, #32
 80052b8:	6023      	str	r3, [r4, #0]
 80052ba:	4833      	ldr	r0, [pc, #204]	; (8005388 <_printf_i+0x240>)
 80052bc:	2778      	movs	r7, #120	; 0x78
 80052be:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80052c2:	6823      	ldr	r3, [r4, #0]
 80052c4:	6829      	ldr	r1, [r5, #0]
 80052c6:	061f      	lsls	r7, r3, #24
 80052c8:	f851 6b04 	ldr.w	r6, [r1], #4
 80052cc:	d402      	bmi.n	80052d4 <_printf_i+0x18c>
 80052ce:	065f      	lsls	r7, r3, #25
 80052d0:	bf48      	it	mi
 80052d2:	b2b6      	uxthmi	r6, r6
 80052d4:	07df      	lsls	r7, r3, #31
 80052d6:	bf48      	it	mi
 80052d8:	f043 0320 	orrmi.w	r3, r3, #32
 80052dc:	6029      	str	r1, [r5, #0]
 80052de:	bf48      	it	mi
 80052e0:	6023      	strmi	r3, [r4, #0]
 80052e2:	b91e      	cbnz	r6, 80052ec <_printf_i+0x1a4>
 80052e4:	6823      	ldr	r3, [r4, #0]
 80052e6:	f023 0320 	bic.w	r3, r3, #32
 80052ea:	6023      	str	r3, [r4, #0]
 80052ec:	2310      	movs	r3, #16
 80052ee:	e7a7      	b.n	8005240 <_printf_i+0xf8>
 80052f0:	4824      	ldr	r0, [pc, #144]	; (8005384 <_printf_i+0x23c>)
 80052f2:	e7e4      	b.n	80052be <_printf_i+0x176>
 80052f4:	4615      	mov	r5, r2
 80052f6:	e7bd      	b.n	8005274 <_printf_i+0x12c>
 80052f8:	682b      	ldr	r3, [r5, #0]
 80052fa:	6826      	ldr	r6, [r4, #0]
 80052fc:	6961      	ldr	r1, [r4, #20]
 80052fe:	1d18      	adds	r0, r3, #4
 8005300:	6028      	str	r0, [r5, #0]
 8005302:	0635      	lsls	r5, r6, #24
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	d501      	bpl.n	800530c <_printf_i+0x1c4>
 8005308:	6019      	str	r1, [r3, #0]
 800530a:	e002      	b.n	8005312 <_printf_i+0x1ca>
 800530c:	0670      	lsls	r0, r6, #25
 800530e:	d5fb      	bpl.n	8005308 <_printf_i+0x1c0>
 8005310:	8019      	strh	r1, [r3, #0]
 8005312:	2300      	movs	r3, #0
 8005314:	6123      	str	r3, [r4, #16]
 8005316:	4615      	mov	r5, r2
 8005318:	e7bc      	b.n	8005294 <_printf_i+0x14c>
 800531a:	682b      	ldr	r3, [r5, #0]
 800531c:	1d1a      	adds	r2, r3, #4
 800531e:	602a      	str	r2, [r5, #0]
 8005320:	681d      	ldr	r5, [r3, #0]
 8005322:	6862      	ldr	r2, [r4, #4]
 8005324:	2100      	movs	r1, #0
 8005326:	4628      	mov	r0, r5
 8005328:	f7fa ff52 	bl	80001d0 <memchr>
 800532c:	b108      	cbz	r0, 8005332 <_printf_i+0x1ea>
 800532e:	1b40      	subs	r0, r0, r5
 8005330:	6060      	str	r0, [r4, #4]
 8005332:	6863      	ldr	r3, [r4, #4]
 8005334:	6123      	str	r3, [r4, #16]
 8005336:	2300      	movs	r3, #0
 8005338:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800533c:	e7aa      	b.n	8005294 <_printf_i+0x14c>
 800533e:	6923      	ldr	r3, [r4, #16]
 8005340:	462a      	mov	r2, r5
 8005342:	4649      	mov	r1, r9
 8005344:	4640      	mov	r0, r8
 8005346:	47d0      	blx	sl
 8005348:	3001      	adds	r0, #1
 800534a:	d0ad      	beq.n	80052a8 <_printf_i+0x160>
 800534c:	6823      	ldr	r3, [r4, #0]
 800534e:	079b      	lsls	r3, r3, #30
 8005350:	d413      	bmi.n	800537a <_printf_i+0x232>
 8005352:	68e0      	ldr	r0, [r4, #12]
 8005354:	9b03      	ldr	r3, [sp, #12]
 8005356:	4298      	cmp	r0, r3
 8005358:	bfb8      	it	lt
 800535a:	4618      	movlt	r0, r3
 800535c:	e7a6      	b.n	80052ac <_printf_i+0x164>
 800535e:	2301      	movs	r3, #1
 8005360:	4632      	mov	r2, r6
 8005362:	4649      	mov	r1, r9
 8005364:	4640      	mov	r0, r8
 8005366:	47d0      	blx	sl
 8005368:	3001      	adds	r0, #1
 800536a:	d09d      	beq.n	80052a8 <_printf_i+0x160>
 800536c:	3501      	adds	r5, #1
 800536e:	68e3      	ldr	r3, [r4, #12]
 8005370:	9903      	ldr	r1, [sp, #12]
 8005372:	1a5b      	subs	r3, r3, r1
 8005374:	42ab      	cmp	r3, r5
 8005376:	dcf2      	bgt.n	800535e <_printf_i+0x216>
 8005378:	e7eb      	b.n	8005352 <_printf_i+0x20a>
 800537a:	2500      	movs	r5, #0
 800537c:	f104 0619 	add.w	r6, r4, #25
 8005380:	e7f5      	b.n	800536e <_printf_i+0x226>
 8005382:	bf00      	nop
 8005384:	080057c1 	.word	0x080057c1
 8005388:	080057d2 	.word	0x080057d2

0800538c <__sflush_r>:
 800538c:	898a      	ldrh	r2, [r1, #12]
 800538e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005392:	4605      	mov	r5, r0
 8005394:	0710      	lsls	r0, r2, #28
 8005396:	460c      	mov	r4, r1
 8005398:	d458      	bmi.n	800544c <__sflush_r+0xc0>
 800539a:	684b      	ldr	r3, [r1, #4]
 800539c:	2b00      	cmp	r3, #0
 800539e:	dc05      	bgt.n	80053ac <__sflush_r+0x20>
 80053a0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	dc02      	bgt.n	80053ac <__sflush_r+0x20>
 80053a6:	2000      	movs	r0, #0
 80053a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80053ac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80053ae:	2e00      	cmp	r6, #0
 80053b0:	d0f9      	beq.n	80053a6 <__sflush_r+0x1a>
 80053b2:	2300      	movs	r3, #0
 80053b4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80053b8:	682f      	ldr	r7, [r5, #0]
 80053ba:	6a21      	ldr	r1, [r4, #32]
 80053bc:	602b      	str	r3, [r5, #0]
 80053be:	d032      	beq.n	8005426 <__sflush_r+0x9a>
 80053c0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80053c2:	89a3      	ldrh	r3, [r4, #12]
 80053c4:	075a      	lsls	r2, r3, #29
 80053c6:	d505      	bpl.n	80053d4 <__sflush_r+0x48>
 80053c8:	6863      	ldr	r3, [r4, #4]
 80053ca:	1ac0      	subs	r0, r0, r3
 80053cc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80053ce:	b10b      	cbz	r3, 80053d4 <__sflush_r+0x48>
 80053d0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80053d2:	1ac0      	subs	r0, r0, r3
 80053d4:	2300      	movs	r3, #0
 80053d6:	4602      	mov	r2, r0
 80053d8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80053da:	6a21      	ldr	r1, [r4, #32]
 80053dc:	4628      	mov	r0, r5
 80053de:	47b0      	blx	r6
 80053e0:	1c43      	adds	r3, r0, #1
 80053e2:	89a3      	ldrh	r3, [r4, #12]
 80053e4:	d106      	bne.n	80053f4 <__sflush_r+0x68>
 80053e6:	6829      	ldr	r1, [r5, #0]
 80053e8:	291d      	cmp	r1, #29
 80053ea:	d82b      	bhi.n	8005444 <__sflush_r+0xb8>
 80053ec:	4a29      	ldr	r2, [pc, #164]	; (8005494 <__sflush_r+0x108>)
 80053ee:	410a      	asrs	r2, r1
 80053f0:	07d6      	lsls	r6, r2, #31
 80053f2:	d427      	bmi.n	8005444 <__sflush_r+0xb8>
 80053f4:	2200      	movs	r2, #0
 80053f6:	6062      	str	r2, [r4, #4]
 80053f8:	04d9      	lsls	r1, r3, #19
 80053fa:	6922      	ldr	r2, [r4, #16]
 80053fc:	6022      	str	r2, [r4, #0]
 80053fe:	d504      	bpl.n	800540a <__sflush_r+0x7e>
 8005400:	1c42      	adds	r2, r0, #1
 8005402:	d101      	bne.n	8005408 <__sflush_r+0x7c>
 8005404:	682b      	ldr	r3, [r5, #0]
 8005406:	b903      	cbnz	r3, 800540a <__sflush_r+0x7e>
 8005408:	6560      	str	r0, [r4, #84]	; 0x54
 800540a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800540c:	602f      	str	r7, [r5, #0]
 800540e:	2900      	cmp	r1, #0
 8005410:	d0c9      	beq.n	80053a6 <__sflush_r+0x1a>
 8005412:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005416:	4299      	cmp	r1, r3
 8005418:	d002      	beq.n	8005420 <__sflush_r+0x94>
 800541a:	4628      	mov	r0, r5
 800541c:	f7ff fbea 	bl	8004bf4 <_free_r>
 8005420:	2000      	movs	r0, #0
 8005422:	6360      	str	r0, [r4, #52]	; 0x34
 8005424:	e7c0      	b.n	80053a8 <__sflush_r+0x1c>
 8005426:	2301      	movs	r3, #1
 8005428:	4628      	mov	r0, r5
 800542a:	47b0      	blx	r6
 800542c:	1c41      	adds	r1, r0, #1
 800542e:	d1c8      	bne.n	80053c2 <__sflush_r+0x36>
 8005430:	682b      	ldr	r3, [r5, #0]
 8005432:	2b00      	cmp	r3, #0
 8005434:	d0c5      	beq.n	80053c2 <__sflush_r+0x36>
 8005436:	2b1d      	cmp	r3, #29
 8005438:	d001      	beq.n	800543e <__sflush_r+0xb2>
 800543a:	2b16      	cmp	r3, #22
 800543c:	d101      	bne.n	8005442 <__sflush_r+0xb6>
 800543e:	602f      	str	r7, [r5, #0]
 8005440:	e7b1      	b.n	80053a6 <__sflush_r+0x1a>
 8005442:	89a3      	ldrh	r3, [r4, #12]
 8005444:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005448:	81a3      	strh	r3, [r4, #12]
 800544a:	e7ad      	b.n	80053a8 <__sflush_r+0x1c>
 800544c:	690f      	ldr	r7, [r1, #16]
 800544e:	2f00      	cmp	r7, #0
 8005450:	d0a9      	beq.n	80053a6 <__sflush_r+0x1a>
 8005452:	0793      	lsls	r3, r2, #30
 8005454:	680e      	ldr	r6, [r1, #0]
 8005456:	bf08      	it	eq
 8005458:	694b      	ldreq	r3, [r1, #20]
 800545a:	600f      	str	r7, [r1, #0]
 800545c:	bf18      	it	ne
 800545e:	2300      	movne	r3, #0
 8005460:	eba6 0807 	sub.w	r8, r6, r7
 8005464:	608b      	str	r3, [r1, #8]
 8005466:	f1b8 0f00 	cmp.w	r8, #0
 800546a:	dd9c      	ble.n	80053a6 <__sflush_r+0x1a>
 800546c:	6a21      	ldr	r1, [r4, #32]
 800546e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005470:	4643      	mov	r3, r8
 8005472:	463a      	mov	r2, r7
 8005474:	4628      	mov	r0, r5
 8005476:	47b0      	blx	r6
 8005478:	2800      	cmp	r0, #0
 800547a:	dc06      	bgt.n	800548a <__sflush_r+0xfe>
 800547c:	89a3      	ldrh	r3, [r4, #12]
 800547e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005482:	81a3      	strh	r3, [r4, #12]
 8005484:	f04f 30ff 	mov.w	r0, #4294967295
 8005488:	e78e      	b.n	80053a8 <__sflush_r+0x1c>
 800548a:	4407      	add	r7, r0
 800548c:	eba8 0800 	sub.w	r8, r8, r0
 8005490:	e7e9      	b.n	8005466 <__sflush_r+0xda>
 8005492:	bf00      	nop
 8005494:	dfbffffe 	.word	0xdfbffffe

08005498 <_fflush_r>:
 8005498:	b538      	push	{r3, r4, r5, lr}
 800549a:	690b      	ldr	r3, [r1, #16]
 800549c:	4605      	mov	r5, r0
 800549e:	460c      	mov	r4, r1
 80054a0:	b913      	cbnz	r3, 80054a8 <_fflush_r+0x10>
 80054a2:	2500      	movs	r5, #0
 80054a4:	4628      	mov	r0, r5
 80054a6:	bd38      	pop	{r3, r4, r5, pc}
 80054a8:	b118      	cbz	r0, 80054b2 <_fflush_r+0x1a>
 80054aa:	6a03      	ldr	r3, [r0, #32]
 80054ac:	b90b      	cbnz	r3, 80054b2 <_fflush_r+0x1a>
 80054ae:	f7ff fa9b 	bl	80049e8 <__sinit>
 80054b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d0f3      	beq.n	80054a2 <_fflush_r+0xa>
 80054ba:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80054bc:	07d0      	lsls	r0, r2, #31
 80054be:	d404      	bmi.n	80054ca <_fflush_r+0x32>
 80054c0:	0599      	lsls	r1, r3, #22
 80054c2:	d402      	bmi.n	80054ca <_fflush_r+0x32>
 80054c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80054c6:	f7ff fb93 	bl	8004bf0 <__retarget_lock_acquire_recursive>
 80054ca:	4628      	mov	r0, r5
 80054cc:	4621      	mov	r1, r4
 80054ce:	f7ff ff5d 	bl	800538c <__sflush_r>
 80054d2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80054d4:	07da      	lsls	r2, r3, #31
 80054d6:	4605      	mov	r5, r0
 80054d8:	d4e4      	bmi.n	80054a4 <_fflush_r+0xc>
 80054da:	89a3      	ldrh	r3, [r4, #12]
 80054dc:	059b      	lsls	r3, r3, #22
 80054de:	d4e1      	bmi.n	80054a4 <_fflush_r+0xc>
 80054e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80054e2:	f7ff fb86 	bl	8004bf2 <__retarget_lock_release_recursive>
 80054e6:	e7dd      	b.n	80054a4 <_fflush_r+0xc>

080054e8 <__swbuf_r>:
 80054e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054ea:	460e      	mov	r6, r1
 80054ec:	4614      	mov	r4, r2
 80054ee:	4605      	mov	r5, r0
 80054f0:	b118      	cbz	r0, 80054fa <__swbuf_r+0x12>
 80054f2:	6a03      	ldr	r3, [r0, #32]
 80054f4:	b90b      	cbnz	r3, 80054fa <__swbuf_r+0x12>
 80054f6:	f7ff fa77 	bl	80049e8 <__sinit>
 80054fa:	69a3      	ldr	r3, [r4, #24]
 80054fc:	60a3      	str	r3, [r4, #8]
 80054fe:	89a3      	ldrh	r3, [r4, #12]
 8005500:	071a      	lsls	r2, r3, #28
 8005502:	d525      	bpl.n	8005550 <__swbuf_r+0x68>
 8005504:	6923      	ldr	r3, [r4, #16]
 8005506:	b31b      	cbz	r3, 8005550 <__swbuf_r+0x68>
 8005508:	6823      	ldr	r3, [r4, #0]
 800550a:	6922      	ldr	r2, [r4, #16]
 800550c:	1a98      	subs	r0, r3, r2
 800550e:	6963      	ldr	r3, [r4, #20]
 8005510:	b2f6      	uxtb	r6, r6
 8005512:	4283      	cmp	r3, r0
 8005514:	4637      	mov	r7, r6
 8005516:	dc04      	bgt.n	8005522 <__swbuf_r+0x3a>
 8005518:	4621      	mov	r1, r4
 800551a:	4628      	mov	r0, r5
 800551c:	f7ff ffbc 	bl	8005498 <_fflush_r>
 8005520:	b9e0      	cbnz	r0, 800555c <__swbuf_r+0x74>
 8005522:	68a3      	ldr	r3, [r4, #8]
 8005524:	3b01      	subs	r3, #1
 8005526:	60a3      	str	r3, [r4, #8]
 8005528:	6823      	ldr	r3, [r4, #0]
 800552a:	1c5a      	adds	r2, r3, #1
 800552c:	6022      	str	r2, [r4, #0]
 800552e:	701e      	strb	r6, [r3, #0]
 8005530:	6962      	ldr	r2, [r4, #20]
 8005532:	1c43      	adds	r3, r0, #1
 8005534:	429a      	cmp	r2, r3
 8005536:	d004      	beq.n	8005542 <__swbuf_r+0x5a>
 8005538:	89a3      	ldrh	r3, [r4, #12]
 800553a:	07db      	lsls	r3, r3, #31
 800553c:	d506      	bpl.n	800554c <__swbuf_r+0x64>
 800553e:	2e0a      	cmp	r6, #10
 8005540:	d104      	bne.n	800554c <__swbuf_r+0x64>
 8005542:	4621      	mov	r1, r4
 8005544:	4628      	mov	r0, r5
 8005546:	f7ff ffa7 	bl	8005498 <_fflush_r>
 800554a:	b938      	cbnz	r0, 800555c <__swbuf_r+0x74>
 800554c:	4638      	mov	r0, r7
 800554e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005550:	4621      	mov	r1, r4
 8005552:	4628      	mov	r0, r5
 8005554:	f000 f806 	bl	8005564 <__swsetup_r>
 8005558:	2800      	cmp	r0, #0
 800555a:	d0d5      	beq.n	8005508 <__swbuf_r+0x20>
 800555c:	f04f 37ff 	mov.w	r7, #4294967295
 8005560:	e7f4      	b.n	800554c <__swbuf_r+0x64>
	...

08005564 <__swsetup_r>:
 8005564:	b538      	push	{r3, r4, r5, lr}
 8005566:	4b2a      	ldr	r3, [pc, #168]	; (8005610 <__swsetup_r+0xac>)
 8005568:	4605      	mov	r5, r0
 800556a:	6818      	ldr	r0, [r3, #0]
 800556c:	460c      	mov	r4, r1
 800556e:	b118      	cbz	r0, 8005578 <__swsetup_r+0x14>
 8005570:	6a03      	ldr	r3, [r0, #32]
 8005572:	b90b      	cbnz	r3, 8005578 <__swsetup_r+0x14>
 8005574:	f7ff fa38 	bl	80049e8 <__sinit>
 8005578:	89a3      	ldrh	r3, [r4, #12]
 800557a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800557e:	0718      	lsls	r0, r3, #28
 8005580:	d422      	bmi.n	80055c8 <__swsetup_r+0x64>
 8005582:	06d9      	lsls	r1, r3, #27
 8005584:	d407      	bmi.n	8005596 <__swsetup_r+0x32>
 8005586:	2309      	movs	r3, #9
 8005588:	602b      	str	r3, [r5, #0]
 800558a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800558e:	81a3      	strh	r3, [r4, #12]
 8005590:	f04f 30ff 	mov.w	r0, #4294967295
 8005594:	e034      	b.n	8005600 <__swsetup_r+0x9c>
 8005596:	0758      	lsls	r0, r3, #29
 8005598:	d512      	bpl.n	80055c0 <__swsetup_r+0x5c>
 800559a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800559c:	b141      	cbz	r1, 80055b0 <__swsetup_r+0x4c>
 800559e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80055a2:	4299      	cmp	r1, r3
 80055a4:	d002      	beq.n	80055ac <__swsetup_r+0x48>
 80055a6:	4628      	mov	r0, r5
 80055a8:	f7ff fb24 	bl	8004bf4 <_free_r>
 80055ac:	2300      	movs	r3, #0
 80055ae:	6363      	str	r3, [r4, #52]	; 0x34
 80055b0:	89a3      	ldrh	r3, [r4, #12]
 80055b2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80055b6:	81a3      	strh	r3, [r4, #12]
 80055b8:	2300      	movs	r3, #0
 80055ba:	6063      	str	r3, [r4, #4]
 80055bc:	6923      	ldr	r3, [r4, #16]
 80055be:	6023      	str	r3, [r4, #0]
 80055c0:	89a3      	ldrh	r3, [r4, #12]
 80055c2:	f043 0308 	orr.w	r3, r3, #8
 80055c6:	81a3      	strh	r3, [r4, #12]
 80055c8:	6923      	ldr	r3, [r4, #16]
 80055ca:	b94b      	cbnz	r3, 80055e0 <__swsetup_r+0x7c>
 80055cc:	89a3      	ldrh	r3, [r4, #12]
 80055ce:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80055d2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80055d6:	d003      	beq.n	80055e0 <__swsetup_r+0x7c>
 80055d8:	4621      	mov	r1, r4
 80055da:	4628      	mov	r0, r5
 80055dc:	f000 f850 	bl	8005680 <__smakebuf_r>
 80055e0:	89a0      	ldrh	r0, [r4, #12]
 80055e2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80055e6:	f010 0301 	ands.w	r3, r0, #1
 80055ea:	d00a      	beq.n	8005602 <__swsetup_r+0x9e>
 80055ec:	2300      	movs	r3, #0
 80055ee:	60a3      	str	r3, [r4, #8]
 80055f0:	6963      	ldr	r3, [r4, #20]
 80055f2:	425b      	negs	r3, r3
 80055f4:	61a3      	str	r3, [r4, #24]
 80055f6:	6923      	ldr	r3, [r4, #16]
 80055f8:	b943      	cbnz	r3, 800560c <__swsetup_r+0xa8>
 80055fa:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80055fe:	d1c4      	bne.n	800558a <__swsetup_r+0x26>
 8005600:	bd38      	pop	{r3, r4, r5, pc}
 8005602:	0781      	lsls	r1, r0, #30
 8005604:	bf58      	it	pl
 8005606:	6963      	ldrpl	r3, [r4, #20]
 8005608:	60a3      	str	r3, [r4, #8]
 800560a:	e7f4      	b.n	80055f6 <__swsetup_r+0x92>
 800560c:	2000      	movs	r0, #0
 800560e:	e7f7      	b.n	8005600 <__swsetup_r+0x9c>
 8005610:	20000064 	.word	0x20000064

08005614 <_sbrk_r>:
 8005614:	b538      	push	{r3, r4, r5, lr}
 8005616:	4d06      	ldr	r5, [pc, #24]	; (8005630 <_sbrk_r+0x1c>)
 8005618:	2300      	movs	r3, #0
 800561a:	4604      	mov	r4, r0
 800561c:	4608      	mov	r0, r1
 800561e:	602b      	str	r3, [r5, #0]
 8005620:	f7fb fa28 	bl	8000a74 <_sbrk>
 8005624:	1c43      	adds	r3, r0, #1
 8005626:	d102      	bne.n	800562e <_sbrk_r+0x1a>
 8005628:	682b      	ldr	r3, [r5, #0]
 800562a:	b103      	cbz	r3, 800562e <_sbrk_r+0x1a>
 800562c:	6023      	str	r3, [r4, #0]
 800562e:	bd38      	pop	{r3, r4, r5, pc}
 8005630:	200002a4 	.word	0x200002a4

08005634 <__swhatbuf_r>:
 8005634:	b570      	push	{r4, r5, r6, lr}
 8005636:	460c      	mov	r4, r1
 8005638:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800563c:	2900      	cmp	r1, #0
 800563e:	b096      	sub	sp, #88	; 0x58
 8005640:	4615      	mov	r5, r2
 8005642:	461e      	mov	r6, r3
 8005644:	da0d      	bge.n	8005662 <__swhatbuf_r+0x2e>
 8005646:	89a3      	ldrh	r3, [r4, #12]
 8005648:	f013 0f80 	tst.w	r3, #128	; 0x80
 800564c:	f04f 0100 	mov.w	r1, #0
 8005650:	bf0c      	ite	eq
 8005652:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8005656:	2340      	movne	r3, #64	; 0x40
 8005658:	2000      	movs	r0, #0
 800565a:	6031      	str	r1, [r6, #0]
 800565c:	602b      	str	r3, [r5, #0]
 800565e:	b016      	add	sp, #88	; 0x58
 8005660:	bd70      	pop	{r4, r5, r6, pc}
 8005662:	466a      	mov	r2, sp
 8005664:	f000 f848 	bl	80056f8 <_fstat_r>
 8005668:	2800      	cmp	r0, #0
 800566a:	dbec      	blt.n	8005646 <__swhatbuf_r+0x12>
 800566c:	9901      	ldr	r1, [sp, #4]
 800566e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8005672:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8005676:	4259      	negs	r1, r3
 8005678:	4159      	adcs	r1, r3
 800567a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800567e:	e7eb      	b.n	8005658 <__swhatbuf_r+0x24>

08005680 <__smakebuf_r>:
 8005680:	898b      	ldrh	r3, [r1, #12]
 8005682:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005684:	079d      	lsls	r5, r3, #30
 8005686:	4606      	mov	r6, r0
 8005688:	460c      	mov	r4, r1
 800568a:	d507      	bpl.n	800569c <__smakebuf_r+0x1c>
 800568c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005690:	6023      	str	r3, [r4, #0]
 8005692:	6123      	str	r3, [r4, #16]
 8005694:	2301      	movs	r3, #1
 8005696:	6163      	str	r3, [r4, #20]
 8005698:	b002      	add	sp, #8
 800569a:	bd70      	pop	{r4, r5, r6, pc}
 800569c:	ab01      	add	r3, sp, #4
 800569e:	466a      	mov	r2, sp
 80056a0:	f7ff ffc8 	bl	8005634 <__swhatbuf_r>
 80056a4:	9900      	ldr	r1, [sp, #0]
 80056a6:	4605      	mov	r5, r0
 80056a8:	4630      	mov	r0, r6
 80056aa:	f7ff fb0f 	bl	8004ccc <_malloc_r>
 80056ae:	b948      	cbnz	r0, 80056c4 <__smakebuf_r+0x44>
 80056b0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80056b4:	059a      	lsls	r2, r3, #22
 80056b6:	d4ef      	bmi.n	8005698 <__smakebuf_r+0x18>
 80056b8:	f023 0303 	bic.w	r3, r3, #3
 80056bc:	f043 0302 	orr.w	r3, r3, #2
 80056c0:	81a3      	strh	r3, [r4, #12]
 80056c2:	e7e3      	b.n	800568c <__smakebuf_r+0xc>
 80056c4:	89a3      	ldrh	r3, [r4, #12]
 80056c6:	6020      	str	r0, [r4, #0]
 80056c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80056cc:	81a3      	strh	r3, [r4, #12]
 80056ce:	9b00      	ldr	r3, [sp, #0]
 80056d0:	6163      	str	r3, [r4, #20]
 80056d2:	9b01      	ldr	r3, [sp, #4]
 80056d4:	6120      	str	r0, [r4, #16]
 80056d6:	b15b      	cbz	r3, 80056f0 <__smakebuf_r+0x70>
 80056d8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80056dc:	4630      	mov	r0, r6
 80056de:	f000 f81d 	bl	800571c <_isatty_r>
 80056e2:	b128      	cbz	r0, 80056f0 <__smakebuf_r+0x70>
 80056e4:	89a3      	ldrh	r3, [r4, #12]
 80056e6:	f023 0303 	bic.w	r3, r3, #3
 80056ea:	f043 0301 	orr.w	r3, r3, #1
 80056ee:	81a3      	strh	r3, [r4, #12]
 80056f0:	89a3      	ldrh	r3, [r4, #12]
 80056f2:	431d      	orrs	r5, r3
 80056f4:	81a5      	strh	r5, [r4, #12]
 80056f6:	e7cf      	b.n	8005698 <__smakebuf_r+0x18>

080056f8 <_fstat_r>:
 80056f8:	b538      	push	{r3, r4, r5, lr}
 80056fa:	4d07      	ldr	r5, [pc, #28]	; (8005718 <_fstat_r+0x20>)
 80056fc:	2300      	movs	r3, #0
 80056fe:	4604      	mov	r4, r0
 8005700:	4608      	mov	r0, r1
 8005702:	4611      	mov	r1, r2
 8005704:	602b      	str	r3, [r5, #0]
 8005706:	f7fb f98c 	bl	8000a22 <_fstat>
 800570a:	1c43      	adds	r3, r0, #1
 800570c:	d102      	bne.n	8005714 <_fstat_r+0x1c>
 800570e:	682b      	ldr	r3, [r5, #0]
 8005710:	b103      	cbz	r3, 8005714 <_fstat_r+0x1c>
 8005712:	6023      	str	r3, [r4, #0]
 8005714:	bd38      	pop	{r3, r4, r5, pc}
 8005716:	bf00      	nop
 8005718:	200002a4 	.word	0x200002a4

0800571c <_isatty_r>:
 800571c:	b538      	push	{r3, r4, r5, lr}
 800571e:	4d06      	ldr	r5, [pc, #24]	; (8005738 <_isatty_r+0x1c>)
 8005720:	2300      	movs	r3, #0
 8005722:	4604      	mov	r4, r0
 8005724:	4608      	mov	r0, r1
 8005726:	602b      	str	r3, [r5, #0]
 8005728:	f7fb f98b 	bl	8000a42 <_isatty>
 800572c:	1c43      	adds	r3, r0, #1
 800572e:	d102      	bne.n	8005736 <_isatty_r+0x1a>
 8005730:	682b      	ldr	r3, [r5, #0]
 8005732:	b103      	cbz	r3, 8005736 <_isatty_r+0x1a>
 8005734:	6023      	str	r3, [r4, #0]
 8005736:	bd38      	pop	{r3, r4, r5, pc}
 8005738:	200002a4 	.word	0x200002a4

0800573c <_init>:
 800573c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800573e:	bf00      	nop
 8005740:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005742:	bc08      	pop	{r3}
 8005744:	469e      	mov	lr, r3
 8005746:	4770      	bx	lr

08005748 <_fini>:
 8005748:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800574a:	bf00      	nop
 800574c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800574e:	bc08      	pop	{r3}
 8005750:	469e      	mov	lr, r3
 8005752:	4770      	bx	lr
